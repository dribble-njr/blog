import{_ as o,c as l,e as p,a,d as s,b as e,r as c,o as i}from"./app-x8ymDRL-.js";const u={},r={href:"https://webpack.js.org/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://vite.dev/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://babeljs.io/",target:"_blank",rel:"noopener noreferrer"},m={class:"hint-container tip"},v={href:"https://x.com/kentcdodds/status/1763606427028136131",target:"_blank",rel:"noopener noreferrer"};function g(b,n){const t=c("ExternalLinkIcon");return i(),l("div",null,[n[13]||(n[13]=p(`<h2 id="hello-word" tabindex="-1"><a class="header-anchor" href="#hello-word"><span>Hello Word</span></a></h2><h3 id="in-js" tabindex="-1"><a class="header-anchor" href="#in-js"><span>In JS</span></a></h3><p>在使用 react 之前，我们通常会使用原生 js 来写一些简单的页面。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>

element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;container&#39;</span>
element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&#39;Hello Word&#39;</span>

rootElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="in-react" tabindex="-1"><a class="header-anchor" href="#in-react"><span>In React</span></a></h3><p>React 按照原生 DOM 的操作逻辑，使用 <code>createElement</code> 方法来创建元素，并使用 <code>render</code> 方法来渲染元素。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createRoot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-dom/client&#39;</span>

<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;container&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello Word&#39;</span><span class="token punctuation">)</span>

<span class="token function">createRoot</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>React 是一个跨平台的框架，用于描述 UI 结构和状态逻辑。而 React DOM 是 React 的 DOM 渲染器，用于在浏览器中渲染 React 组件。类似的还有 React Native，用于在移动端渲染 React 组件。</p></div><p><code>createElement</code> 方法的第一个参数是标签名，第二个参数是属性 <code>props</code>，第三个参数（以及后续参数）会被收集起来，作为子元素 <code>children</code>。</p><h3 id="嵌套" tabindex="-1"><a class="header-anchor" href="#嵌套"><span>嵌套</span></a></h3><p>若要实现一个深度嵌套的组件，需要一层一层的嵌套，这样代码会变得非常臃肿，类似下面这样：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// &lt;div class=&quot;container&quot;&gt;</span>
<span class="token comment">// 	&lt;p&gt;Nested list&lt;/p&gt;</span>
<span class="token comment">// 	&lt;ul class=&quot;content&quot;&gt;</span>
<span class="token comment">// 		&lt;li&gt;This is a nested list item&lt;/li&gt;</span>
<span class="token comment">// 		&lt;li&gt;This is a nested list item&lt;/li&gt;</span>
<span class="token comment">// 	&lt;/ul&gt;</span>
<span class="token comment">// &lt;/div&gt;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> createElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createRoot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-dom/client&#39;</span>

<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>
  <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;container&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;Nested list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">createElement</span><span class="token punctuation">(</span>
    <span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;content&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;This is a nested list item&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;This is a nested list item&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token function">createRoot</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此 React 提供了 JSX 语法，让我们可以更方便地编写组件。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在 JSX 中，<code>className</code> 表示类名，而不是 HTML 中的 <code>class</code>，因为在 JavaScript 中，<code>class</code> 是保留字，且 DOM 的类名属性是 <code>className</code>。</p></div><h2 id="jsx" tabindex="-1"><a class="header-anchor" href="#jsx"><span>JSX</span></a></h2>`,16)),a("p",null,[n[3]||(n[3]=s("JSX 是 React 的语法扩展，允许我们在 JavaScript 中使用类似于 HTML 的语法来描述 UI 结构。在生产环境中，打包工具（如 ")),a("a",r,[n[0]||(n[0]=s("Webpack")),e(t)]),n[4]||(n[4]=s("、")),a("a",d,[n[1]||(n[1]=s("Vite")),e(t)]),n[5]||(n[5]=s("）会使用 ")),a("a",k,[n[2]||(n[2]=s("babel")),e(t)]),n[6]||(n[6]=s(" 自动将 JSX 转换为 ")),n[7]||(n[7]=a("code",null,"createElement",-1)),n[8]||(n[8]=s(" 方法调用。"))]),n[14]||(n[14]=p(`<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20250610120118.png" alt="babel" tabindex="0" loading="lazy"><figcaption>babel</figcaption></figure><p>上面复杂嵌套结构在 JSX 中可以简化为：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Nested list</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">This is a nested list item</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">This is a nested list item</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">)</span>

<span class="token function">createRoot</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插值" tabindex="-1"><a class="header-anchor" href="#插值"><span>插值</span></a></h3><p>类似模板字符串，JSX 中也可以使用插值。你可以在里面写 JavaScript 表达式。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token string">&#39;World&#39;</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, </span><span class="token punctuation">{</span>world<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spread" tabindex="-1"><a class="header-anchor" href="#spread"><span>Spread</span></a></h3><p>Spread 允许你将一个对象的所有属性复制到另一个对象。因此，如果有一个对象 <code>props</code>，你可以将它展开，然后传递给 <code>createElement</code> 方法。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>
<span class="token keyword">const</span> className <span class="token operator">=</span> <span class="token string">&#39;container&#39;</span>
<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span> children<span class="token punctuation">,</span> className <span class="token punctuation">}</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JSX 中，也可以使用该特性，将 <code>props</code> 展开。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>
<span class="token keyword">const</span> className <span class="token operator">=</span> <span class="token string">&#39;container&#39;</span>
<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span> children<span class="token punctuation">,</span> className <span class="token punctuation">}</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fragment" tabindex="-1"><a class="header-anchor" href="#fragment"><span>Fragment</span></a></h3><p>React Fragments 允许你将多个元素组合在一起，而不会添加额外的 DOM 节点。这让你可以在组件中返回多个元素，而无需使用额外的 <code>div</code> 包装。这在避免不必要的标记影响样式或布局时非常有用。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">This is a paragraph.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用空标签 <code>&lt;&gt;&lt;/&gt;</code> 来代替 <code>Fragment</code>。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">This is a paragraph.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件"><span>组件</span></a></h2><p>如果我们需要生成以下的 DOM 结构：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Goodbye World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用组件来生成这个结构。到目前为止，<code>createElement</code> 的第一个参数都只传入了一个字符串，表示标签名。但是，它还可以接受一个函数，这个函数会返回需要渲染的结构。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">createElement</span><span class="token punctuation">(</span>
	someFunction<span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">prop1</span><span class="token operator">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">prop2</span><span class="token operator">:</span> <span class="token string">&#39;value2&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token string">&#39;child1&#39;</span><span class="token punctuation">,</span>
	<span class="token string">&#39;child2&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>someFunction</code> 会以 <code>props</code> 对象作为第一个参数，而 <code>children</code> 会作为 <code>props</code> 对象的 <code>children</code> 属性。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">someFunction</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	props<span class="token punctuation">.</span>children <span class="token comment">// [&#39;child1&#39;, &#39;child2&#39;]</span>
	props<span class="token punctuation">.</span>prop1 <span class="token comment">// &#39;value1&#39;</span>
	props<span class="token punctuation">.</span>prop2 <span class="token comment">// &#39;value2&#39;</span>
	<span class="token keyword">return</span> <span class="token comment">// some jsx</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样即可实现组件的复用。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;message&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;container&quot;</span><span class="token operator">&gt;</span>
    <span class="token punctuation">{</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;Hello World&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;Goodbye World&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们想在 JSX 中像 <code>div</code> 一样使用这个组件：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Babel</code> 负责将 JSX 组件编译成 <code>createElement</code> 调用。如果我们尝试 <code>&lt;message&gt;Hello World&lt;/message&gt;</code>，<code>Babel</code> 会这样做：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// the desired output</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;Hello World&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// the actual output</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;Hello World&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，我们只需要告诉 <code>Babel</code> 如何编译我们的 JSX，让它通过函数名而不是字符串来传递函数。下面是一些 <code>Babel</code> 输出的 JSX 示例：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code>element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Capitalized</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement(Capitalized)</span>
element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property.access</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement(property.access)</span>
element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Property.Access</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement(Property.Access)</span>
element <span class="token operator">=</span> <span class="token operator">&lt;</span>Property<span class="token punctuation">[</span><span class="token string">&#39;Access&#39;</span><span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token comment">// SyntaxError</span>
element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lowercase</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement(&#39;lowercase&#39;)</span>
element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kebab-case</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement(&#39;kebab-case&#39;)</span>
element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Upper-Kebab-Case</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement(&#39;Upper-Kebab-Case&#39;)</span>
element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Upper_Snake_Case</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement(Upper_Snake_Case)</span>
element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lower_snake_case</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement(&#39;lower_snake_case&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，最终需要将组件名首字母大写，这样 <code>Babel</code> 才会将它编译成 <code>createElement</code> 调用。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Message</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Goodbye World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Message</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33)),a("div",m,[n[11]||(n[11]=a("p",{class:"hint-container-title"},"提示",-1)),n[12]||(n[12]=a("p",null,[s("Components are functions which accept an object called "),a("code",null,"props"),s(" and return something that is renderable.")],-1)),a("p",null,[n[10]||(n[10]=s("--- from ")),a("a",v,[n[9]||(n[9]=s("Kent C. Dodds")),e(t)])])])])}const x=o(u,[["render",g],["__file","00-fundaments.html.vue"]]),y=JSON.parse('{"path":"/frontend/framework/react/00-fundaments.html","title":"react fundamentals","lang":"zh-CN","frontmatter":{"title":"react fundamentals","date":"2025-06-10T00:00:00.000Z","icon":"state","category":["react"],"tag":["react fundamentals"],"description":"Hello Word In JS 在使用 react 之前，我们通常会使用原生 js 来写一些简单的页面。 In React React 按照原生 DOM 的操作逻辑，使用 createElement 方法来创建元素，并使用 render 方法来渲染元素。 提示 React 是一个跨平台的框架，用于描述 UI 结构和状态逻辑。而 React DOM 是...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/framework/react/00-fundaments.html"}],["meta",{"property":"og:title","content":"react fundamentals"}],["meta",{"property":"og:description","content":"Hello Word In JS 在使用 react 之前，我们通常会使用原生 js 来写一些简单的页面。 In React React 按照原生 DOM 的操作逻辑，使用 createElement 方法来创建元素，并使用 render 方法来渲染元素。 提示 React 是一个跨平台的框架，用于描述 UI 结构和状态逻辑。而 React DOM 是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20250610120118.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T09:10:35.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"react fundamentals"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"react fundamentals"}],["meta",{"property":"article:published_time","content":"2025-06-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T09:10:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"react fundamentals\\",\\"image\\":[\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20250610120118.png\\"],\\"datePublished\\":\\"2025-06-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-10T09:10:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 Hello Word","slug":"hello-word","link":"#hello-word","children":[{"level":3,"title":"1.1 In JS","slug":"in-js","link":"#in-js","children":[]},{"level":3,"title":"1.2 In React","slug":"in-react","link":"#in-react","children":[]},{"level":3,"title":"1.3 嵌套","slug":"嵌套","link":"#嵌套","children":[]}]},{"level":2,"title":"2 JSX","slug":"jsx","link":"#jsx","children":[{"level":3,"title":"2.1 插值","slug":"插值","link":"#插值","children":[]},{"level":3,"title":"2.2 Spread","slug":"spread","link":"#spread","children":[]},{"level":3,"title":"2.3 Fragment","slug":"fragment","link":"#fragment","children":[]}]},{"level":2,"title":"3 组件","slug":"组件","link":"#组件","children":[]}],"git":{"createdTime":1749546635000,"updatedTime":1749546635000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":4.15,"words":1244},"filePathRelative":"frontend/framework/react/00-fundaments.md","localizedDate":"2025年6月10日","excerpt":"","autoDesc":true}');export{x as comp,y as data};
