import{_ as s,c as a,e,o as t}from"./app-DeAcFSYJ.js";const o={};function i(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<p>在使用 Vuex、Pinia 等状态管理库的时候，网页刷新会导致所有数据清空。因此需要用到本地存储，前端本地存储的方式有三种：cookie、localStorage 和 sessionStorage。</p><h2 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie"><span>cookie</span></a></h2><p>HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p><p>Cookie 主要用于以下三个方面：</p><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><p>Cookie 的特点：</p><p>Cookie 的大小受限，一般为 4 KB；同一个域名下存放 Cookie 的个数是有限制的，不同浏览器的个数不一样，一般为 20 个；Cookie 支持设置过期时间，当过期时自动销毁；每次发起同域下的 HTTP 请求时，都会携带当前域名下的 Cookie；支持设置为 HttpOnly，防止 Cookie 被客户端的 JavaScript 访问。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;msg1=hello&quot;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;msg2=cookie&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// msg1=hello;msg2=cookie</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="web-storage" tabindex="-1"><a class="header-anchor" href="#web-storage"><span>Web Storage</span></a></h2><h3 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage"><span>localStorage</span></a></h3><p>存储在浏览器中，如果不主动清除，则永远不会过期。采用键值对的方式存储数据，按<strong>域名</strong>将数据分别保存在对应的数据库文件里。</p><p>localStorage 的特点：</p><ul><li>大小限制为 5MB ~ 10MB；</li><li>在同源的所有标签页和窗口之间共享数据；</li><li>数据仅保存在客户端，不与服务器进行通信；</li><li>数据持久存在且不会过期，重启浏览器后仍然存在。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 通过 setItem() 增加一个数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello localStorage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过 getItem() 获取某个数据</span>
<span class="token keyword">let</span> msg <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过 removeItem() 移除某个数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 移除所有数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sessionstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage"><span>sessionStorage</span></a></h3><p>sessionStorage 属性允许你访问一个，对应<strong>当前源</strong>的 session Storage 对象。它与 localStorage 相似，不同之处在于 localStorage 里面存储的数据没有过期时间设置，而存储在 sessionStorage 里面的数据在页面<strong>会话结束</strong>时会被清除。</p><p>sessionStorage 的特点：</p><ul><li>打开多个相同的 URL 的标签页，会创建各自的 sessionStorage。</li><li>关闭对应浏览器标签或窗口，会清除对应的 sessionStorage。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 通过 setItem() 增加一个数据</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello localStorage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过 getItem() 获取某个数据</span>
<span class="token keyword">let</span> msg <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过 removeItem() 移除某个数据</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 移除所有数据</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存储事件" tabindex="-1"><a class="header-anchor" href="#存储事件"><span>存储事件</span></a></h3><p>每当 Storage 对象发生变化时，都会在文档上触发 storage 事件。使用属性或 setItem() 设置值、使用 delete 或 removeItem() 删除值，以及每次调用 clear() 时都会触发这个事件。这个事件的事件对象有如下 4 个属性。</p><ul><li>domain：存储变化对应的域。</li><li>key：被设置或删除的键。</li><li>newValue：键被设置的新值，若键被删除则为 null。</li><li>oldValue：键变化之前的值。</li></ul><p>可以使用如下代码监听storage 事件：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;storage&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Storage changed for \${event.domain}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="三者异同" tabindex="-1"><a class="header-anchor" href="#三者异同"><span>三者异同</span></a></h2><h3 id="过期时间" tabindex="-1"><a class="header-anchor" href="#过期时间"><span>过期时间</span></a></h3><ul><li>cookie：可以设置过期时间，没设置默认浏览器关闭后失效</li><li>localStorage：除非手动清除，否则永久保存</li><li>sessionStorage：当前标签页有效，关闭页面或浏览器则会失效</li></ul><blockquote><p>localStorage 和 sessionStorage 也可以通过封装设置过期时间，一旦到达这个时间，则调用 API 清除数据。</p></blockquote><h3 id="存储大小" tabindex="-1"><a class="header-anchor" href="#存储大小"><span>存储大小</span></a></h3><ul><li>cookie：4KB 左右</li><li>localStorage 和 sessionStorage：5MB 字符串的长度 或 10MB 字节数</li></ul><h3 id="http-请求是否携带" tabindex="-1"><a class="header-anchor" href="#http-请求是否携带"><span>http 请求是否携带</span></a></h3><ul><li>cookie：请求时会被 http 头部自动携带，如果数据过多会影响性能</li><li>localStorage 和 sessionStorage：不参与服务器通信</li></ul>`,32)]))}const p=s(o,[["render",i],["__file","0008、WebStorage.html.vue"]]),r=JSON.parse('{"path":"/frontend/basic/html/0008%E3%80%81WebStorage.html","title":"cookie、localStorage 和 sessionStorage","lang":"zh-CN","frontmatter":{"title":"cookie、localStorage 和 sessionStorage","date":"2022-08-02T00:00:00.000Z","category":["HTML"],"tag":["前端存储","HTML5"],"description":"在使用 Vuex、Pinia 等状态管理库的时候，网页刷新会导致所有数据清空。因此需要用到本地存储，前端本地存储的方式有三种：cookie、localStorage 和 sessionStorage。 cookie HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/basic/html/0008%E3%80%81WebStorage.html"}],["meta",{"property":"og:title","content":"cookie、localStorage 和 sessionStorage"}],["meta",{"property":"og:description","content":"在使用 Vuex、Pinia 等状态管理库的时候，网页刷新会导致所有数据清空。因此需要用到本地存储，前端本地存储的方式有三种：cookie、localStorage 和 sessionStorage。 cookie HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"前端存储"}],["meta",{"property":"article:tag","content":"HTML5"}],["meta",{"property":"article:published_time","content":"2022-08-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"cookie、localStorage 和 sessionStorage\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 cookie","slug":"cookie","link":"#cookie","children":[]},{"level":2,"title":"2 Web Storage","slug":"web-storage","link":"#web-storage","children":[{"level":3,"title":"2.1 localStorage","slug":"localstorage","link":"#localstorage","children":[]},{"level":3,"title":"2.2 sessionStorage","slug":"sessionstorage","link":"#sessionstorage","children":[]},{"level":3,"title":"2.3 存储事件","slug":"存储事件","link":"#存储事件","children":[]}]},{"level":2,"title":"3 三者异同","slug":"三者异同","link":"#三者异同","children":[{"level":3,"title":"3.1 过期时间","slug":"过期时间","link":"#过期时间","children":[]},{"level":3,"title":"3.2 存储大小","slug":"存储大小","link":"#存储大小","children":[]},{"level":3,"title":"3.3 http 请求是否携带","slug":"http-请求是否携带","link":"#http-请求是否携带","children":[]}]}],"git":{"createdTime":1677733227000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2},{"name":"Stephen-wzw","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":3.4,"words":1020},"filePathRelative":"frontend/basic/html/0008、WebStorage.md","localizedDate":"2022年8月2日","excerpt":"","autoDesc":true}');export{p as comp,r as data};
