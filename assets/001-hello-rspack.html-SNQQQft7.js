import{_ as r,c as l,e as n,a as e,d as a,b as p,r as o,o as i}from"./app-CMUwc0b2.js";const c={},d={href:"https://github.com/rspack-contrib/rspack-examples/pull/2",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/web-infra-dev/rspack/issues/4745",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/orgs/web-infra-dev/discussions/4",target:"_blank",rel:"noopener noreferrer"};function k(h,t){const s=o("ExternalLinkIcon");return i(),l("div",null,[t[10]||(t[10]=n(`<h2 id="why-rspack" tabindex="-1"><a class="header-anchor" href="#why-rspack"><span>Why Rspack?</span></a></h2><p>面对大型项目，开发和生产环境的构建需要耗费很长时间。</p><p>组内实际项目在生产环境中构建需要接近 30 分钟。</p><p>按照官方说法，Rspack 拥有：</p><ul><li>快速的 Dev 启动性能</li><li>高效的 Build 性能</li><li>灵活的配置</li><li>生产环境的优化能力</li></ul><h2 id="rspack-创建项目" tabindex="-1"><a class="header-anchor" href="#rspack-创建项目"><span>Rspack 创建项目</span></a></h2><p>使用 Rspack CLI：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> create rspack@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>目前支持三种模版：</p><ul><li>react</li><li>react-ts</li><li>vue</li></ul><p>用该命令创建的项目 Rspack 不是最新，因此选择从零开始。 (11 月 29 日 已适配为最新版本。)</p><h2 id="从零开始" tabindex="-1"><a class="header-anchor" href="#从零开始"><span>从零开始</span></a></h2><p>安装相关依赖。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> init
<span class="token function">pnpm</span> <span class="token function">install</span> react react-dom
<span class="token function">pnpm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> typescript @types/react @types/react-dom
<span class="token function">pnpm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> @rspack/cli @rspack/core
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了快速启动项目，直接将所有文件内容复制，然后启动项目，报错：</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240103130024.png" alt="报错" tabindex="0" loading="lazy"><figcaption>报错</figcaption></figure>`,16)),e("p",null,[t[1]||(t[1]=a("从官网中查看 ",-1)),e("a",d,[t[0]||(t[0]=a("迁移示例",-1)),p(s)]),t[2]||(t[2]=a("，并未得到有用信息。复制错误信息 ",-1)),t[3]||(t[3]=e("code",null,"JavaScript parsing error",-1)),t[4]||(t[4]=a(" 搜索 issue。",-1))]),e("p",null,[t[6]||(t[6]=a("在 ",-1)),e("a",u,[t[5]||(t[5]=a("issue 官网示例报错",-1)),p(s)]),t[7]||(t[7]=a(" 中找到解决方法：",-1))]),t[11]||(t[11]=n(`<p>这里按照官方解答无效，查看 <code>rspack-template</code> 最新配置如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
	test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(jsx?|tsx?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
	use<span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">{</span>
			loader<span class="token operator">:</span> <span class="token string">&quot;builtin:swc-loader&quot;</span><span class="token punctuation">,</span>
			options<span class="token operator">:</span> <span class="token punctuation">{</span>
				sourceMap<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
				jsc<span class="token operator">:</span> <span class="token punctuation">{</span>
					parser<span class="token operator">:</span> <span class="token punctuation">{</span>
						syntax<span class="token operator">:</span> <span class="token string">&quot;typescript&quot;</span><span class="token punctuation">,</span>
						tsx<span class="token operator">:</span> <span class="token boolean">true</span>
					<span class="token punctuation">}</span><span class="token punctuation">,</span>
					transform<span class="token operator">:</span> <span class="token punctuation">{</span>
						react<span class="token operator">:</span> <span class="token punctuation">{</span>
							runtime<span class="token operator">:</span> <span class="token string">&quot;automatic&quot;</span><span class="token punctuation">,</span>
							development<span class="token operator">:</span> isDev<span class="token punctuation">,</span>
							refresh<span class="token operator">:</span> isDev
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
				env<span class="token operator">:</span> <span class="token punctuation">{</span>
					targets<span class="token operator">:</span> <span class="token punctuation">[</span>
						<span class="token string">&quot;chrome &gt;= 87&quot;</span><span class="token punctuation">,</span>
						<span class="token string">&quot;edge &gt;= 88&quot;</span><span class="token punctuation">,</span>
						<span class="token string">&quot;firefox &gt;= 78&quot;</span><span class="token punctuation">,</span>
						<span class="token string">&quot;safari &gt;= 14&quot;</span>
					<span class="token punctuation">]</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rspack-vs-webpack" tabindex="-1"><a class="header-anchor" href="#rspack-vs-webpack"><span>Rspack VS Webpack</span></a></h2><p>常见语言与资源模块支持对比如下：</p><table><thead><tr><th>语言/资源</th><th>支持(Rspack/Webpack)</th></tr></thead><tbody><tr><td>CSS</td><td>&quot;style-loader&quot;, &quot;css-loader&quot;</td></tr><tr><td>PostCSS</td><td>&quot;postcss-loader&quot;, &quot;style-loader&quot;, &quot;css-loader&quot;, &quot;postcss-loader&quot;</td></tr><tr><td>Less</td><td>&quot;less-loader&quot;, &quot;style-loader&quot;, &quot;css-loader&quot;, &quot;postcss-loader&quot;, &quot;less-loader&quot;</td></tr><tr><td>Sass</td><td>&quot;sass-loader&quot;, &quot;style-loader&quot;, &quot;css-loader&quot;, &quot;postcss-loader&quot;, &quot;sass-loader&quot;</td></tr><tr><td>图片</td><td>type: &quot;asset&quot;, type: &quot;asset&quot;</td></tr><tr><td>TS</td><td>内置 SWC, &quot;ts-loader&quot; or &quot;babel-loader&quot;</td></tr><tr><td>JSX/TSX</td><td>&quot;babel-loader&quot;, &quot;presets&quot;: [&quot;@babel/preset-react&quot;, &quot;@babel/preset-typescript&quot;]</td></tr></tbody></table><h2 id="阅读-bundler-的设计取舍" tabindex="-1"><a class="header-anchor" href="#阅读-bundler-的设计取舍"><span>阅读 - Bundler 的设计取舍</span></a></h2>`,6)),e("p",null,[t[9]||(t[9]=a("原文地址：",-1)),e("a",b,[t[8]||(t[8]=a("Bundler 的设计取舍",-1)),p(s)])]),t[12]||(t[12]=n('<h3 id="why-we-build-rspack" tabindex="-1"><a class="header-anchor" href="#why-we-build-rspack"><span>Why We Build Rspack</span></a></h3><div class="hint-container info"><p class="hint-container-title">原文</p><p>性能始终是 Webpack 绕不开的话题，虽然我们尝试了各种 Webpack 的优化方式，如 swc-loader、esbuild-loader、thread-loader、cache-loader、MFSU、Persistent Cache 等等。</p><p>但是最终就是这些方案虽然可能缓解一部分的性能问题，面对大型项目仍然捉襟见肘，另一方面这些方案导致构建过程更加黑盒化。</p><p>如 Persistent Cache 依赖业务配置良好的 build dependencies，esbuild-loader 不支持 es5 的降级，cache-loader 忘记清理 cache 导致产物没更新。</p></div><table><thead><tr><th>优化方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>swc-loader</td><td>SWC 是一个用 Rust 编写的超快的 JavaScript/TypeScript 编译器。swc-loader 使 Webpack 可用 SWC 作为编译器，取代 Babel。</td><td>在处理老版本（如 ES5）的 JavaScript 语法兼容性问题时，可能表现不如 Babel.</td></tr><tr><td>esbuild-loader</td><td>esbuild 是一个 JavaScript 打包器和压缩器，速度极快。esbuild-loader 同样替代 Babel，性能提升更大。</td><td>同上</td></tr><tr><td>thread-loader</td><td>thread-loader 允许 Webpack 使用多线程加载和编译，提升构建速度。</td><td>可能会增加硬件资源（如 CPU 和内存）的使用。对于资源受限的环境（如某些 CI/CD 环境或者低端硬件），可能导致构建失败。</td></tr><tr><td>cache-loader</td><td>cache-loader 缓存其他 loader 的执行结果。当源文件没有变化时，Webpack 可以直接使用缓存的结果，避免重复工作。</td><td>忘记清理 cache 导致产物没更新</td></tr><tr><td>MFSU</td><td>对于不常改变的模块，通过 MFSU 可以预编译并复用它们，缩短构建时间。</td><td>如果模块数量较大或模块本身较大，预编译所需的时间可能较长，甚至可能导致构建速度下降而非提升。此外，这种优化可能使得代码的调试更为困难。</td></tr><tr><td>Persistent Cache</td><td>从 Webpack 5 开始，提供了持久化缓存特性。它会在硬盘上保存一些构建信息，对于经常进行的构建任务，来自持久化缓存的信息可使构建速度快很多。</td><td>如果业务的构建依赖项配置不恰当，Persistent Cache 有可能导致产物与预期不一致，使得构建过程更加“黑盒化”。</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">原文</p><p>Rollup 的产物优化能力相比弱了不少，尤其是缺失 Bundle Splitting 等能力导致业务很难做精细的优化，因此内部有不少业务是 dev 下运行 Vite，生产环境用 Webpack，这导致开发和生产存在着较大的差异。</p></div><p>「产物优化能力」通常指的是一种工具在构建后产生的代码中应用优化的能力。这类优化可以包括 代码压缩（移除无用的代码或者空格、注释）、代码拆分（将大的代码块拆分为多个较小的模块，以实现并行加载或延迟加载）、抽取公共的模块（例如将多次使用的库抽取出来，避免重复打包）、树摇（剔除项目中未引用的代码）等等。</p><p>由于 Rollup 设计之初主要为库作者服务，其支持的一些功能可能没有 Webpack 那么强大。比如，Webpack 提供了非常强大的代码分割（code splitting）和长缓存优化（long term caching optimisation）功能，即你提到的 Bundle Splitting 能力。这些功能对于构建大型、复杂的应用程序非常有用。</p><p>Vite 使用 Rollup 作为生产环境构建工具，它非常适合于小型到中型项目，因为它速度快。但当你面对一个大型项目，可能需要用到更高级的优化手段时，Webpack 可能会是更好的选择。</p><h3 id="how-we-build-rspack" tabindex="-1"><a class="header-anchor" href="#how-we-build-rspack"><span>How We Build Rspack</span></a></h3><div class="hint-container info"><p class="hint-container-title">原文</p><p>最终导致转向了 Webpack 架构。</p></div><h4 id="一等公民" tabindex="-1"><a class="header-anchor" href="#一等公民"><span>一等公民</span></a></h4><p>Rollup 则是只有 Javascript 才是一等公民，而 Webpack 5 支持了更多的一等公民模块。</p><h4 id="插件-api-设计" tabindex="-1"><a class="header-anchor" href="#插件-api-设计"><span>插件 API 设计</span></a></h4><p>插件设计对比：</p><table><thead><tr><th>插件机制</th><th>Rollup</th><th>Webpack</th></tr></thead><tbody><tr><td>模块转换 <br> 过滤器（filter）：即过滤哪些模块进行转换。<br>转换器（transformer）: 即对过滤模块进行怎样的转换。<br>模块类型转换（change module type）: 即我们可能需要将一个模块从 A 类型转换成 B 类型。</td><td>三个维度揉进了一个 transform hook 里：<br>- 高频的 callback 通信<br>- 用户灵活性的丧失<br>- 丧失了模块转换逻辑的组合性</td><td>过滤器：rule.test<br>转换器：@svgr/webpack loader<br>类型转换：inlineMatchResource</td></tr><tr><td>AST 复用</td><td>-</td><td>-</td></tr></tbody></table><h3 id="beyond-webpack" tabindex="-1"><a class="header-anchor" href="#beyond-webpack"><span>Beyond Webpack</span></a></h3><p>使用 Rust 来实现一套 Webpack 架构（最好能复用 Webpack 生态的插件/loader）的、同时又通过自定义一些具体实现（例如缓存和 swc）来提升构建效率的工具。</p>',16))])}const v=r(c,[["render",k],["__file","001-hello-rspack.html.vue"]]),g=JSON.parse('{"path":"/frontend/engineering/build-tool/rspack/001-hello-rspack.html","title":"Rspack","lang":"zh-CN","frontmatter":{"title":"Rspack","date":"2023-01-03T00:00:00.000Z","icon":"creative","category":["工程化"],"tag":["项目打包","rspack"],"description":"Why Rspack? 面对大型项目，开发和生产环境的构建需要耗费很长时间。 组内实际项目在生产环境中构建需要接近 30 分钟。 按照官方说法，Rspack 拥有： 快速的 Dev 启动性能 高效的 Build 性能 灵活的配置 生产环境的优化能力 Rspack 创建项目 使用 Rspack CLI： 目前支持三种模版： react react-ts ...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/engineering/build-tool/rspack/001-hello-rspack.html"}],["meta",{"property":"og:title","content":"Rspack"}],["meta",{"property":"og:description","content":"Why Rspack? 面对大型项目，开发和生产环境的构建需要耗费很长时间。 组内实际项目在生产环境中构建需要接近 30 分钟。 按照官方说法，Rspack 拥有： 快速的 Dev 启动性能 高效的 Build 性能 灵活的配置 生产环境的优化能力 Rspack 创建项目 使用 Rspack CLI： 目前支持三种模版： react react-ts ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240103130024.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Rspack"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"项目打包"}],["meta",{"property":"article:tag","content":"rspack"}],["meta",{"property":"article:published_time","content":"2023-01-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rspack\\",\\"image\\":[\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240103130024.png\\"],\\"datePublished\\":\\"2023-01-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 Why Rspack?","slug":"why-rspack","link":"#why-rspack","children":[]},{"level":2,"title":"2 Rspack 创建项目","slug":"rspack-创建项目","link":"#rspack-创建项目","children":[]},{"level":2,"title":"3 从零开始","slug":"从零开始","link":"#从零开始","children":[]},{"level":2,"title":"4 Rspack VS Webpack","slug":"rspack-vs-webpack","link":"#rspack-vs-webpack","children":[]},{"level":2,"title":"5 阅读 - Bundler 的设计取舍","slug":"阅读-bundler-的设计取舍","link":"#阅读-bundler-的设计取舍","children":[{"level":3,"title":"5.1 Why We Build Rspack","slug":"why-we-build-rspack","link":"#why-we-build-rspack","children":[]},{"level":3,"title":"5.2 How We Build Rspack","slug":"how-we-build-rspack","link":"#how-we-build-rspack","children":[{"level":4,"title":"5.2.1 一等公民","slug":"一等公民","link":"#一等公民","children":[]},{"level":4,"title":"5.2.2 插件 API 设计","slug":"插件-api-设计","link":"#插件-api-设计","children":[]}]},{"level":3,"title":"5.3 Beyond Webpack","slug":"beyond-webpack","link":"#beyond-webpack","children":[]}]}],"git":{"createdTime":1704616104000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2}]},"readingTime":{"minutes":5.38,"words":1615},"filePathRelative":"frontend/engineering/build-tool/rspack/001-hello-rspack.md","localizedDate":"2023年1月3日","excerpt":"","autoDesc":true}');export{v as comp,g as data};
