import{_ as o,c as i,e as p,a as s,d as e,b as t,r as l,o as c}from"./app-x8ymDRL-.js";const r={},d={href:"https://stylelint.io/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/ant-design/ant-design/blob/master/package.json",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.npmjs.com/package/lint-staged",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/7136009620979449893#heading-5",target:"_blank",rel:"noopener noreferrer"},m={href:"http://commitizen.github.io/cz-cli/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://commitlint.js.org/#/guides-local-setup",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/7136009620979449893",target:"_blank",rel:"noopener noreferrer"};function h(y,n){const a=l("ExternalLinkIcon");return c(),i("div",null,[n[10]||(n[10]=p(`<h2 id="初始化项目" tabindex="-1"><a class="header-anchor" href="#初始化项目"><span>初始化项目</span></a></h2><p>新建 <code>tyro-ui</code> 项目并初始化。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> tyro-ui <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> tyro-ui
<span class="token function">npm</span> init <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化 <code>git</code> 仓库，添加 <code>.gitignore</code> 文件。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong><code>.gitignore</code></strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>node_modules
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>dumi</code> 建立文档站：</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于会出现 <code>Issues with peer dependencies found</code> 错误，因此需要开启 <code>pnpm peer dependencies auto-install</code>。</p><p>在项目根目录下新建 <code>.npmrc</code> 文件，添加 <code>auto-install-peers = true</code> 内容。</p></div><p>再安装 <code>dumi</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> dumi <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新建配置文件 <strong>.dumirc.ts</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;dumi&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">&#39;tyro-ui&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 更多配置项...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根目录下新建 <code>docs</code> 文件夹，并添加 <code>index.md</code>，输入以下内容：</p><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml"><span class="token key atrule">hero</span><span class="token punctuation">:</span>
  <span class="token key atrule">title</span><span class="token punctuation">:</span> library
  <span class="token key atrule">description</span><span class="token punctuation">:</span> A react library developed with dumi
  <span class="token key atrule">actions</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">text</span><span class="token punctuation">:</span> Hello
      <span class="token key atrule">link</span><span class="token punctuation">:</span> /
    <span class="token punctuation">-</span> <span class="token key atrule">text</span><span class="token punctuation">:</span> World
      <span class="token key atrule">link</span><span class="token punctuation">:</span> /
<span class="token key atrule">features</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> Hello
    <span class="token key atrule">emoji</span><span class="token punctuation">:</span> 💎
    <span class="token key atrule">description</span><span class="token punctuation">:</span> Put hello description here
  <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> World
    <span class="token key atrule">emoji</span><span class="token punctuation">:</span> 🌈
    <span class="token key atrule">description</span><span class="token punctuation">:</span> Put world description here
  <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">&#39;!&#39;</span>
    <span class="token key atrule">emoji</span><span class="token punctuation">:</span> 🚀
    <span class="token key atrule">description</span><span class="token punctuation">:</span> Put <span class="token tag">!</span> description here</span>
<span class="token punctuation">---</span></span>

tyro-ui
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript"><span>TypeScript</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> typescript <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>tsconfig.json</strong></p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;jsx&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;declarationDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lib&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;allowSyntheticDefaultImports&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;resolveJsonModule&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;.dumi/**/*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.dumirc.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;src/**/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="react" tabindex="-1"><a class="header-anchor" href="#react"><span>React</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 开发时依赖，宿主环境一定存在</span>
<span class="token function">pnpm</span> <span class="token function">add</span> react react-dom @types/react @types/react-dom <span class="token parameter variable">-D</span>

<span class="token comment"># 运行时依赖，宿主环境可能不存在</span>
<span class="token comment"># 无法保证宿主环境也使用 typescript，故使用 prop-types 保证 javascript 用户也能得到友好的运行时报错信息</span>
<span class="token function">pnpm</span> <span class="token function">add</span> prop-types
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="demo" tabindex="-1"><a class="header-anchor" href="#demo"><span>demo</span></a></h3><p>在 <code>src/Foo</code> 下新建 <code>index.tsx</code> 和 <code>index.md</code>，分别为：</p><p><strong>src/Foo/index.tsx</strong></p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">type</span> <span class="token class-name"><span class="token constant">FC</span></span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token keyword">const</span> Foo<span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span><span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Foo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>src/Foo/index.md</strong></p><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> Foo</span>

This is an example component.

\`\`\`jsx
import { Foo } from &#39;tyro-ui&#39;;

export default () =&gt; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Foo</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Hello dumi!<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>src</code> 下新建 <code>index.tsx</code>：</p><p><strong>index.tsx</strong></p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> Foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./Foo&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时运行 <code>npm run dev</code> 即可使用组件库文档进行页面调试。</p><h2 id="规范" tabindex="-1"><a class="header-anchor" href="#规范"><span>规范</span></a></h2><h3 id="代码规范" tabindex="-1"><a class="header-anchor" href="#代码规范"><span>代码规范</span></a></h3><h4 id="editorconfig" tabindex="-1"><a class="header-anchor" href="#editorconfig"><span>editorconfig</span></a></h4><p>EditorConfig 有助于跨不同编辑器和 IDE 为处理同一项目的多个开发人员维护一致的编码风格。</p><p>VSCode 需要安装 <code>EditorConfig for VS Code</code> 插件。</p><p><strong><code>.editorconfig</code></strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># http://editorconfig.org</span>

root <span class="token operator">=</span> <span class="token boolean">true</span>

<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token comment"># 表示所有文件适用</span>
charset <span class="token operator">=</span> utf-8 <span class="token comment"># 设置文件字符集为 utf-8</span>
indent_style <span class="token operator">=</span> space <span class="token comment"># 缩进风格（tab | space）</span>
indent_size <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment"># 缩进大小</span>
end_of_line <span class="token operator">=</span> lf <span class="token comment"># 控制换行类型(lf | cr | crlf)</span>
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment"># 去除行首的任意空白字符</span>
insert_final_newline <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment"># 始终在文件末尾插入一个新行</span>

<span class="token punctuation">[</span>*.md<span class="token punctuation">]</span> <span class="token comment"># 表示仅 md 文件适用以下规则</span>
max_line_length <span class="token operator">=</span> off
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint"><span>ESLint</span></a></h4><p>ESLint 是一个Javascript Linter，帮助我们规范代码质量，提高团队开发效率。</p><p>安装 <code>eslint</code> 并新建配置文件 <code>.eslintrc.js</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> eslint <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>module.exports = {<br> env: {<br> &quot;browser&quot;: true,<br> &quot;es2021&quot;: true<br> },<br> extends: [<br> &#39;eslint:recommended&#39;,<br> &#39;plugin:react/recommended&#39;,<br> &#39;plugin:@typescript-eslint/recommended&#39;<br> ],<br> parserOptions: {<br> &quot;ecmaVersion&quot;: &quot;latest&quot;,<br> &quot;sourceType&quot;: &quot;module&quot;<br> },<br> }</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>
如果想要在项目中安装 \`jest\`，则需要在配置文件中的 \`env\` 加上下面这一行：

\`\`\`diff
  env: {
    browser: true,
    es2021: true,
+   jest: true
  },
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想和 <code>prettier</code> 一起使用则需要在 <code>extends</code> 中加入：</p><div class="language-diff line-numbers-mode" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> extends: [
</span><span class="token prefix unchanged"> </span><span class="token line">   &#39;eslint:recommended&#39;,
</span><span class="token prefix unchanged"> </span><span class="token line">   &#39;plugin:react/recommended&#39;,
</span><span class="token prefix unchanged"> </span><span class="token line">   &#39;plugin:@typescript-eslint/recommended&#39;,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   &quot;prettier&quot;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ],
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还需要在项目中安装与 <code>TypeScript</code> 相关的插件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> eslint-plugin-import @typescript-eslint/parser eslint-import-resolver-typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后在 <code>.eslintrc.js</code> 中添加 <code>settings</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;import/resolver&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;typescript&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="prettier" tabindex="-1"><a class="header-anchor" href="#prettier"><span>prettier</span></a></h4><p><code>prettier</code> 是代码格式化工具，和 <code>eslint</code> 不同的是，它只关注代码格式，而不关注语法问题。</p><p>首先安装 <code>prettier</code> 及相关依赖插件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> prettier eslint-config-prettier eslint-plugin-prettier eslint-plugin-react-hooks <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了使用刚才安装的插件，需要对 <code>.eslintrc.js</code> 中的 <code>plugins</code> 进行修改：</p><div class="language-diff line-numbers-mode" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> plugins: [&quot;react&quot;, &quot;@typescript-eslint&quot;]
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> plugins: [&quot;react&quot;, &quot;react-hooks&quot;, &quot;@typescript-eslint&quot;, &quot;prettier&quot;]
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>prettier</code> 基本的配置文件如下：</p><p><strong><code>.prettierrc</code></strong></p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;useTabs&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;tabWidth&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token property">&quot;printWidth&quot;</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
  <span class="token property">&quot;singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;trailingComma&quot;</span><span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>.prettierignore</code></strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/dist/*
.local
.output.js
/node_modules/**

**/*.svg
**/*.sh

/public/*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后可以在 <code>package.json</code> 中配置 <code>scripts</code>：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;lint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint src/**/*.{js,jsx,ts,tsx,json}&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint:fix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint --fix &#39;src/**/*.{js,jsx,ts,tsx,json}&#39;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;format&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier --write &#39;src/**/*.{js,jsx,ts,tsx,css,md,json}&#39; --config ./.prettierrc&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="stylelint" tabindex="-1"><a class="header-anchor" href="#stylelint"><span>StyleLint</span></a></h4><p><code>Stylelint</code> 是一个强大、先进的 CSS 代码检查器（linter），可以帮助你规避 CSS 代码中的错误并保持一致的编码风格。</p>`,67)),s("blockquote",null,[s("p",null,[s("a",d,[n[0]||(n[0]=e("https://stylelint.io/")),t(a)])])]),n[11]||(n[11]=p(`<p>安装依赖</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 如果项目中使用 scss</span>
<span class="token function">pnpm</span> <span class="token function">add</span> stylelint stylelint-config-standard-scss <span class="token parameter variable">-D</span>
<span class="token function">pnpm</span> <span class="token function">add</span> postcss-scss <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件 <code>.stylelintrc.js</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token string">&#39;stylelint-config-standard-scss&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// rule覆盖（根据自己喜好来配置）</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;string-quotes&#39;</span><span class="token operator">:</span> <span class="token string">&#39;single&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;property-no-vendor-prefix&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;declaration-colon-newline-after&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;value-list-comma-newline-after&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;custom-property-pattern&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;color-hex-length&#39;</span><span class="token operator">:</span> <span class="token string">&#39;short&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;color-function-notation&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;alpha-value-notation&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;value-no-vendor-prefix&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;selector-class-pattern&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;function-url-quotes&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;no-missing-end-of-source-newline&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;no-descending-specificity&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;font-family-no-missing-generic-family-keyword&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">overrides</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 若项目中存在scss文件，添加以下配置</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token string">&#39;**/*.scss&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">customSyntax</span><span class="token operator">:</span> <span class="token string">&#39;postcss-scss&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.stylelintignore</code> 忽略校验目录文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/dist/*
/public/*
public/*
node_modules
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-规范" tabindex="-1"><a class="header-anchor" href="#git-规范"><span>Git 规范</span></a></h3><p><code>Git</code> 规范包括：</p><ul><li><code>pre-commit</code>：判断提交的代码是否符合规范</li><li><code>commit-message</code>：判断 <code>commit</code> 信息是否符合规范</li></ul><h4 id="husky" tabindex="-1"><a class="header-anchor" href="#husky"><span>husky</span></a></h4><p><code>husky</code> 可以管理 <code>git</code> 中的 <code>hooks</code>，初始化应该执行如下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> dlx husky-init <span class="token operator">&amp;&amp;</span> <span class="token function">pnpm</span> <span class="token function">install</span> <span class="token comment"># pnpm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>它将设置 <code>husky</code>，修改 <code>package.json</code> 并创建一个你可以编辑的预提交钩子样本。默认情况下，它将在你提交时运行 <code>npm test</code>。</p></div><p>然后修改 <code>pre-commit</code>：</p><div class="language-diff line-numbers-mode" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> npm test
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> npm run lint
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样在每次 <code>git commit</code> 之前，都会首先进行 <code>lint</code> 检查，通过之后才能提交代码。</p><h4 id="lint-staged" tabindex="-1"><a class="header-anchor" href="#lint-staged"><span>lint-staged</span></a></h4><p>然而思考几个问题：</p><ol><li>我们只修改了个别的文件，没有必要检测所有的文件代码格式</li><li>它只能给我们提示出对应的错误，我们还需要手动的进行代码修改</li><li>修改后需要手动 <code>git add .</code></li></ol><p>这时可以使用 <code>lint-staged</code> 解决这个问题，它只会检查在暂存区的代码。</p><p>安装：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> lint-staged <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改 <code>.husky</code> 中的 <code>pre-commit</code>：</p><div class="language-diff line-numbers-mode" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> npm test
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> npx --no-install lint-staged
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>--no-install</code> 强制使用本地模块，不下载远程模块，如果本地不存在该模块，就会报错。</p></div><p>在 <code>package.json</code> 中配置：</p>`,26)),s("blockquote",null,[n[6]||(n[6]=s("p",null,"参考资料",-1)),s("p",null,[s("a",u,[n[1]||(n[1]=e("https://github.com/ant-design/ant-design/blob/master/package.json")),t(a)]),n[4]||(n[4]=s("br",null,null,-1)),s("a",k,[n[2]||(n[2]=e("https://www.npmjs.com/package/lint-staged")),t(a)]),n[5]||(n[5]=s("br",null,null,-1)),s("a",v,[n[3]||(n[3]=e("https://juejin.cn/post/7136009620979449893#heading-5")),t(a)])])]),n[12]||(n[12]=p(`<div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;*.{json,md}&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier --ignore-unknown --write&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;*.{js,jsx,ts,tsx}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;eslint --fix&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;prettier --write&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;{!(package)*.json,*.code-snippets,.!(browserslist)*rc}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;prettier --write--parser json&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;package.json&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;prettier --write&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;*.{scss,less,styl,html}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;stylelint --fix&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;prettier --write&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="commitizen" tabindex="-1"><a class="header-anchor" href="#commitizen"><span>commitizen</span></a></h4><p>在安装完上面两个依赖后，就已经能在 <code>pre-commit</code> 钩子判断<strong>暂存区代码</strong>是否符合规范，并且使用 <code>prettier</code> 修复它。</p><p>第二个问题是我们需要在 <code>commit-message</code> 中判断 <code>commit</code> 信息是否符合规范。可以使用 <code>commitizen</code>，它是一个撰写符合 <code>Commit Message</code> 标准的一款工具。通过它可以实现交互式撰写规范的 <code>Commit Message</code>。</p>`,4)),s("blockquote",null,[s("p",null,[s("a",m,[n[7]||(n[7]=e("http://commitizen.github.io/cz-cli/")),t(a)])])]),n[13]||(n[13]=p(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> commitizen <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后，一般我们都采用符合 Angular 的 <code>Commit message</code> 格式的提交规范，运行以下命令生成符合 Angular 提交规范格式的 <code>Commit message</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx --no-install commitizen init cz-conventional-changelog <span class="token parameter variable">--pnpm</span> --save-dev --save-exact
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>package.json</code> 中会自动生成以下配置：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;commitizen&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./node_modules/cz-conventional-changelog&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>package.json</code> 中的 <code>scripts</code> 添加命令：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token property">&quot;commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;git-cz&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="commitlint" tabindex="-1"><a class="header-anchor" href="#commitlint"><span>commitlint</span></a></h4><p>虽然使用了 <code>commitizen</code> 交互式撰写规范的 <code>Commit Message</code>，但由于它不是强制使用，我们仍然可以通过 <code>git commit</code> 提交信息，因此不管是使用 <code>git commit</code> 或 <code>git cz</code>，我们都需要对 <code>commit message</code> 进行校验，不允许规范的情况下不能进行 <code>commit</code> 操作。</p>`,9)),s("blockquote",null,[s("p",null,[s("a",g,[n[8]||(n[8]=e("https://commitlint.js.org/#/guides-local-setup")),t(a)])])]),n[14]||(n[14]=p(`<p>首先安装相关依赖并且生成相关配置：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># For Windows:</span>
<span class="token function">pnpm</span> <span class="token function">add</span> @commitlint/config-conventional @commitlint/cli <span class="token parameter variable">-D</span>

<span class="token comment"># Configure commitlint to use conventional config</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;module.exports = { ignores: [(commit) =&gt; commit.includes(&#39;init&#39;)], extends: [&#39;@commitlint/config-conventional&#39;] };&quot;</span> <span class="token operator">&gt;</span> commitlint.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>hushy</code> 中自动生成 <code>hook</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> .husky/commit-msg <span class="token string">&quot;npx --no-install commitlint --edit <span class="token variable">$1</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="changelog" tabindex="-1"><a class="header-anchor" href="#changelog"><span>CHANGELOG</span></a></h4><p>CHANGELOG 记录项目所有的 <code>commit</code> 信息并归类版本，可以快速跳转到该条 <code>commit</code> 记录，方便知道项目哪个版本做了哪些功能有哪些 bug 等信息。也方便排查 bug，对于提交记录一目了然，不用一个一个去翻去查。</p>`,6)),s("blockquote",null,[s("p",null,[s("a",b,[n[9]||(n[9]=e("https://juejin.cn/post/7136009620979449893")),t(a)])])]),n[15]||(n[15]=p(`<p>首先安装 <code>standard-version</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> standard-version <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在 <code>package.json</code> 的 <code>scripts</code> 中添加命令：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token property">&quot;standard-version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;standard-version&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 <code>commit type</code> 是 <code>feat</code> 和 <code>fix</code> 的时候执行 <code>npm run standard-version</code>，它会自增版本号。</p><p><code>standard-version</code> 提供自定义配置不同类型对应显示文案，在根目录新建 <code>.versionrc.js</code> 文件：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;feat&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;✨ Features | 新功能&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;fix&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;🐛 Bug Fixes | Bug 修复&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;init&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;🎉 Init | 初始化&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;docs&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;✏️ Documentation | 文档&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;💄 Styles | 风格&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;refactor&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;♻️ Code Refactoring | 代码重构&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;perf&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;⚡ Performance Improvements | 性能优化&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;✅ Tests | 测试&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;revert&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;⏪ Revert | 回退&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;📦‍ Build System | 打包构建&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;chore&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;🚀 Chore | 构建/工程依赖/工具&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ci&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;👷 Continuous Integration | CI 配置&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="质量" tabindex="-1"><a class="header-anchor" href="#质量"><span>质量</span></a></h2><h3 id="jest" tabindex="-1"><a class="header-anchor" href="#jest"><span>jest</span></a></h3><p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> jest <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="构建工具" tabindex="-1"><a class="header-anchor" href="#构建工具"><span>构建工具</span></a></h2><p>使用 <code>webpack</code> 作为构建工具。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> webpack webpack-cli <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,14))])}const q=o(r,[["render",h],["__file","001-init-project.html.vue"]]),x=JSON.parse('{"path":"/project/tyro-ui/001-init-project.html","title":"从零开发组件库（一）：搭建项目","lang":"zh-CN","frontmatter":{"title":"从零开发组件库（一）：搭建项目","date":"2023-01-14T00:00:00.000Z","category":["Project"],"tag":["项目","组件库","React","TypeScript","代码规范","工程化"],"description":"初始化项目 新建 tyro-ui 项目并初始化。 初始化 git 仓库，添加 .gitignore 文件。 .gitignore 使用 dumi 建立文档站： 提示 由于会出现 Issues with peer dependencies found 错误，因此需要开启 pnpm peer dependencies auto-install。 在项目根目...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/project/tyro-ui/001-init-project.html"}],["meta",{"property":"og:title","content":"从零开发组件库（一）：搭建项目"}],["meta",{"property":"og:description","content":"初始化项目 新建 tyro-ui 项目并初始化。 初始化 git 仓库，添加 .gitignore 文件。 .gitignore 使用 dumi 建立文档站： 提示 由于会出现 Issues with peer dependencies found 错误，因此需要开启 pnpm peer dependencies auto-install。 在项目根目..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"项目"}],["meta",{"property":"article:tag","content":"组件库"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:tag","content":"代码规范"}],["meta",{"property":"article:tag","content":"工程化"}],["meta",{"property":"article:published_time","content":"2023-01-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从零开发组件库（一）：搭建项目\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 初始化项目","slug":"初始化项目","link":"#初始化项目","children":[{"level":3,"title":"1.1 TypeScript","slug":"typescript","link":"#typescript","children":[]},{"level":3,"title":"1.2 React","slug":"react","link":"#react","children":[]},{"level":3,"title":"1.3 demo","slug":"demo","link":"#demo","children":[]}]},{"level":2,"title":"2 规范","slug":"规范","link":"#规范","children":[{"level":3,"title":"2.1 代码规范","slug":"代码规范","link":"#代码规范","children":[{"level":4,"title":"2.1.1 editorconfig","slug":"editorconfig","link":"#editorconfig","children":[]},{"level":4,"title":"2.1.2 ESLint","slug":"eslint","link":"#eslint","children":[]},{"level":4,"title":"2.1.3 prettier","slug":"prettier","link":"#prettier","children":[]},{"level":4,"title":"2.1.4 StyleLint","slug":"stylelint","link":"#stylelint","children":[]}]},{"level":3,"title":"2.2 Git 规范","slug":"git-规范","link":"#git-规范","children":[{"level":4,"title":"2.2.1 husky","slug":"husky","link":"#husky","children":[]},{"level":4,"title":"2.2.2 lint-staged","slug":"lint-staged","link":"#lint-staged","children":[]},{"level":4,"title":"2.2.3 commitizen","slug":"commitizen","link":"#commitizen","children":[]},{"level":4,"title":"2.2.4 commitlint","slug":"commitlint","link":"#commitlint","children":[]},{"level":4,"title":"2.2.5 CHANGELOG","slug":"changelog","link":"#changelog","children":[]}]}]},{"level":2,"title":"3 质量","slug":"质量","link":"#质量","children":[{"level":3,"title":"3.1 jest","slug":"jest","link":"#jest","children":[]}]},{"level":2,"title":"4 构建工具","slug":"构建工具","link":"#构建工具","children":[]}],"git":{"createdTime":1688479238000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2}]},"readingTime":{"minutes":7.11,"words":2134},"filePathRelative":"project/tyro-ui/001-init-project.md","localizedDate":"2023年1月14日","excerpt":"","autoDesc":true}');export{q as comp,x as data};
