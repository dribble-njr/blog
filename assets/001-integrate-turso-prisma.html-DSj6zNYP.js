import{_ as r,c as l,a as e,e as t,d as s,b as i,r as p,o}from"./app-DjBUyNfp.js";const d={},c={href:"https://www.prisma.io/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://docs.turso.tech/introduction",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.turso.tech/cli/introduction",target:"_blank",rel:"noopener noreferrer"};function v(b,a){const n=p("ExternalLinkIcon");return o(),l("div",null,[e("p",null,[a[2]||(a[2]=s("在现代应用开发中，数据库和 ORM（对象关系映射）工具的选择对项目的开发效率和数据管理至关重要。")),e("a",c,[a[0]||(a[0]=s("Prisma")),i(n)]),a[3]||(a[3]=s(" 是一款优秀的 ORM，它不仅能为你生成类型安全的数据库查询，还可以通过自动迁移管理数据库模式。而 ")),e("a",u,[a[1]||(a[1]=s("Turso")),i(n)]),a[4]||(a[4]=s(" 是一种基于 libSQL 的托管云数据库，提供了生产环境级别的 SQLite 数据库。本文将介绍如何将 Turso 和 Prisma 结合使用，帮助你快速集成并管理数据库。"))]),a[7]||(a[7]=t(`<h2 id="什么是-turso" tabindex="-1"><a class="header-anchor" href="#什么是-turso"><span>什么是 Turso？</span></a></h2><p>Turso 是由 libSQL 提供的云端托管数据库服务，其核心基于 SQLite，专为生产环境设计。它保持了 SQLite 简单、轻量和快速的特点，同时通过云端托管的方式，让开发者能够在分布式的环境中使用 SQLite，且具有云数据库的优势，例如多点访问、强大性能和易于集成。</p><p>Turso 的特点：</p><ul><li>基于 libSQL：提供了生产级的 SQLite 数据库。</li><li>分布式存储：适用于多区域、多地的应用程序。</li><li>轻量易用：你可以像使用本地 SQLite 数据库一样去使用它。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>重点是能够免费使用。</p></div><h2 id="什么是-prisma" tabindex="-1"><a class="header-anchor" href="#什么是-prisma"><span>什么是 Prisma？</span></a></h2><p>Prisma 是一个现代的 ORM 工具，旨在简化数据库交互。它通过提供类型安全的数据库查询接口，使得开发者能够在使用数据库时避免常见的错误。Prisma 的一些核心功能包括数据库迁移管理、自动生成的查询 API 和直观的数据库模式定义文件（<code>schema.prisma</code>）。</p><p>Prisma 的特点：</p><ul><li>类型安全：Prisma 生成的客户端代码是类型安全的，能在开发阶段捕获错误。</li><li>直观的 Schema 定义：使用 <code>.prisma</code> 文件定义数据库模型。</li><li>数据库迁移：提供了数据库迁移工具，能够自动化管理数据库版本。</li></ul><h2 id="集成-turso-和-prisma" tabindex="-1"><a class="header-anchor" href="#集成-turso-和-prisma"><span>集成 Turso 和 Prisma</span></a></h2><p>接下来将逐步介绍如何将 Turso 和 Prisma 集成在一起。主要的步骤包括安装工具、设置数据库连接、生成模型、进行数据库迁移并应用更改。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>从 Prisma ORM 5.4.2 及更高版本开始，Turso 可获得早期访问支持。</p></div><h3 id="安装-turso-cli-和-prisma-cli" tabindex="-1"><a class="header-anchor" href="#安装-turso-cli-和-prisma-cli"><span>安装 Turso CLI 和 Prisma CLI</span></a></h3><p>首先，我们需要安装 Turso CLI 以便管理和访问 Turso 数据库，并且需要安装 Prisma CLI 以便生成客户端和管理数据库迁移。</p><p>安装 Prisma CLI：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> prisma --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,16)),e("p",null,[e("a",m,[a[5]||(a[5]=s("安装 Turso CLI")),i(n)]),a[6]||(a[6]=s("，以 macOS 为例："))]),a[8]||(a[8]=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> tursodatabase/tap/turso
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后，通过 <code>turso auth login</code> 登录你的 Turso 帐户。</p><h3 id="创建-turso-数据库" tabindex="-1"><a class="header-anchor" href="#创建-turso-数据库"><span>创建 Turso 数据库</span></a></h3><p>使用以下命令创建一个新的 Turso 数据库：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>turso db create my-database
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取数据库 URL：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>turso db show <span class="token parameter variable">--url</span> my-database
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取数据库访问 token：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>turso db tokens create my-database
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="配置-prisma-数据源" tabindex="-1"><a class="header-anchor" href="#配置-prisma-数据源"><span>配置 Prisma 数据源</span></a></h3><p>初始化 Prisma 数据源：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会生成 <code>prisma/schema.prisma</code> 文件及 <code>.env</code> 文件，其中包含 Prisma 数据源定义。</p><p><code>.env</code> 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">TURSO_URL</span><span class="token operator">=</span><span class="token operator">&lt;</span>your-turso-database-url<span class="token operator">&gt;</span>
<span class="token assign-left variable">TURSO_AUTH_TOKEN</span><span class="token operator">=</span><span class="token operator">&lt;</span>your-turso-auth-token<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要启用 <code>driverAdapters</code> 特性：</p><div class="language-prisma line-numbers-mode" data-ext="prisma" data-title="prisma"><pre class="language-prisma"><code>generator client {
  provider        = &quot;prisma-client-js&quot;
  previewFeatures = [&quot;driverAdapters&quot;]
}

datasource db {
  provider = &quot;sqlite&quot;
  url      = &quot;file:./dev.db&quot;
}
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成 Prisma 客户端，它可以让你通过代码与数据库交互。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma generate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="同步数据库" tabindex="-1"><a class="header-anchor" href="#同步数据库"><span>同步数据库</span></a></h3><p>在本地开发环境下，我们首先需要同步数据库。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>若无需同步数据库，可以跳过这一步。</p></div><p>首先登陆到 Turso 数据库：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>turso db shell my-database
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>导出当前数据库 SQL 数据：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>.schema
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后将 SQL 应用到本地数据库：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sqlite3 dev.db <span class="token operator">&lt;</span> schema.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>sqlite3</code> 是 SQLite 数据库的命令行工具，用于创建、管理和查询 SQLite 数据库。它非常轻量，适合嵌入式系统或小型应用的本地数据库操作。你可以通过 <code>sqlite3</code> 工具来执行 SQL 命令、创建数据库、插入数据、查询数据、导入和导出数据库结构等。</p><p>macOS 通常自带 SQLite。</p></div><p>然后将数据库结构拉入 prisma，这将从本地的 <code>dev.db</code> 文件中提取数据库模型，并自动生成 Prisma schema。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma db pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成 Prisma 客户端：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma generate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="迁移数据库" tabindex="-1"><a class="header-anchor" href="#迁移数据库"><span>迁移数据库</span></a></h3><p>由于 Turso 目前不支持直接使用 Prisma 进行模式迁移，所以在本地开发环境下，我们首先使用 SQLite 进行数据库迁移。</p><p>生成迁移文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma migrate dev <span class="token parameter variable">--name</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这条命令做了三件事：</p><ol><li>在 <code>prisma/migrations</code> 目录中为这次迁移创建了一个新的 SQL 迁移文件。</li><li>针对数据库执行 SQL 迁移文件。</li><li>运行 <code>prisma generate</code>（安装 <code>@prisma/client</code> 软件包，并根据你的模型生成定制的 Prisma 客户端 API）。</li></ol><p>推送迁移到远端 turso 数据库：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>turso db shell my-database <span class="token operator">&lt;</span> ./prisma/migrations/20240923125341_init/migration.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数据库操作" tabindex="-1"><a class="header-anchor" href="#数据库操作"><span>数据库操作</span></a></h3><p>为 libSQL 安装 libSQL 数据库客户端和 Prisma ORM 驱动程序适配器：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @libsql/client @prisma/adapter-libsql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更新数据库访问实例：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@prisma/client&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaLibSQL <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@prisma/adapter-libsql&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@libsql/client&#39;</span>

<span class="token keyword">const</span> libsql <span class="token operator">=</span> <span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TURSO_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  authToken<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TURSO_AUTH_TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrismaLibSQL</span><span class="token punctuation">(</span>libsql<span class="token punctuation">)</span>
<span class="token keyword">const</span> prisma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrismaClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span> adapter <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> prisma
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>集成 Turso 和 Prisma 可以让你在分布式云环境中享受 SQLite 的性能优势，同时利用 Prisma 的 ORM 功能管理数据库模型和查询。</p><p>但由于 Turso 目前对 Prisma 的支持有限，你需要手动将迁移文件应用到远程数据库。通过这种方式，你可以将本地开发环境与生产环境有效分离，保持高效的开发流程。</p>`,49))])}const g=r(d,[["render",v],["__file","001-integrate-turso-prisma.html.vue"]]),k=JSON.parse('{"path":"/backend/practice/001-integrate-turso-prisma.html","title":"Turso 集成 Prisma","lang":"zh-CN","frontmatter":{"title":"Turso 集成 Prisma","date":"2024-09-24T00:00:00.000Z","icon":"prisma","category":["practice"],"tag":["backend","orm","cloud database","prisma"],"description":"在现代应用开发中，数据库和 ORM（对象关系映射）工具的选择对项目的开发效率和数据管理至关重要。Prisma 是一款优秀的 ORM，它不仅能为你生成类型安全的数据库查询，还可以通过自动迁移管理数据库模式。而 Turso 是一种基于 libSQL 的托管云数据库，提供了生产环境级别的 SQLite 数据库。本文将介绍如何将 Turso 和 Prisma ...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/backend/practice/001-integrate-turso-prisma.html"}],["meta",{"property":"og:title","content":"Turso 集成 Prisma"}],["meta",{"property":"og:description","content":"在现代应用开发中，数据库和 ORM（对象关系映射）工具的选择对项目的开发效率和数据管理至关重要。Prisma 是一款优秀的 ORM，它不仅能为你生成类型安全的数据库查询，还可以通过自动迁移管理数据库模式。而 Turso 是一种基于 libSQL 的托管云数据库，提供了生产环境级别的 SQLite 数据库。本文将介绍如何将 Turso 和 Prisma ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"backend"}],["meta",{"property":"article:tag","content":"orm"}],["meta",{"property":"article:tag","content":"cloud database"}],["meta",{"property":"article:tag","content":"prisma"}],["meta",{"property":"article:published_time","content":"2024-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Turso 集成 Prisma\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 什么是 Turso？","slug":"什么是-turso","link":"#什么是-turso","children":[]},{"level":2,"title":"2 什么是 Prisma？","slug":"什么是-prisma","link":"#什么是-prisma","children":[]},{"level":2,"title":"3 集成 Turso 和 Prisma","slug":"集成-turso-和-prisma","link":"#集成-turso-和-prisma","children":[{"level":3,"title":"3.1 安装 Turso CLI 和 Prisma CLI","slug":"安装-turso-cli-和-prisma-cli","link":"#安装-turso-cli-和-prisma-cli","children":[]},{"level":3,"title":"3.2 创建 Turso 数据库","slug":"创建-turso-数据库","link":"#创建-turso-数据库","children":[]},{"level":3,"title":"3.3 配置 Prisma 数据源","slug":"配置-prisma-数据源","link":"#配置-prisma-数据源","children":[]},{"level":3,"title":"3.4 同步数据库","slug":"同步数据库","link":"#同步数据库","children":[]},{"level":3,"title":"3.5 迁移数据库","slug":"迁移数据库","link":"#迁移数据库","children":[]},{"level":3,"title":"3.6 数据库操作","slug":"数据库操作","link":"#数据库操作","children":[]}]},{"level":2,"title":"4 结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1727150962000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2}]},"readingTime":{"minutes":4.69,"words":1406},"filePathRelative":"backend/practice/001-integrate-turso-prisma.md","localizedDate":"2024年9月24日","excerpt":"","autoDesc":true}');export{g as comp,k as data};
