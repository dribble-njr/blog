import{_ as s,c as a,e as t,o as e}from"./app-x8ymDRL-.js";const p={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<p>AJAX，即 Asynchronous JavaScript + XML，通过 JavaScript 异步请求服务器 XML 文档（格式不一定是 XML），可以实现在不刷新页面的情况下从服务器获取数据。</p><p>AJAX 最初是通过 XMLHttpRequest 对象实现，但是它的 API 比较难用。随着 Fetch API 的出现，它支持期约（promise）和服务线程（service worker），逐渐代替了 XHR 对象。</p><h2 id="xmlhttprequest-对象" tabindex="-1"><a class="header-anchor" href="#xmlhttprequest-对象"><span>XMLHttpRequest 对象</span></a></h2><h3 id="基本-api" tabindex="-1"><a class="header-anchor" href="#基本-api"><span>基本 API</span></a></h3><p>所有现代浏览器都支持的对象，通过 XMLHttpRequest 构造函数支持 XHR 对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>XHR 对象需要首先调用 <code>open()</code> 方法，这个方法接收3 个参数：请求类型（&quot;get&quot;、&quot;post&quot;等）、请求 URL，以及表示请求是否异步的布尔值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;server.com&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要发送定义好的请求，就需要调用 <code>send()</code> 方法，它接收一个参数，作为请求体发送的数据。如果不需要发送请求体，则必须传 null。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>收到响应后，XHR 对象的以下属性会被填充上数据。</p><ul><li><code>responseText</code>：作为响应体返回的文本；</li><li><code>responseXML</code>：如果响应的内容类型是 &quot;text/xml&quot; 或 &quot;application/xml&quot;，那就是包含响应数据的 XML DOM 文档；</li><li><code>status</code>：响应的 HTTP 状态；</li><li><code>statusText</code>：响应的 HTTP 状态描述。</li></ul><p>同时 XHR 对象还有一个 <code>readyState</code> 属性，表示当前处于请求/响应的哪个阶段：</p><ul><li>0：未初始化（Uninitialized）。尚未调用 <code>open()</code> 方法；</li><li>1：已打开（Open）。已调用 <code>open()</code> 方法，尚未调用 <code>send()</code> 方法；</li><li>2：已发送（Sent）。已调用 <code>send()</code> 方法，尚未收到响应；</li><li>3：接收中（Receiving）。已经收到部分响应；</li><li>4：完成（Complete）。已经收到所有响应，可以使用了；</li></ul><p>每次 <code>readyState</code> 从一个值变成另一个值，都会触发 <code>readystatechange</code> 事件。可以借此机会检查 <code>readyState</code> 的值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，可以使用 <code>setRequestHeader()</code> 方法添加一些头部信息，这个方法接收两个参数：头部字段的名称和值。为保证请求头部被发送，必须在 <code>open()</code> 之后、<code>send()</code> 之前调用。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;server.com&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;MyHeader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;MyValue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现-ajax" tabindex="-1"><a class="header-anchor" href="#实现-ajax"><span>实现 AJAX</span></a></h3><p>使用 XMLHttpRequest 实现 AJAX 的基本步骤如下：</p><ol><li>创建 XHR 对象；</li><li>在这个对象上使用 <code>open()</code> 方法创建 HTTP 请求；</li><li>在发起请求前，可以为这个对象添加一些信息（如请求头）和监听函数；</li><li>当请求的额外信息和监听函数添加完成后，使用 <code>send()</code> 发送请求。</li></ol><p>可以使用 Promise 对 AJAX 请求进行封装。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;server.com&#39;</span>

<span class="token keyword">function</span> <span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 创建 http 请求</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
    <span class="token comment">// 设置状态监听函数</span>
    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 设置请求头信息</span>
    xhr<span class="token punctuation">.</span>responeseType <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>
    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Accept&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 发送请求</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23)]))}const l=s(p,[["render",o],["__file","0012、AJAX.html.vue"]]),u=JSON.parse('{"path":"/frontend/basic/javascript/0012%E3%80%81AJAX.html","title":"AJAX","lang":"zh-CN","frontmatter":{"title":"AJAX","date":"2022-08-12T00:00:00.000Z","category":["JavaScript"],"tag":["网络请求","手写代码"],"description":"AJAX，即 Asynchronous JavaScript + XML，通过 JavaScript 异步请求服务器 XML 文档（格式不一定是 XML），可以实现在不刷新页面的情况下从服务器获取数据。 AJAX 最初是通过 XMLHttpRequest 对象实现，但是它的 API 比较难用。随着 Fetch API 的出现，它支持期约（promise...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/0012%E3%80%81AJAX.html"}],["meta",{"property":"og:title","content":"AJAX"}],["meta",{"property":"og:description","content":"AJAX，即 Asynchronous JavaScript + XML，通过 JavaScript 异步请求服务器 XML 文档（格式不一定是 XML），可以实现在不刷新页面的情况下从服务器获取数据。 AJAX 最初是通过 XMLHttpRequest 对象实现，但是它的 API 比较难用。随着 Fetch API 的出现，它支持期约（promise..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"网络请求"}],["meta",{"property":"article:tag","content":"手写代码"}],["meta",{"property":"article:published_time","content":"2022-08-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AJAX\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 XMLHttpRequest 对象","slug":"xmlhttprequest-对象","link":"#xmlhttprequest-对象","children":[{"level":3,"title":"1.1 基本 API","slug":"基本-api","link":"#基本-api","children":[]},{"level":3,"title":"1.2 实现 AJAX","slug":"实现-ajax","link":"#实现-ajax","children":[]}]}],"git":{"createdTime":1677733227000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2},{"name":"Stephen-wzw","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":2.43,"words":730},"filePathRelative":"frontend/basic/javascript/0012、AJAX.md","localizedDate":"2022年8月12日","excerpt":"","autoDesc":true}');export{l as comp,u as data};
