import{_ as s,c as a,e as t,o as e}from"./app-DjBUyNfp.js";const p={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<p>简单的赋值操作：</p><ul><li>基本数据类型：直接在栈中开辟一块新的内存，存储赋值的数据；</li><li>引用数据类型：会在栈中开辟一块空间，存储赋值的数据对应的堆中的存储地址，源数据和拷贝的新数据对应的是同一块堆空间中的数据。</li></ul><h2 id="浅拷贝与深拷贝的定义" tabindex="-1"><a class="header-anchor" href="#浅拷贝与深拷贝的定义"><span>浅拷贝与深拷贝的定义</span></a></h2><p>浅拷贝是指：堆栈各开辟一块新空间，栈中存储堆中新开辟的空间的地址。堆中赋值了源对象的数据。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是引用类型，那么拷贝的就是它的存储地址。修改其中一个对象会影响另一个对象。</p><p>深拷贝是值：堆栈各开辟一块新空间，栈中存储堆中新开辟的空间的地址。堆中存储的数据和源数据一样，但是二者没有任何联系，修改一个对象不会影响其他对象。</p><h2 id="实现浅拷贝" tabindex="-1"><a class="header-anchor" href="#实现浅拷贝"><span>实现浅拷贝</span></a></h2><h3 id="object-assign" tabindex="-1"><a class="header-anchor" href="#object-assign"><span><code>Object.assign()</code></span></a></h3><p><code>Object.assign()</code> 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。如果目标中有同名对象，则会覆盖前面的属性。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">person</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;kobe&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">41</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">sports</span><span class="token operator">:</span><span class="token string">&#39;basketball&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;wade&quot;</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>sports <span class="token operator">=</span> <span class="token string">&#39;football&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { person: { name: &#39;wade&#39;, age: 41 }, sports: &#39;basketball&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="展开运算符" tabindex="-1"><a class="header-anchor" href="#展开运算符"><span>展开运算符</span></a></h3><p>展开运算符 <code>...</code> 也可以去除对象的可枚举属性，拷贝到当前对象中。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">person</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;kobe&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">41</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">sports</span><span class="token operator">:</span><span class="token string">&#39;basketball&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1 <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;wade&quot;</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>sports <span class="token operator">=</span> <span class="token string">&#39;football&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { person: { name: &#39;wade&#39;, age: 41 }, sports: &#39;basketball&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组浅拷贝" tabindex="-1"><a class="header-anchor" href="#数组浅拷贝"><span>数组浅拷贝</span></a></h3><h4 id="array-prototype-slice" tabindex="-1"><a class="header-anchor" href="#array-prototype-slice"><span><code>Array.prototype.slice()</code></span></a></h4><p>可一个从已有数组中返回选定的元素，不会更改现有数组，接收两个参数，如果都不选，则可以实现一个数组的浅拷贝。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;wang&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;hou&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// [ 1, 2, { name: &#39;hou&#39; } ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="array-prototype-concat" tabindex="-1"><a class="header-anchor" href="#array-prototype-concat"><span><code>Array.prototype.concat()</code></span></a></h4><p>用于合并两个或多个数组，不会更改现有数组，而是返回一个新数组，接受两个参数，如果两个参数都不写，则可以实现一个数组的浅拷贝。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;wang&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
arr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;hou&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// [ 1, 2, { name: &#39;hou&#39; } ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手写浅拷贝" tabindex="-1"><a class="header-anchor" href="#手写浅拷贝"><span>手写浅拷贝</span></a></h3><p>要实现一个浅拷贝，只需创建一个新对象，遍历需要克隆的对象，将其属性赋值到新对象上即可。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 只拷贝对象</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>object <span class="token operator">||</span> <span class="token keyword">typeof</span> object <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  
  <span class="token comment">// 根据 object 类型判断新建一个数组还是对象</span>
  <span class="token keyword">let</span> newObject <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// 遍历 object，将并且判断是 object 的属性才拷贝</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> newObject<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> object<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> newObject
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现深拷贝" tabindex="-1"><a class="header-anchor" href="#实现深拷贝"><span>实现深拷贝</span></a></h2><h3 id="json-parse-json-stringify" tabindex="-1"><a class="header-anchor" href="#json-parse-json-stringify"><span><code>JSON.parse(JSON.stringify())</code></span></a></h3><p>原理是利用 <code>JSON.stringify()</code> 将对象序列化成 JSON 字符串，然后使用 <code>JSON.parse()</code> 反序列化。但是他会将对象中的函数、undefined 和 symbol 都变为 null，而将正则变为空对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr1<span class="token punctuation">)</span>
<span class="token comment">// [ 1, Symbol(), undefined, /./g, [Function (anonymous)] ] [ 1, null, null, {}, null ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手写深拷贝" tabindex="-1"><a class="header-anchor" href="#手写深拷贝"><span>手写深拷贝</span></a></h3><h4 id="乞丐版" tabindex="-1"><a class="header-anchor" href="#乞丐版"><span>乞丐版</span></a></h4><p>在浅拷贝的基础上，判断如果是引用类型，则递归直到属性为原始类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 只拷贝对象</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>object <span class="token operator">||</span> <span class="token keyword">typeof</span> object <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  
  <span class="token comment">// 根据 object 类型判断新建一个数组还是对象</span>
  <span class="token keyword">let</span> newObject <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token comment">// 遍历 object，将并且判断是 object 的属性才拷贝</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果值为引用类型，则继续递归</span>
      newObject<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> object<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> object<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> newObject
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">field1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">field2</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">field3</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">child</span><span class="token operator">:</span> <span class="token string">&quot;child&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">field4</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>
target<span class="token punctuation">.</span>field3<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token string">&quot;parent&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>
<span class="token comment">// {</span>
<span class="token comment">//   field1: 1,</span>
<span class="token comment">//   field2: undefined,</span>
<span class="token comment">//   field3: { child: &#39;child&#39; },</span>
<span class="token comment">//   field4: [ 2, 4, 8 ]</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，已经实现了一个简单的深拷贝。</p><h4 id="循环引用" tabindex="-1"><a class="header-anchor" href="#循环引用"><span>循环引用</span></a></h4><p>但是如果有</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">function</span> deepClone<span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                   ^
RangeError: Maximum call stack size exceeded
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35)]))}const i=s(p,[["render",o],["__file","0014、浅拷贝与深拷贝.html.vue"]]),r=JSON.parse('{"path":"/frontend/basic/javascript/0014%E3%80%81%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D.html","title":"浅拷贝与深拷贝","lang":"zh-CN","frontmatter":{"title":"浅拷贝与深拷贝","date":"2022-08-23T00:00:00.000Z","category":["JavaScript"],"tag":["浅拷贝","深拷贝","手写代码"],"description":"简单的赋值操作： 基本数据类型：直接在栈中开辟一块新的内存，存储赋值的数据； 引用数据类型：会在栈中开辟一块空间，存储赋值的数据对应的堆中的存储地址，源数据和拷贝的新数据对应的是同一块堆空间中的数据。 浅拷贝与深拷贝的定义 浅拷贝是指：堆栈各开辟一块新空间，栈中存储堆中新开辟的空间的地址。堆中赋值了源对象的数据。如果属性是基本类型，拷贝的就是基本类型的...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/0014%E3%80%81%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D.html"}],["meta",{"property":"og:title","content":"浅拷贝与深拷贝"}],["meta",{"property":"og:description","content":"简单的赋值操作： 基本数据类型：直接在栈中开辟一块新的内存，存储赋值的数据； 引用数据类型：会在栈中开辟一块空间，存储赋值的数据对应的堆中的存储地址，源数据和拷贝的新数据对应的是同一块堆空间中的数据。 浅拷贝与深拷贝的定义 浅拷贝是指：堆栈各开辟一块新空间，栈中存储堆中新开辟的空间的地址。堆中赋值了源对象的数据。如果属性是基本类型，拷贝的就是基本类型的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"浅拷贝"}],["meta",{"property":"article:tag","content":"深拷贝"}],["meta",{"property":"article:tag","content":"手写代码"}],["meta",{"property":"article:published_time","content":"2022-08-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浅拷贝与深拷贝\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 浅拷贝与深拷贝的定义","slug":"浅拷贝与深拷贝的定义","link":"#浅拷贝与深拷贝的定义","children":[]},{"level":2,"title":"2 实现浅拷贝","slug":"实现浅拷贝","link":"#实现浅拷贝","children":[{"level":3,"title":"2.1 Object.assign()","slug":"object-assign","link":"#object-assign","children":[]},{"level":3,"title":"2.2 展开运算符","slug":"展开运算符","link":"#展开运算符","children":[]},{"level":3,"title":"2.3 数组浅拷贝","slug":"数组浅拷贝","link":"#数组浅拷贝","children":[{"level":4,"title":"2.3.1 Array.prototype.slice()","slug":"array-prototype-slice","link":"#array-prototype-slice","children":[]},{"level":4,"title":"2.3.2 Array.prototype.concat()","slug":"array-prototype-concat","link":"#array-prototype-concat","children":[]}]},{"level":3,"title":"2.4 手写浅拷贝","slug":"手写浅拷贝","link":"#手写浅拷贝","children":[]}]},{"level":2,"title":"3 实现深拷贝","slug":"实现深拷贝","link":"#实现深拷贝","children":[{"level":3,"title":"3.1 JSON.parse(JSON.stringify())","slug":"json-parse-json-stringify","link":"#json-parse-json-stringify","children":[]},{"level":3,"title":"3.2 手写深拷贝","slug":"手写深拷贝","link":"#手写深拷贝","children":[{"level":4,"title":"3.2.1 乞丐版","slug":"乞丐版","link":"#乞丐版","children":[]},{"level":4,"title":"3.2.2 循环引用","slug":"循环引用","link":"#循环引用","children":[]}]}]}],"git":{"createdTime":1677733227000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2},{"name":"Stephen-wzw","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":3.32,"words":995},"filePathRelative":"frontend/basic/javascript/0014、浅拷贝与深拷贝.md","localizedDate":"2022年8月23日","excerpt":"","autoDesc":true}');export{i as comp,r as data};
