import{_ as d,c as p,e as a,a as e,b as t,d as n,w as o,r as i,o as r}from"./app-HGC3Yy25.js";const u="/blog/assets/image/frontend/basic/css/003/box.png",g="/blog/assets/image/frontend/basic/css/003/normal-box.png",b="/blog/assets/image/frontend/basic/css/003/abnormal-box.png",m={};function h(k,s){const c=i("RouteLink"),l=i("CodeDemo");return r(),p("div",null,[s[6]||(s[6]=a('<h2 id="盒模型" tabindex="-1"><a class="header-anchor" href="#盒模型"><span>盒模型</span></a></h2><p>所有的 HTML 元素都可以看作一个盒子，他由外边距 <code>margin</code>、边框 <code>border</code>、内边距 <code>padding</code>和内容区 <code>content</code> 组成。</p><figure><img src="'+u+'" alt="盒模型" tabindex="0" loading="lazy"><figcaption>盒模型</figcaption></figure><h2 id="标准盒模型和怪异盒模型" tabindex="-1"><a class="header-anchor" href="#标准盒模型和怪异盒模型"><span>标准盒模型和怪异盒模型</span></a></h2>',4)),e("p",null,[s[1]||(s[1]=n("在 ")),t(c,{to:"/frontend/basic/html/003-doctype.html"},{default:o(()=>s[0]||(s[0]=[n("DOCTYPE")])),_:1,__:[0]}),s[2]||(s[2]=n(" 中提到了浏览器的渲染模式，现代的浏览器一般都有两种渲染模式：标准模式和怪异模式。"))]),s[7]||(s[7]=a('<p>他们表现在盒模型中差异：</p><ul><li>标准盒模型：<code>width</code> 和 <code>height</code> 的计算值都不包含 <code>border</code> 和 <code>padding</code>，而只会应用到这个元素的 <code>content</code>。</li></ul><figure><img src="'+g+'" alt="标准盒模型" width="50%" height="50%" tabindex="0" loading="lazy"><figcaption>标准盒模型</figcaption></figure><ul><li>怪异盒模型：<code>width</code> 和 <code>height</code> 属性包括 <code>content</code>、<code>padding</code> 和 <code>border</code>，不算 <code>margin</code>。</li></ul><figure><img src="'+b+`" alt="怪异盒模型" width="50%" height="50%" tabindex="0" loading="lazy"><figcaption>怪异盒模型</figcaption></figure><h2 id="box-sizing" tabindex="-1"><a class="header-anchor" href="#box-sizing"><span>box-sizing</span></a></h2><p>在 CSS 中，可以设置 <code>box-sizing</code> 属性来设置盒子模型。语法如下：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box|border-box|inherit<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>content-box</code>：标准盒模型；</li><li><code>border-box</code>：怪异盒模型；</li><li><code>inherit</code>：规定应从父元素继承 <code>box-sizing</code> 属性的值。</li></ul><p>一般希望将 <code>box-sizing</code> 设置为 <code>border-box</code>，能使我们更容易地设定一个元素的宽高：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="块级盒子和内联盒子" tabindex="-1"><a class="header-anchor" href="#块级盒子和内联盒子"><span>块级盒子和内联盒子</span></a></h2><p>CSS 中的盒子有三种表现形式 —— 块级盒子（block box）、内联盒子（inline box）和行内块盒子（inline-block box）。这两种盒子在文档流中会表现出不一样的行为。</p><p>可以通过对盒子 <code>display</code> 属性的设置，比如 <code>inline</code>、 <code>block</code> 或 <code>inline-block</code>，来控制盒子的外部显示类型。</p><h3 id="块级盒子" tabindex="-1"><a class="header-anchor" href="#块级盒子"><span>块级盒子</span></a></h3><p>一个被定义成块级的（block）盒子会表现出以下行为：</p><ul><li>盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，在绝大数情况下意味着盒子会和父容器一样宽。</li><li>每个盒子都会换行。</li><li><code>width</code> 和 <code>height</code> 属性可以发挥作用。</li><li>内边距（<code>padding</code>）, 外边距（<code>margin</code>）和 边框（<code>border</code>）会将其他元素从当前盒子周围「推开」。</li></ul><p>除非特殊指定，诸如标题 (<code>&lt;h1&gt;</code>等) 和段落 (<code>&lt;p&gt;</code>) 默认情况下都是块级的盒子。</p>`,18)),t(l,{id:"code-demo-106",type:"normal",title:"block",code:"eJyrVsooyc1RslKyyTC2ezp3+vNdy5/PnvR07YQnOxps9IFiMXk2BagSu3ps9AuA4ko6SsnFxUCtGcY6CgUK1TF5CgpJ+UUpqUVWCoYFFQrF+TmZKQpJOYnJ2dYxebVADbUA7osunA=="},{default:o(()=>s[3]||(s[3]=[e("div",{class:"language-html line-numbers-mode","data-ext":"html","data-title":"html"},[e("pre",{class:"language-html"},[e("code",null,[e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),n("h3")]),e("span",{class:"token punctuation"},">")]),n("块级盒子一"),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),n("h3")]),e("span",{class:"token punctuation"},">")]),n(`
`),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),n("p")]),e("span",{class:"token punctuation"},">")]),n("块级盒子二"),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),n("p")]),e("span",{class:"token punctuation"},">")]),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),e("div",{class:"language-css line-numbers-mode","data-ext":"css","data-title":"css"},[e("pre",{class:"language-css"},[e("code",null,[e("span",{class:"token selector"},"h3, p"),n(),e("span",{class:"token punctuation"},"{"),n(`
  `),e("span",{class:"token property"},"border"),e("span",{class:"token punctuation"},":"),n(" 1px solid black"),e("span",{class:"token punctuation"},";"),n(`
`),e("span",{class:"token punctuation"},"}"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),_:1,__:[3]}),s[8]||(s[8]=a('<h3 id="内联盒子" tabindex="-1"><a class="header-anchor" href="#内联盒子"><span>内联盒子</span></a></h3><p>如果一个盒子对外显示为 <code>inline</code>，那么他的行为如下：</p><ul><li>盒子不会产生换行。</li><li><code>width</code> 和 <code>height</code> 属性将不起作用。</li><li>垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 <code>inline</code> 状态的盒子「推开」。</li><li>水平方向的内边距、外边距以及边框会被应用且会把其他处于 <code>inline</code> 状态的盒子「推开」。</li></ul><p>用做链接的 <code>&lt;a&gt;</code> 元素、<code>&lt;span&gt;</code>、<code>&lt;em&gt;</code> 以及 <code>&lt;strong&gt;</code> 都是默认处于 <code>inline</code> 状态的。</p>',4)),t(l,{id:"code-demo-141",type:"normal",title:"inline",code:"eJyrVsooyc1RslKySbR72tb6onHK89mTnq6d8GRHg41+ol1Mnk1qLqrErh4bfaBYTJ6SjlJycTFQa6KOQmquQnVMnoJCUn5RSmqRlYJhQYVCcX5OZopCUk5icrY1SK48M6UkAyhlUFAB5mekZqZnlMAFaoEm1gIAZGo4lQ=="},{default:o(()=>s[4]||(s[4]=[e("div",{class:"language-html line-numbers-mode","data-ext":"html","data-title":"html"},[e("pre",{class:"language-html"},[e("code",null,[e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),n("a")]),e("span",{class:"token punctuation"},">")]),n("内联盒子一"),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),n("a")]),e("span",{class:"token punctuation"},">")]),n(`
`),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),n("em")]),e("span",{class:"token punctuation"},">")]),n("内联盒子二"),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),n("em")]),e("span",{class:"token punctuation"},">")]),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),e("div",{class:"language-css line-numbers-mode","data-ext":"css","data-title":"css"},[e("pre",{class:"language-css"},[e("code",null,[e("span",{class:"token selector"},"a, em"),n(),e("span",{class:"token punctuation"},"{"),n(`
  `),e("span",{class:"token property"},"border"),e("span",{class:"token punctuation"},":"),n(" 1px solid black"),e("span",{class:"token punctuation"},";"),n(`
  `),e("span",{class:"token property"},"width"),e("span",{class:"token punctuation"},":"),n(" 10px"),e("span",{class:"token punctuation"},";"),n(`
  `),e("span",{class:"token property"},"height"),e("span",{class:"token punctuation"},":"),n(" 10px"),e("span",{class:"token punctuation"},";"),n(`
`),e("span",{class:"token punctuation"},"}"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),_:1,__:[4]}),s[9]||(s[9]=a('<h3 id="行内块盒子" tabindex="-1"><a class="header-anchor" href="#行内块盒子"><span>行内块盒子</span></a></h3><p><code>display</code> 有一个特殊的值，它在内联和块之间提供了一个中间状态。这对于以下情况非常有用：您不希望一个项切换到新行，但希望它可以设定宽度和高度，并避免上面看到的重叠。</p><p>一个元素使用 <code>display: inline-block</code>，实现我们需要的块级的部分效果：</p><ul><li>设置 <code>width</code> 和 <code>height</code> 属性会生效。</li><li><code>padding</code>, <code>margin</code>, 以及 <code>border</code> 会推开其他元素。</li></ul><p>但是，它不会跳转到新行，如果显式添加 <code>width</code> 和 <code>height</code> 属性，它只会变得比其内容更大。</p>',5)),t(l,{id:"code-demo-169",type:"normal",title:"inline-blocl",code:"eJyrVsooyc1RslKyyTC2e7Gw52lb69O505/PnvR07YQnOxps9IHCMXk2iRhyu3ps9BOBUko6SsnFxUADMox1FBIVqmPyFBSS8otSUousFAwLKhSK83MyUxSSchKTs61BcimZxQU5iZVWCpl5OZl5qbpJOflQmfLMlJIMoCZTg4IKoEAt0OxaAPlIQHI="},{default:o(()=>s[5]||(s[5]=[e("div",{class:"language-html line-numbers-mode","data-ext":"html","data-title":"html"},[e("pre",{class:"language-html"},[e("code",null,[e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),n("h3")]),e("span",{class:"token punctuation"},">")]),n("行内块盒子一"),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),n("h3")]),e("span",{class:"token punctuation"},">")]),n(`
`),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),n("a")]),e("span",{class:"token punctuation"},">")]),n("行内块盒子二"),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),n("a")]),e("span",{class:"token punctuation"},">")]),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),e("div",{class:"language-css line-numbers-mode","data-ext":"css","data-title":"css"},[e("pre",{class:"language-css"},[e("code",null,[e("span",{class:"token selector"},"h3, a"),n(),e("span",{class:"token punctuation"},"{"),n(`
  `),e("span",{class:"token property"},"border"),e("span",{class:"token punctuation"},":"),n(" 1px solid black"),e("span",{class:"token punctuation"},";"),n(`
  `),e("span",{class:"token property"},"display"),e("span",{class:"token punctuation"},":"),n(" inline-block"),e("span",{class:"token punctuation"},";"),n(`
  `),e("span",{class:"token property"},"width"),e("span",{class:"token punctuation"},":"),n(" 150px"),e("span",{class:"token punctuation"},";"),n(`
`),e("span",{class:"token punctuation"},"}"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),_:1,__:[5]})])}const v=d(m,[["render",h],["__file","003-box-model.html.vue"]]),y=JSON.parse('{"path":"/frontend/basic/css/003-box-model.html","title":"盒模型","lang":"zh-CN","frontmatter":{"title":"盒模型","date":"2022-04-28T00:00:00.000Z","icon":"box","category":["CSS"],"tag":["frontend","css","basic-knowledge"],"description":"盒模型 所有的 HTML 元素都可以看作一个盒子，他由外边距 margin、边框 border、内边距 padding和内容区 content 组成。 盒模型盒模型 标准盒模型和怪异盒模型 在 中提到了浏览器的渲染模式，现代的浏览器一般都有两种渲染模式：标准模式和怪异模式。 他们表现在盒模型中差异： 标准盒模型：width 和 height 的计算值都...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/basic/css/003-box-model.html"}],["meta",{"property":"og:title","content":"盒模型"}],["meta",{"property":"og:description","content":"盒模型 所有的 HTML 元素都可以看作一个盒子，他由外边距 margin、边框 border、内边距 padding和内容区 content 组成。 盒模型盒模型 标准盒模型和怪异盒模型 在 中提到了浏览器的渲染模式，现代的浏览器一般都有两种渲染模式：标准模式和怪异模式。 他们表现在盒模型中差异： 标准盒模型：width 和 height 的计算值都..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://dribble-njr.github.io/blog/blog/assets/image/frontend/basic/css/003/box.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"盒模型"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"frontend"}],["meta",{"property":"article:tag","content":"css"}],["meta",{"property":"article:tag","content":"basic-knowledge"}],["meta",{"property":"article:published_time","content":"2022-04-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"盒模型\\",\\"image\\":[\\"https://dribble-njr.github.io/blog/blog/assets/image/frontend/basic/css/003/box.png\\",\\"https://dribble-njr.github.io/blog/blog/assets/image/frontend/basic/css/003/normal-box.png =50%x50%\\",\\"https://dribble-njr.github.io/blog/blog/assets/image/frontend/basic/css/003/abnormal-box.png =50%x50%\\"],\\"datePublished\\":\\"2022-04-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 盒模型","slug":"盒模型","link":"#盒模型","children":[]},{"level":2,"title":"2 标准盒模型和怪异盒模型","slug":"标准盒模型和怪异盒模型","link":"#标准盒模型和怪异盒模型","children":[]},{"level":2,"title":"3 box-sizing","slug":"box-sizing","link":"#box-sizing","children":[]},{"level":2,"title":"4 块级盒子和内联盒子","slug":"块级盒子和内联盒子","link":"#块级盒子和内联盒子","children":[{"level":3,"title":"4.1 块级盒子","slug":"块级盒子","link":"#块级盒子","children":[]},{"level":3,"title":"4.2 内联盒子","slug":"内联盒子","link":"#内联盒子","children":[]},{"level":3,"title":"4.3 行内块盒子","slug":"行内块盒子","link":"#行内块盒子","children":[]}]}],"git":{"createdTime":1679814347000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":3}]},"readingTime":{"minutes":3.01,"words":903},"filePathRelative":"frontend/basic/css/003-box-model.md","localizedDate":"2022年4月28日","excerpt":"","autoDesc":true}');export{v as comp,y as data};
