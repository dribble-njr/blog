import{_ as s,c as a,e,o as t}from"./app-DeAcFSYJ.js";const o={};function p(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<p><code>ECMAScript</code> 有 8 种基本的数据类型（ 7 种原始类型和 1 种引用类型）。</p><ul><li>原始类型：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code>、<code>BigInt</code>；</li><li>引用类型：<code>Object</code>。</li></ul><p>下面介绍几种判断变量数据类型的几种方法。</p><h2 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof"><span><code>typeof</code></span></a></h2><p>用来返回操作数类型的字符串。语法：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> operand
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是由于 JavaScript 设计的缺陷，<code>typeof</code> 基本上不能得到想要的结果。它只有一个实际应用场景：<strong>检测一个对象是否已经定义或者是否已经赋值</strong>。</p><p>特点：</p><ul><li>对于基本类型，除 <code>null</code> 外，均可以返回正确结果；</li><li>对于引用类型，除 <code>function</code> 外，一律返回 <code>&quot;object&quot;</code>；</li><li>对于 <code>null</code>，返回 <code>&quot;object&quot;</code> 类型；</li><li>对于 <code>function</code>，返回 <code>&quot;function&quot;</code>；</li><li>对于 <code>array</code>, 返回 <code>&quot;object&quot;</code>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token comment">// &quot;object&quot;，得不到想要的值</span>
<span class="token keyword">typeof</span> fn <span class="token comment">// &quot;function&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总之，数组、对象、<code>null</code> 都会返回 <code>object</code>，其他都能判断正确。</p><div class="hint-container tip"><p class="hint-container-title">为什么 \`typeof null\` 返回 \`object\`</p><p>由于 JavaScript 第一个版本中，所有值都存在 32 位单元中，每个单元包含一个小的类型标签以及存储的真实值，<code>object</code> 的类型标签是 <code>000</code>，而 <code>null</code> 的类型标签也是 <code>000</code>，因此使用 <code>typeof</code> 判断 <code>null</code> 会被判定为 <code>object</code>。</p><ul><li><code>000</code>：对象；</li><li><code>001</code>: 整数；</li><li><code>010</code>：浮点数；</li><li><code>100</code>：字符串；</li><li><code>110</code>：布尔。</li></ul></div><h2 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof"><span><code>instanceof</code></span></a></h2><p>用来检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上，返回布尔值。语法：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>object <span class="token keyword">instanceof</span> <span class="token class-name">constructor</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>特点：</p><ul><li>对于 <strong>字面量声明</strong> 的 <code>Number</code>、<code>BigInt</code>、<code>String</code>、<code>Boolean</code>、<code>Symbol</code> 都会返回 <code>false</code>；</li><li><strong>只能正确判断引用数据类型</strong>；</li><li>只要在当前实例的原型链上，检测结果均为 <code>true</code>；</li></ul><p>原理：遍历实例对象的原型链 <code>__proto__</code>，直到找到构造函数的 <code>prototype</code> 属性。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>不同环境对 <code>__proto__</code> 的实现不同，而且 Web 标准已经删除该特性，这里只是为了表示方便，开发中需要使用 <code>Object.getPrototypeOf()</code> 获取原型对象。</p></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myInstanceOf</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在 ES5 中，如果 Object.getPrototypeOf 参数不是一个对象类型</span>
  <span class="token comment">// 将抛出一个TypeError异常。在 ES2015 中，参数会被强制转换为一个 Object。</span>
  <span class="token comment">// 因此需提前判断是否为引用类型</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> left <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>

  <span class="token comment">// right 必须是函数，函数才有 prototype</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> constructor <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;The &quot;constructor&quot; parameter must be a function.&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 获取实例对象的原型</span>
  <span class="token keyword">let</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
    proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="简单实现" tabindex="-1"><a class="header-anchor" href="#简单实现"><span>简单实现</span></a></h2><p>如果只需要准确判断六种基本数据类型，同时又能够准确区分数据类型是 <code>null</code>、<code>array</code>、还是 <code>object</code> 就足够的话，那么我们可以这样实现：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">superTypeof</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">typeof</span> val

  <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res <span class="token operator">=</span> <span class="token string">&#39;null&#39;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res <span class="token operator">=</span> <span class="token string">&#39;array&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-prototype-tostring-call-obj" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring-call-obj"><span><code>Object.prototype.toString.call(obj)</code></span></a></h2><p>当 <code>Array.isArray()</code> 不可用时，有如下的补丁，因此更推荐使用 <code>Object.prototype.toString.call(obj)</code> 检测数据类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Array<span class="token punctuation">.</span><span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[Object Array]&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要判断所有类型，那么可以调用对象原型中的 <code>toString()</code> 方法，<code>Object.prototype.toString.call(obj)</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">_getClass</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;null&#39;</span>
  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28)]))}const i=s(o,[["render",p],["__file","003-judge-type.html.vue"]]),r=JSON.parse('{"path":"/frontend/basic/javascript/003-judge-type.html","title":"判断数据类型","lang":"zh-CN","frontmatter":{"title":"判断数据类型","date":"2022-05-02T00:00:00.000Z","icon":"judge","category":["JavaScript"],"tag":["language basic"],"description":"ECMAScript 有 8 种基本的数据类型（ 7 种原始类型和 1 种引用类型）。 原始类型：Undefined、Null、Boolean、Number、String、Symbol、BigInt； 引用类型：Object。 下面介绍几种判断变量数据类型的几种方法。 typeof 用来返回操作数类型的字符串。语法： 但是由于 JavaScript 设...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/003-judge-type.html"}],["meta",{"property":"og:title","content":"判断数据类型"}],["meta",{"property":"og:description","content":"ECMAScript 有 8 种基本的数据类型（ 7 种原始类型和 1 种引用类型）。 原始类型：Undefined、Null、Boolean、Number、String、Symbol、BigInt； 引用类型：Object。 下面介绍几种判断变量数据类型的几种方法。 typeof 用来返回操作数类型的字符串。语法： 但是由于 JavaScript 设..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"language basic"}],["meta",{"property":"article:published_time","content":"2022-05-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"判断数据类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 typeof","slug":"typeof","link":"#typeof","children":[]},{"level":2,"title":"2 instanceof","slug":"instanceof","link":"#instanceof","children":[]},{"level":2,"title":"3 简单实现","slug":"简单实现","link":"#简单实现","children":[]},{"level":2,"title":"4 Object.prototype.toString.call(obj)","slug":"object-prototype-tostring-call-obj","link":"#object-prototype-tostring-call-obj","children":[]}],"git":{"createdTime":1713108750000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2}]},"readingTime":{"minutes":2.64,"words":792},"filePathRelative":"frontend/basic/javascript/003-judge-type.md","localizedDate":"2022年5月2日","excerpt":"","autoDesc":true}');export{i as comp,r as data};
