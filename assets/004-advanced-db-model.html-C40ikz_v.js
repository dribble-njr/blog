import{_ as t,c as i,e as a,o as l}from"./app-CMUwc0b2.js";const r={};function n(p,e){return l(),i("div",null,e[0]||(e[0]=[a(`<p>数据库建立的过程从设计阶段开始，需要提出并回答存储什么信息，信息元素之间如何关联，假定有什么样的约束，诸如键或者参考的完整性等等。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>思考 ---&gt; 高级设计 ---&gt; 关系数据库模式 ---&gt; 关系 DBMS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有几种用符号表达设计的方法。</p><ul><li>实体-关系图（E-R 图）</li><li>UML（统一建模语言）</li><li>ODL（对象描述语言）</li></ul><h2 id="e-r-模型" tabindex="-1"><a class="header-anchor" href="#e-r-模型"><span>E/R 模型</span></a></h2><p>在「实体-联系（entity-relationship model）」 E/R 模型中，数据的结构使用图形化的方式表达，即「实体-联系图」，用到以下三个主要的元素类型：</p><ol><li>实体集——矩形</li><li>属性——椭圆</li><li>联系——菱形</li></ol><p><strong>实体集</strong></p><p>实体是某种抽象对象，相似实体的集合形成实体集。E/R 模型是静态的概念，所以尽管实体类似对象类，但是不会像类一样具有方法。</p><p>例如，每个电影是一个实体，所有电影的集合构成实体集。</p><p><strong>属性</strong></p><p>属性是实体具有的性质，比如电影集中可能有电影名或时长等属性。</p><p><strong>联系</strong></p><p>联系是两个或多个实体集的连接。比如电影 Movies 和影星 Stars 是两个实体集，那么 Stars-in 就是连接 Movies 和 Stars 的联系。</p><p>E/R 模型允许连接任意数目的实体集。</p><h3 id="实体的三种联系" tabindex="-1"><a class="header-anchor" href="#实体的三种联系"><span>实体的三种联系</span></a></h3><p>包含一对一，一对多，多对多三种。</p><ul><li>如果 A 到 B 是多对一关系，那么画个带箭头的线段指向 B；</li><li>如果是一对一，画两个带箭头的线段；</li><li>如果是多对多，画两个不带箭头的线段。</li></ul><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225223249.png" alt="一对多" tabindex="0" loading="lazy"><figcaption>一对多</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>箭头表示最多一个。</p></div><h3 id="多路联系" tabindex="-1"><a class="header-anchor" href="#多路联系"><span>多路联系</span></a></h3><p>虽然老师可以开设多门课，并且可以教授多名学生，但是对于特定的学生和课程，只有一个老师教授，这就构成了一个三元联系。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225224137.png" alt="三元联系" tabindex="0" loading="lazy"><figcaption>三元联系</figcaption></figure><p>一般只使用二元联系，可以把多元联系转换为二元联系。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225224530.png" alt="二元联系" tabindex="0" loading="lazy"><figcaption>二元联系</figcaption></figure><h3 id="联系中的角色" tabindex="-1"><a class="header-anchor" href="#联系中的角色"><span>联系中的角色</span></a></h3><p>一个实体在联系出现几次，就要用几条线连接。</p><p>下图表示一个课程的先修关系，先修关系出现两个 Course 实体，第一个是先修课程，后一个是后修课程，因此需要用两条线来表示这种关系。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225224001.png" alt="带有角色的联系" tabindex="0" loading="lazy"><figcaption>带有角色的联系</figcaption></figure><h3 id="e-r-模型中的子类" tabindex="-1"><a class="header-anchor" href="#e-r-模型中的子类"><span>E/R 模型中的子类</span></a></h3><p>一个实体集中含有一些实体，这些实体有一些共同的属性，可以把这些实体集合成一个父类，然后再把这些实体分成几个子类。</p><p>用一个三角形和两条线来连接类和子类，与子类有关的属性和联系都连到子类上，而与父类和子类都有关的连到父类上。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225224952.png" alt="子类" tabindex="0" loading="lazy"><figcaption>子类</figcaption></figure><h2 id="从-e-r-图到关系设计" tabindex="-1"><a class="header-anchor" href="#从-e-r-图到关系设计"><span>从 E/R 图到关系设计</span></a></h2><p>E/R 图是一种概念模型，而关系模式是一种逻辑模型。</p><p>设计原则：</p><ul><li>忠实性：实体集和它们的属性应当反映现实</li><li>避免冗余：不要重复存储相同的信息</li><li>简单性：尽量简化模型，除必要，不添加多余的实体集和联系</li><li>选择正确的联系：选择合适的联系类型</li><li>选择正确的元素种类：选择合适的实体集和属性</li></ul><p>具体步骤：</p><ul><li>明确「宏观行为」：数据库是用来做什么的？比如，管理雇员的信息。</li><li>确定「实体集」：对于一系列的行为，确定所管理信息所涉及到的主题范围。这将变成 <code>table</code>，比如，雇用员工，指定具体部门，确定技能等级。</li><li>确定「联系」：分析行为，确定 <code>tables</code> 之间有何种关系。比如，部门与雇员之间存在一种关系。给这种关系命名。</li><li>细化「行为」：从宏观行为开始，现在仔细检查这些行为，看有哪些行为能转为微观行为。比如，管理雇员的信息可细化为： <ul><li>增加新员工</li><li>修改存在员工信息</li><li>删除调走的员工</li></ul></li><li>确定「业务规则」：分析业务规则，确定你要采取哪种。比如，可能有这样一种规则，一个部门有且只能有一个部门领导。这些规则将被设计到数据库的结构中。</li></ul><p>下面举个例子，需求如下： ACME 是一个小公司，在 5 个地方都设有办事处。当前，有 75 名员工。公司准备快速扩大规模，划分了 9 个部门，每个部门都有其领导。为有助于寻求新的员工，人事部门规划了 68 种技能，为将来人事管理作好准备。员工被招进时，每一种技能的专业等级都被确定。</p><h3 id="定义「宏观行为」" tabindex="-1"><a class="header-anchor" href="#定义「宏观行为」"><span>定义「宏观行为」</span></a></h3><p>ACME 公司的一些宏观行为包括：</p><ul><li>招聘员工</li><li>解雇员工</li><li>管理员工个人信息</li><li>管理公司所需的技能信息</li><li>管理哪位员工有哪些技能</li><li>管理部门信息</li><li>管理办事处信息</li></ul><h3 id="确定「实体集」和「联系」" tabindex="-1"><a class="header-anchor" href="#确定「实体集」和「联系」"><span>确定「实体集」和「联系」</span></a></h3><p>可以确定要存放信息的主题领域(表)及其关系，并创建一个基于宏观行为及描述的图表。确定哪些 <code>relationship</code> 是一对多，一对一，及多对多联系。这是一个 E/R 草图，以后会细化。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240226124732.png" alt="确定「实体集」和「联系」" tabindex="0" loading="lazy"><figcaption>确定「实体集」和「联系」</figcaption></figure><h3 id="细化宏观行为" tabindex="-1"><a class="header-anchor" href="#细化宏观行为"><span>细化宏观行为</span></a></h3><p>以下微观行为基于上面宏观行为而形成：</p><ul><li>增加或删除一个员工</li><li>增加或删除一个办事处</li><li>列出一个部门中的所有员工</li><li>增加一项技能</li><li>增加一个员工的一项技能</li><li>确定一个员工的技能</li><li>确定一个员工每项技能的等级</li><li>确定所有拥有相同等级的某项技能的员工</li><li>修改员工的技能等级</li></ul><p>这些微观行为可用来确定需要哪些 <code>table</code> 或 <code>relationship</code>。</p><h3 id="确定业务规则" tabindex="-1"><a class="header-anchor" href="#确定业务规则"><span>确定业务规则</span></a></h3><p>业务规则常用于确定一对多，一对一，及多对多关系。</p><p>相关的业务规则可能有：</p><ul><li>现在有 5 个办事处；最多允许扩展到 10 个</li><li>员工可以改变部门或办事处</li><li>每个部门有一个部门领导</li><li>每个办事处至多有 3 个电话号码</li><li>每个电话号码有一个或多个扩展</li><li>员工被招进时，每一种技能的专业等级都被确定</li><li>每位员工拥有 3 到 20 个技能</li><li>某位员工可能被安排在一个办事处，也可能不安排办事处</li></ul>`,54)]))}const s=t(r,[["render",n],["__file","004-advanced-db-model.html.vue"]]),c=JSON.parse('{"path":"/backend/database/basic/004-advanced-db-model.html","title":"高级数据库模型","lang":"zh-CN","frontmatter":{"title":"高级数据库模型","date":"2024-01-24T00:00:00.000Z","icon":"advanced-model","category":["database"],"tag":["backend","数据库设计理论"],"description":"数据库建立的过程从设计阶段开始，需要提出并回答存储什么信息，信息元素之间如何关联，假定有什么样的约束，诸如键或者参考的完整性等等。 有几种用符号表达设计的方法。 实体-关系图（E-R 图） UML（统一建模语言） ODL（对象描述语言） E/R 模型 在「实体-联系（entity-relationship model）」 E/R 模型中，数据的结构使用...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/backend/database/basic/004-advanced-db-model.html"}],["meta",{"property":"og:title","content":"高级数据库模型"}],["meta",{"property":"og:description","content":"数据库建立的过程从设计阶段开始，需要提出并回答存储什么信息，信息元素之间如何关联，假定有什么样的约束，诸如键或者参考的完整性等等。 有几种用符号表达设计的方法。 实体-关系图（E-R 图） UML（统一建模语言） ODL（对象描述语言） E/R 模型 在「实体-联系（entity-relationship model）」 E/R 模型中，数据的结构使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225223249.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"高级数据库模型"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"backend"}],["meta",{"property":"article:tag","content":"数据库设计理论"}],["meta",{"property":"article:published_time","content":"2024-01-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高级数据库模型\\",\\"image\\":[\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225223249.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225224137.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225224530.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225224001.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240225224952.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240226124732.png\\"],\\"datePublished\\":\\"2024-01-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 E/R 模型","slug":"e-r-模型","link":"#e-r-模型","children":[{"level":3,"title":"1.1 实体的三种联系","slug":"实体的三种联系","link":"#实体的三种联系","children":[]},{"level":3,"title":"1.2 多路联系","slug":"多路联系","link":"#多路联系","children":[]},{"level":3,"title":"1.3 联系中的角色","slug":"联系中的角色","link":"#联系中的角色","children":[]},{"level":3,"title":"1.4 E/R 模型中的子类","slug":"e-r-模型中的子类","link":"#e-r-模型中的子类","children":[]}]},{"level":2,"title":"2 从 E/R 图到关系设计","slug":"从-e-r-图到关系设计","link":"#从-e-r-图到关系设计","children":[{"level":3,"title":"2.1 定义「宏观行为」","slug":"定义「宏观行为」","link":"#定义「宏观行为」","children":[]},{"level":3,"title":"2.2 确定「实体集」和「联系」","slug":"确定「实体集」和「联系」","link":"#确定「实体集」和「联系」","children":[]},{"level":3,"title":"2.3 细化宏观行为","slug":"细化宏观行为","link":"#细化宏观行为","children":[]},{"level":3,"title":"2.4 确定业务规则","slug":"确定业务规则","link":"#确定业务规则","children":[]}]}],"git":{"createdTime":1709023149000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2}]},"readingTime":{"minutes":5.69,"words":1706},"filePathRelative":"backend/database/basic/004-advanced-db-model.md","localizedDate":"2024年1月24日","excerpt":"","autoDesc":true}');export{s as comp,c as data};
