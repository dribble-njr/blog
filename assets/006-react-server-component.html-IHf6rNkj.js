import{_ as p,c as o,e as c,a as s,d as t,b as e,r as l,o as i}from"./app-Bq0FCg7h.js";const u={},r={href:"https://www.freecodecamp.org/news/react-server-components-for-beginners/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://nextjs.org/docs/getting-started/react-essentials#server-components",target:"_blank",rel:"noopener noreferrer"};function d(v,n){const a=l("ExternalLinkIcon");return i(),o("div",null,[n[2]||(n[2]=c(`<p>React Server Component 是一种新的组件类型，它允许 React 应用在后端服务器上运行部分组件逻辑。传统的客户端渲染将渲染和处理放在前端。服务器组件的引入，旨在优化应用性能，减小传输给客户端的数据量，提高加载速度，提升用户体验。</p><p>服务器和客户端组件允许开发人员构建跨越服务器和客户端的应用程序，将客户端应用程序的丰富交互性与传统服务器渲染的更高性能结合起来。</p><h2 id="why-server-components" tabindex="-1"><a class="header-anchor" href="#why-server-components"><span>Why Server Components</span></a></h2><p>注意看下面的例子：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Wrapper</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ComponentA</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ComponentB</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Wrapper</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组件 A 和组件 B 以 <code>children</code> prop 传入 <code>wrapper</code>。每个组件都负责获取自己的数据，任何组件都不会处理自身操作不需要的数据。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">Wrapper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>wrapperData<span class="token punctuation">,</span> setWrapperData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// API call to get data for Wrapper component to function</span>
    <span class="token function">getWrapperData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setWrapperData</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// Only after API response is received, we start rendering</span>
  <span class="token comment">// ComponentA and ComponentB (children props)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>wrapperData<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>wrapperData<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/*-------------------------------------------------- */</span>

<span class="token keyword">const</span> <span class="token function-variable function">ComponentA</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>componentAData<span class="token punctuation">,</span> setComponentAData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">getComponentAData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setComponentAData</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>componentAData<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/*-------------------------------------------------- */</span>

<span class="token keyword">const</span> <span class="token function-variable function">ComponentB</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>componentBData<span class="token punctuation">,</span> setComponentBData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">getComponentBData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setComponentBData</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>componentBData<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设从每个组件发出的 API 调用获得响应所需的时间如下：</p><ul><li><p><code>&lt;Wrapper /&gt;</code> 获取响应所需时间为 1 秒</p></li><li><p><code>&lt;ComponentB /&gt;</code> 获取响应的时间为 2 秒</p></li><li><p><code>&lt;ComponentA /&gt;</code> 获取响应需要 3 秒钟</p></li></ul><p>那么就会出现下述情况：</p><ul><li>1 秒后，用户可以看到 <code>Wrapper</code>。</li><li>2 秒后，组件 B 出现。</li><li>3 秒后，组件 A 出现。但是组件 A 是通过将组件 B 向下推挤而进入视图的。就好像组件 A 是突然冒出来的一样。这样的用户体验并不好。</li></ul><p>另一个问题是，子组件要等到 <code>Wrapper</code> 组件从其所做的 API 调用中获得响应后才会渲染，导致产生瀑布现象。</p><blockquote><p>「瀑布式」通常是指按顺序执行多个提取请求。这意味着，只有在前一个提取请求得到解决或完成后，才会启动后续的提取请求。</p></blockquote><p>在示例中，只有在 <code>Wrapper</code> 组件中获得对 API 调用的响应后，才会渲染其他两个组件。</p><p>如何解决这个问题呢？可以在 App 组件中获取所有数据，然后将必要的数据传递给每个组件。类似这样：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">fetchAllStuffs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Wrapper</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>wrapperData<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ComponentA</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>componentAData<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ComponentB</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>componentBData<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Wrapper</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法没有任何问题。但是，应用程序接口的响应与组件非常耦合。</p><p>例如，如果我们将来移除 ComponentA，我们也希望从 API 响应中移除 componentAData，因为我们不想处理组件不使用的数据。</p><h2 id="the-solution-is-server-components" tabindex="-1"><a class="header-anchor" href="#the-solution-is-server-components"><span>The Solution is Server Components</span></a></h2><p>由于组件从客户端向服务器调用 API，然后等待响应返回，以渲染其他组件，当客户端顺序获取数据时，就会产生瀑布现象。</p><p>假设这些组件都在服务器上，数据获取的速度会比组件在客户端时要快得多。并且由于组件是在服务器上渲染的，可以访问服务器基础设施，这意味着服务器组件不需要获取数据，而是可以直接查询数据库。</p><p>但还存在一个问题：由于在服务器上渲染组件，并不能像普通的 React 组件那样使用钩子（例如 <code>useState</code>、<code>useEffect</code> 等）、<code>Web API</code>（如 <code>localstorage</code>）或事件处理程序（如 <code>onClick</code>）。因此服务器端组件非常适合实时更新或用户交互并不重要的情况。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// Note.js - Server Component</span>

<span class="token keyword">import</span> NoteEditor <span class="token keyword">from</span> <span class="token string">&#39;NoteEditor&#39;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Note</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> note <span class="token punctuation">}</span> <span class="token operator">=</span> props

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>note<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>note<span class="token punctuation">.</span>body<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>客户端组件和服务器组件的区别在于其呈现环境和它们都具有的能力。</p></blockquote><h2 id="do-s-and-dont-s" tabindex="-1"><a class="header-anchor" href="#do-s-and-dont-s"><span>Do&#39;s and Dont&#39;s</span></a></h2><p>可以做的事情：</p><ul><li>对服务器数据源（如数据库、内部服务、文件系统等）使用 <code>async/await</code>。</li><li>渲染其他服务器组件、原生元素（如 <code>div</code>、<code>span</code> 等）或客户端组件（正常的 React 组件）。</li></ul><p>不能做的事：</p><ul><li>不能使用 React 提供的钩子，如 <code>useState</code>、<code>useReducer</code>、<code>useEffect</code> 等，因为服务器组件是在服务器上呈现的。</li><li>不能使用浏览器 API，如本地存储等（但可以在服务器上进行多填充）。</li><li>不能使用任何依赖于浏览器 API 的实用功能（例如：本地存储）或依赖于状态或效果的自定义钩子。</li></ul><h2 id="server-components-vs-client-components" tabindex="-1"><a class="header-anchor" href="#server-components-vs-client-components"><span>Server Components vs Client Components</span></a></h2><p>客户端组件其实就是 React 的常规编写方式，顾名思义，它们是在客户端（即浏览器）上渲染的。</p><blockquote><p>在服务器组件出现之前，所有 React 代码都是在客户端（浏览器）呈现的。因此，为了与在服务器端呈现的服务器组件区分开来，把普通的 React 组件（使用状态、特效、浏览器专用 API 的组件）称为 &quot;客户端组件&quot;。</p></blockquote><p>首先，来看一个服务器组件的示例：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// Note.js - Server Component</span>

<span class="token keyword">import</span> db <span class="token keyword">from</span> <span class="token string">&#39;db&#39;</span>
<span class="token comment">// (A1) We import from NoteEditor.js - a Client Component.</span>
<span class="token keyword">import</span> NoteEditor <span class="token keyword">from</span> <span class="token string">&#39;NoteEditor&#39;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Note</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> isEditing <span class="token punctuation">}</span> <span class="token operator">=</span> props
  <span class="token comment">// (B) Can directly access server data sources during render, e.g. databases</span>
  <span class="token keyword">const</span> note <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>note<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>note<span class="token punctuation">.</span>body<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* (A2) Dynamically render the editor only if necessary */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token punctuation">{</span>isEditing <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NoteEditor</span></span> <span class="token attr-name">note</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>note<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器组件其实就是一个 React 组件，只是你可以在其中使用一些特殊的功能，比如<strong>直接访问数据库</strong>。</p><p>客户端组件代码如下所示，使用 <code>use client</code> 将组件声明为客户端组件。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// NoteEditor.js - Client Component</span>

<span class="token string">&#39;use client&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">NoteEditor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> note <span class="token operator">=</span> props<span class="token punctuation">.</span>note
  <span class="token keyword">const</span> <span class="token punctuation">[</span>title<span class="token punctuation">,</span> setTitle<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>note<span class="token punctuation">.</span>title<span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>body<span class="token punctuation">,</span> setBody<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>note<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">updateTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTitle</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token function-variable function">updateBody</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setBody</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token function-variable function">submit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...save note...</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>submit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>updateTitle<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>body<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>updateBody<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>body<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何在文件顶部声明 <code>&#39;use client&#39;</code> 的组件都被视为客户端组件，如果没有在文件顶部指定，文件中的组件就会被视为服务器组件。</p><p>客户端组件无法直接调用数据库，并且也不能在客户端组件中使用服务器组件。</p><p>但是，可以在一个服务器组件中导入一个客户端组件或服务器组件，服务器组件还能将另一个服务器组件作为子组件传递给客户端组件：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">ServerComponentA</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ClientComponent</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ServerComponentB</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ClientComponent</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器组件为构建利用服务器和客户端的混合应用程序引入了一种新的思维模式。</p><p>React 不再在客户端呈现整个应用程序（例如单页面应用程序），而是可以根据组件的用途灵活选择在哪里呈现组件。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/thinking-in-server-components.avif" alt="Thinking in Server Components" tabindex="0" loading="lazy"><figcaption>Thinking in Server Components</figcaption></figure><p>大部分组件都是非交互式的，可以作为服务器组件在服务器上呈现。对于较小的交互式用户界面，可以使用客户端组件。</p><p><strong>总结：</strong></p><ul><li>可以在服务器组件中导入客户端组件</li><li>不能在客户端组件中导入服务器组件</li><li>可以将服务器组件作为子组件传递给服务器组件内的客户端组件</li></ul><h2 id="the-real-power-of-server-components" tabindex="-1"><a class="header-anchor" href="#the-real-power-of-server-components"><span>The Real Power of Server Components</span></a></h2><p>服务器组件除了渲染静态数据，还有一些其他好处。</p><h3 id="zero-bundle-size-components" tabindex="-1"><a class="header-anchor" href="#zero-bundle-size-components"><span>Zero Bundle Size Components</span></a></h3><p>使用库对开发人员很有帮助，但它会增加程序包的大小，并可能损害应用程序的性能。</p><p>应用程序的许多部分不是交互式的，不需要完全的数据一致性。例如，「详细信息」页面通常显示有关产品、用户或其他实体的信息，不需要根据用户交互进行更新。</p><p>服务器组件允许开发人员在服务器上呈现静态内容。您可以在服务器组件中自由使用第三方软件包，而<strong>不会影响软件包的大小</strong>。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// NOTE: *before* Server Components</span>

<span class="token keyword">import</span> marked <span class="token keyword">from</span> <span class="token string">&#39;marked&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 35.9K (11.2K gzipped)</span>
<span class="token keyword">import</span> sanitizeHtml <span class="token keyword">from</span> <span class="token string">&#39;sanitize-html&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 206K (63.3K gzipped)</span>

<span class="token keyword">function</span> <span class="token function">NoteWithMarkdown</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>text<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">sanitizeHtml</span><span class="token punctuation">(</span><span class="token function">marked</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token comment">/* render */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用服务器组件，就可以在功能中使用完全相同的代码，但避免将其发送到客户端——这样可以节省超过 240K 的代码（未压缩）。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// Server Component === zero bundle size</span>

<span class="token keyword">import</span> marked <span class="token keyword">from</span> <span class="token string">&#39;marked&#39;</span> <span class="token comment">// zero bundle size</span>
<span class="token keyword">import</span> sanitizeHtml <span class="token keyword">from</span> <span class="token string">&#39;sanitize-html&#39;</span> <span class="token comment">// zero bundle size</span>

<span class="token keyword">function</span> <span class="token function">NoteWithMarkdown</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> text <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// same as before</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在服务器组件中使用第三方库，这些库并不会发送给客户端，会<strong>大大减少 JavaScript 包的大小</strong>，只有通过客户端组件在应用程序中使用客户端交互时，才会添加额外的 JavaScript。由于此，<strong>服务器组件会增加初始页面的加载速度</strong>。</p><p>相比之下，客户端组件会把所有库打包，浏览器会将其全部下载并进行解析和执行。</p><h3 id="complete-access-to-the-backend" tabindex="-1"><a class="header-anchor" href="#complete-access-to-the-backend"><span>Complete access to the backend</span></a></h3><p>服务器组件还可以直接访问后台，使用数据库、内部（微）服务和其他后台资源。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> db <span class="token keyword">from</span> <span class="token string">&#39;db&#39;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Note</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> id <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> note <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>notes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NoteWithMarkdown</span></span> <span class="token attr-name">note</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>note<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，可以直接在服务器组件中读取数据库数据，而不需要通过任何 <code>fetch</code> API 获取资源。</p><p>服务器组件还能直接访问文件系统，直接使用 <code>fs</code> 模块读取服务器上的文件。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Note</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> id <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> note <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NoteWithMarkdown</span></span> <span class="token attr-name">note</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>note<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="automatic-code-splitting" tabindex="-1"><a class="header-anchor" href="#automatic-code-splitting"><span>Automatic Code Splitting</span></a></h3><p>服务器组件会将所有客户端组件的导入视为潜在的代码分割点。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// PhotoRenderer.js - Server Component</span>

<span class="token comment">// one of these will start loading *once rendered and streamed to the client*:</span>
<span class="token keyword">import</span> OldPhotoRenderer <span class="token keyword">from</span> <span class="token string">&#39;./OldPhotoRenderer.js&#39;</span>
<span class="token keyword">import</span> NewPhotoRenderer <span class="token keyword">from</span> <span class="token string">&#39;./NewPhotoRenderer.js&#39;</span>

<span class="token keyword">function</span> <span class="token function">Photo</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Switch on feature flags, logged in/out, type of content, etc:</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>FeatureFlags<span class="token punctuation">.</span>useNewPhotoRenderer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NewPhotoRenderer</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">OldPhotoRenderer</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，有两个客户端组件 <code>NewPhotoRenderer</code> 和 <code>OldPhotoRenderer</code>，它们都是根据条件渲染。</p><p>假设条件为 <code>true</code>，那么用户将看到的组件就是 <code>NewPhotoRenderer</code>。只有该组件会被发送到客户端，而 <code>OldPhotoRenderer</code> 不会立即发送到客户端。因此，只有与用户可见组件相关的 JavaScript 代码会被需要。</p><h3 id="no-more-waterfalls" tabindex="-1"><a class="header-anchor" href="#no-more-waterfalls"><span>No more waterfalls</span></a></h3><p>顺序数据获取会带来瀑布现象，必须等待一个请求完成，避免客户端到服务器的顺序往返延迟。</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// Note.js - Server Component</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Note</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// NOTE: loads *during* render, w low-latency data access on the server</span>
  <span class="token keyword">const</span> note <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>notes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>note <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// handle missing note</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token comment">/* render note here... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器组件不再需要客户端到服务器的获取调用，而是将这一逻辑迁移至服务器。并且，还可以将数据获取转移到服务器上（直接访问后台资源）。这些操作可以减少请求延迟并提高性能。</p><h2 id="the-disadvantages-of-server-components" tabindex="-1"><a class="header-anchor" href="#the-disadvantages-of-server-components"><span>The Disadvantages of Server Components</span></a></h2><p>服务器组件可以大大提升应用程序的性能，但是还有一些弊端：</p><ul><li><p>服务器压力增加：将一部分渲染操作放在服务器上进行，需要服务器具有足够的资源和性能。</p></li><li><p>增加应用开发复杂度：将渲染逻辑分散在服务器和客户端，可能会增加代码维护的复杂度。</p></li><li><p>分布式渲染：由于渲染工作在客户端和服务器端同时进行，应用整体架构更加复杂，可能需要更高的开发经验和水平。</p></li></ul><h2 id="server-components-vs-ssr" tabindex="-1"><a class="header-anchor" href="#server-components-vs-ssr"><span>Server Components vs SSR</span></a></h2><p>服务器组件并不是传统意义上的服务端渲染，虽然它们都在服务器端进行组件渲染，但是它们之间有一些关键区别。</p><p>服务器端渲染将整个页面的组件在服务器端生成并渲染，生成完整的 HTML，然后将这些 HTML 发送到客户端。客户端再对这些内容进行加载、展示和处理。SSR 可以提高首屏渲染的速度，对 SEO 有很好的支持。但是，SSR 生成的页面仍然需要在浏览器端执行与数据解析和交互相关的 JavaScript 代码。</p><blockquote><p>虽然首屏展示的速度快了，但是不可交互，所以他的 <code>tti</code>（页面可交互时间）并没有太大的优化。</p></blockquote><p>而 React Server Component 是在服务器端只渲染部分组件，将不涉及到交互操作的组件在服务器端生成，从而减轻客户端的计算负担。它提供一种更细粒度的控制方式，可以同时利用客户端渲染和服务器渲染的优势。同时，React Server Component 的数据获取和处理也发生在服务器端，进一步降低加载时间。</p><p>综合来说，React Server Component 是一种新的服务器端组件渲染策略，与传统的 SSR 有一定差别，更加注重细粒度的性能优化和资源利用。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,83)),s("ol",null,[s("li",null,[s("a",r,[n[0]||(n[0]=t("How to Use React Server Components – A Beginner's Guide")),e(a)])]),s("li",null,[s("a",k,[n[1]||(n[1]=t("Server Components")),e(a)])])])])}const g=p(u,[["render",d],["__file","006-react-server-component.html.vue"]]),b=JSON.parse(`{"path":"/frontend/engineering/ssr/006-react-server-component.html","title":"React Server Component","lang":"zh-CN","frontmatter":{"title":"React Server Component","date":"2024-01-03T00:00:00.000Z","icon":"STARTUP","category":["工程化"],"tag":["frontend","SSR","next.js"],"description":"React Server Component 是一种新的组件类型，它允许 React 应用在后端服务器上运行部分组件逻辑。传统的客户端渲染将渲染和处理放在前端。服务器组件的引入，旨在优化应用性能，减小传输给客户端的数据量，提高加载速度，提升用户体验。 服务器和客户端组件允许开发人员构建跨越服务器和客户端的应用程序，将客户端应用程序的丰富交互性与传统服务...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/engineering/ssr/006-react-server-component.html"}],["meta",{"property":"og:title","content":"React Server Component"}],["meta",{"property":"og:description","content":"React Server Component 是一种新的组件类型，它允许 React 应用在后端服务器上运行部分组件逻辑。传统的客户端渲染将渲染和处理放在前端。服务器组件的引入，旨在优化应用性能，减小传输给客户端的数据量，提高加载速度，提升用户体验。 服务器和客户端组件允许开发人员构建跨越服务器和客户端的应用程序，将客户端应用程序的丰富交互性与传统服务..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/thinking-in-server-components.avif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"React Server Component"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"frontend"}],["meta",{"property":"article:tag","content":"SSR"}],["meta",{"property":"article:tag","content":"next.js"}],["meta",{"property":"article:published_time","content":"2024-01-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React Server Component\\",\\"image\\":[\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/thinking-in-server-components.avif\\"],\\"datePublished\\":\\"2024-01-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 Why Server Components","slug":"why-server-components","link":"#why-server-components","children":[]},{"level":2,"title":"2 The Solution is Server Components","slug":"the-solution-is-server-components","link":"#the-solution-is-server-components","children":[]},{"level":2,"title":"3 Do's and Dont's","slug":"do-s-and-dont-s","link":"#do-s-and-dont-s","children":[]},{"level":2,"title":"4 Server Components vs Client Components","slug":"server-components-vs-client-components","link":"#server-components-vs-client-components","children":[]},{"level":2,"title":"5 The Real Power of Server Components","slug":"the-real-power-of-server-components","link":"#the-real-power-of-server-components","children":[{"level":3,"title":"5.1 Zero Bundle Size Components","slug":"zero-bundle-size-components","link":"#zero-bundle-size-components","children":[]},{"level":3,"title":"5.2 Complete access to the backend","slug":"complete-access-to-the-backend","link":"#complete-access-to-the-backend","children":[]},{"level":3,"title":"5.3 Automatic Code Splitting","slug":"automatic-code-splitting","link":"#automatic-code-splitting","children":[]},{"level":3,"title":"5.4 No more waterfalls","slug":"no-more-waterfalls","link":"#no-more-waterfalls","children":[]}]},{"level":2,"title":"6 The Disadvantages of Server Components","slug":"the-disadvantages-of-server-components","link":"#the-disadvantages-of-server-components","children":[]},{"level":2,"title":"7 Server Components vs SSR","slug":"server-components-vs-ssr","link":"#server-components-vs-ssr","children":[]},{"level":2,"title":"8 参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1704616104000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2}]},"readingTime":{"minutes":10.98,"words":3295},"filePathRelative":"frontend/engineering/ssr/006-react-server-component.md","localizedDate":"2024年1月3日","excerpt":"","autoDesc":true}`);export{g as comp,b as data};
