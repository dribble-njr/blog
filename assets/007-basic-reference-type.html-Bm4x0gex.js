import{_ as l,c as i,e,a as s,d as a,b as t,w as u,r as p,o as d}from"./app-HGC3Yy25.js";const r={},k={class:"hint-container tip"},m={href:"https://juejin.cn/post/7063118893115670536",target:"_blank",rel:"noopener noreferrer"},v={class:"hint-container tip"},g={class:"hint-container tip"},b={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String",target:"_blank",rel:"noopener noreferrer"};function h(f,n){const o=p("ExternalLinkIcon"),c=p("RouteLink");return d(),i("div",null,[n[17]||(n[17]=e(`<p>引用值（或者对象）是某个特定 <strong>引用类型</strong> 的实例。</p><p>新对象通过使用 <code>new</code> 操作符后跟一个构造函数（constructor）来创建。构造函数就是用来创建新对象的函数，比如下面这行代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这行代码创建了引用类型 <code>Date</code> 的一个新实例，并将它保存在变量 <code>now</code> 中。<code>Date()</code> 在这里就是构造函数，它负责创建一个只有默认属性和方法的简单对象。</p><p>ECMAScript 提供了很多像 <code>Date</code> 这样的原生引用类型，帮助开发者实现常见的任务。</p><h2 id="date" tabindex="-1"><a class="header-anchor" href="#date"><span><code>Date</code></span></a></h2><p><code>Date</code> 类型将日期保存为自协调世界时（UTC，Universal Time Coordinated）时间 1970 年 1 月 1 日午夜（零时）至今所经过的毫秒数。</p><p>要创建日期对象，就使用 <code>new</code> 操作符来调用 <code>Date</code> 构造函数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在不给 <code>Date</code> 构造函数传参数的情况下，创建的对象将保存当前日期和时间。要基于其他日期和时间创建日期对象，必须传入其毫秒表示（UNIX 纪元 1970 年 1 月 1 日午夜之后的毫秒数）。</p><p>为了得到这个时间，可以使用两个辅助函数：</p><ul><li><code>Date.parse()</code></li><li><code>Date.UTC()</code></li></ul><h3 id="date-parse-和-date-utc" tabindex="-1"><a class="header-anchor" href="#date-parse-和-date-utc"><span><code>Date.parse()</code> 和 <code>Date.UTC()</code></span></a></h3><h4 id="date-parse" tabindex="-1"><a class="header-anchor" href="#date-parse"><span><code>Date.parse()</code></span></a></h4><p><code>Date.parse()</code> 方法接收一个表示日期的字符串参数，尝试将这个字符串转换为表示该日期的毫秒数（本地时间）。</p><p>支持下列日期格式：</p><ul><li>「月/日/年」，如 <code>&quot;5/23/2019&quot;</code>；</li><li>「月名 日, 年」，如 <code>&quot;May 23, 2019&quot;</code>；</li><li>「周几 月名 日 年 时:分:秒 时区」，如 <code>&quot;Tue May 23 2019 00:00:00 GMT-0700&quot;</code>；</li><li>ISO 8601 扩展格式「YYYY-MM-DDTHH:mm:ss.sssZ」，如 <code>&quot;2019-05-23T00:00:00&quot;</code>（只适用于兼容 ES5 的实现）。</li></ul><p>如果传给 <code>Date.parse()</code> 的字符串并不表示日期，则该方法会返回 <code>NaN</code>。</p><p>如果直接把表示日期的字符串传给 <code>Date</code> 构造函数，那么 <code>Date</code> 会在后台调用 <code>Date.parse()</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> someDate1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;May 23, 2019&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> someDate2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;May 23, 2019&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两行代码得到的日期对象相同。</p><h4 id="date-utc" tabindex="-1"><a class="header-anchor" href="#date-utc"><span><code>Date.UTC()</code></span></a></h4><p><code>Date.UTC()</code> 方法也返回日期的毫秒表示（UTC 时间），参数是「年、零起点月数（1 月是 0，2 月是 1，以此类推）、日（1 ~ 31）、时（0 ~ 23）、分、秒和毫秒」。</p><p>这些参数中，只有前两个（年和月）是必需的。如果不提供日，那么默认为 1 日。其他参数的默认值都是 0。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// GMT 时间 2000 年 1 月 1 日零点</span>
<span class="token keyword">let</span> y2k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2000-01-01T00:00:00.000Z</span>
<span class="token comment">// GMT 时间 2005 年 5 月 5 日下午 5 点 55 分 55 秒</span>
<span class="token keyword">let</span> allFives <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2005-05-05T17:55:55.000Z</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 <code>Date.parse()</code> 一样，<code>Date.UTC()</code> 也会被 <code>Date</code> 构造函数隐式调用，但有一个区别：这种情况下创建的是本地日期，不是 <code>GMT</code> 日期。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 本地时间（北京）为：UTC + 8，因此会相差 8 * 60 * 60 * 1000 = 28800000</span>
<span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 28800000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,27)),s("div",k,[n[3]||(n[3]=s("p",{class:"hint-container-title"},"JS 中的时间",-1)),s("p",null,[n[1]||(n[1]=a("不同时间概念，详见 ")),s("a",m,[n[0]||(n[0]=a("GMT、UTC、时区、JavaScript Date 总结")),t(o)]),n[2]||(n[2]=a("。"))])]),n[18]||(n[18]=e(`<h4 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h4><p><code>Date.UTC()</code> 日期指的是在没有时区偏差的情况下(将日期转换为 GMT 时间)的日期值。</p><p><code>Date.parse()</code> 方法是基于本地时区建立的，而 <code>Date.UTC()</code> 方法是基于无时区偏差建立的。</p><p>所以如果我们对两个方法传入相同的时间，我们会发现 <code>Date.UTC()</code> 方法得到的毫秒数相对于 <code>Date.parse()</code> 方法得到的毫秒数会多八个小时的毫秒数(这里的本地时区指的是北京时间)。</p><h3 id="继承的方法" tabindex="-1"><a class="header-anchor" href="#继承的方法"><span>继承的方法</span></a></h3><p><code>Date</code> 类型重写了 <code>toLocaleString()</code>、<code>toString()</code> 和 <code>valueOf()</code> 方法。</p><p><code>Date</code> 类型的 <code>toLocaleString()</code> 方法返回与浏览器运行的本地环境一致的日期和时间。</p><p><code>toString()</code> 方法通常返回带时区信息的日期和时间，而时间也是以 24 小时制（0~23）表示的。</p><p><code>valueOf()</code> 方法不返回原始对象，而是返回日期的毫秒数。因此，操作符（如小于号和大于号）可以直接使用它返回的值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 2019 年 1 月 1 日</span>
<span class="token keyword">let</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 2019 年 2 月 1 日</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1 <span class="token operator">&lt;</span> date2<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1 <span class="token operator">&gt;</span> date2<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),s("div",v,[n[11]||(n[11]=s("p",{class:"hint-container-title"},"提示",-1)),s("p",null,[n[5]||(n[5]=a("当需要将对象转换为原始值时（比如在算术运算、逻辑运算、字符串拼接等情况下），会 ")),t(c,{to:"/frontend/basic/javascript/006-toString-toLocalString-valueOf.html#%E8%87%AA%E5%8A%A8%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F"},{default:u(()=>n[4]||(n[4]=[a("自动调用")])),_:1,__:[4]}),n[6]||(n[6]=a(" 对象的 ")),n[7]||(n[7]=s("code",null,"valueOf()",-1)),n[8]||(n[8]=a(" 和 ")),n[9]||(n[9]=s("code",null,"toString()",-1)),n[10]||(n[10]=a(" 方法来获取原始值。"))])]),n[19]||(n[19]=e(`<h3 id="日期格式化方法" tabindex="-1"><a class="header-anchor" href="#日期格式化方法"><span>日期格式化方法</span></a></h3><p><code>Date</code> 类型有几个专门用于格式化日期的方法，它们都会返回字符串：</p><ul><li><code>toDateString()</code> 显示日期中的周几、月、日、年（格式特定于实现）；</li><li><code>toTimeString()</code> 显示日期中的时、分、秒和时区（格式特定于实现）；</li><li><code>toLocaleDateString()</code> 显示日期中的周几、月、日、年（格式特定于实现和地区）；</li><li><code>toLocaleTimeString()</code> 显示日期中的时、分、秒（格式特定于实现和地区）；</li><li><code>toUTCString()</code> 显示完整的 UTC 日期（格式特定于实现）。</li></ul><p>这些方法的输出与 <code>toLocaleString()</code> 和 <code>toString()</code> 一样，会因浏览器而异。因此不能用于在<br> 用户界面上一致地显示日期。</p><h2 id="regexp" tabindex="-1"><a class="header-anchor" href="#regexp"><span><code>RegExp</code></span></a></h2><p>正则表达式（Regular Expression）是一种强大的文本模式匹配工具，用于在字符串中搜索、匹配和替换特定的文本。ECMAScript 通过 <code>RegExp</code> 类型支持正则表达式。</p><p>正则表达式由模式和标记组成：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> expression <span class="token operator">=</span> <span class="token operator">/</span>pattern<span class="token operator">/</span>flags<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>pattern（模式）可以是任何简单或复杂的正则表达式，包括字符类、限定符、分组、向前查找和反向引用。每个正则表达式可以带零个或多个 flags（标记），用于控制正则表达式的行为。</p><p>下面给出了表示匹配模式的标记。</p><ul><li><code>g</code>：全局模式，表示查找字符串的全部内容，而不是找到第一个匹配的内容就结束。</li><li><code>i</code>：不区分大小写，表示在查找匹配时忽略 <code>pattern</code> 和字符串的大小写。</li><li><code>m</code>：多行模式，表示查找到一行文本末尾时会继续查找。</li><li><code>y</code>：粘附模式，表示只查找从 <code>lastIndex</code> 开始及之后的字符串。</li><li><code>u</code>：Unicode 模式，启用 Unicode 匹配。</li><li><code>s</code>：dotAll 模式，表示元字符 <code>.</code> 匹配任何字符（包括 <code>\\n</code> 或 <code>\\r</code>）。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 匹配字符串中的所有&quot;at&quot;</span>
<span class="token keyword">let</span> pattern1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">at</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token comment">// 匹配第一个&quot;bat&quot;或&quot;cat&quot;，忽略大小写</span>
<span class="token keyword">let</span> pattern2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[bc]at</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>
<span class="token comment">// 匹配所有以&quot;at&quot;结尾的三字符组合，忽略大小写</span>
<span class="token keyword">let</span> pattern3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.at</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例属性" tabindex="-1"><a class="header-anchor" href="#实例属性"><span>实例属性</span></a></h3><p>通过实例属性可以全面了解正则表达式的信息，但是在实际开发中使用的并不多，因为从模式中可以直接看出。</p><ul><li><code>lastIndex</code>：表示在源字符串中下一次搜索的开始位置。</li></ul><h3 id="实例方法" tabindex="-1"><a class="header-anchor" href="#实例方法"><span>实例方法</span></a></h3><h4 id="exec" tabindex="-1"><a class="header-anchor" href="#exec"><span><code>exec()</code></span></a></h4><p><code>exec()</code> 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 <code>null</code>。</p><p>返回的数组虽然是 Array 的实例，但包含两个额外的属性：<code>index</code> 和 <code>input</code>。<code>index</code> 是字符串中匹配模式的起始位置，<code>input</code> 是要查找的字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">&#39;table football, foosball&#39;</span>
<span class="token keyword">let</span> array1

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>array1 <span class="token operator">=</span> regex1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Found </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>array1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. Next starts at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>regex1<span class="token punctuation">.</span>lastIndex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token comment">// Expected output: &quot;Found foo. Next starts at 9.&quot;</span>
  <span class="token comment">// Expected output: &quot;Found foo. Next starts at 19.&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">&#39;mom and dad and baby&#39;</span>
<span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">mom( and dad( and baby)?)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span>
<span class="token keyword">let</span> matches <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">.</span>index<span class="token punctuation">)</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">.</span>input<span class="token punctuation">)</span> <span class="token comment">// &quot;mom and dad and baby&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &quot;mom and dad and baby&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &quot; and dad and baby&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &quot; and baby&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="test" tabindex="-1"><a class="header-anchor" href="#test"><span><code>test()</code></span></a></h4><p><code>test()</code> 方法接收一个字符串参数。如果输入的文本与模式匹配，则参数返回 <code>true</code>，否则返回 <code>false</code>。这个方法适用于只想测试模式是否匹配，而不需要实际匹配内容的情况。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">&#39;000-00-0000&#39;</span>
<span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{3}-\\d{2}-\\d{4}</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The pattern was matched.&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承的方法-1" tabindex="-1"><a class="header-anchor" href="#继承的方法-1"><span>继承的方法</span></a></h3><p><code>RegExp</code> 也继承了 <code>Object</code> 上的 <code>valueOf()</code>, <code>toString()</code>, <code>toLocalString()</code> 三个方法。</p><p>无论正则表达式是怎么创建的，<code>toLocaleString()</code> 和 <code>toString()</code> 都返回正则表达式的字面量表示。比如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;\\\\[bc\\\\]at&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gi&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// /\\[bc\\]at/gi</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// /\\[bc\\]at/gi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的模式是通过 <code>RegExp</code> 构造函数创建的，但 <code>toLocaleString()</code> 和 <code>toString()</code> 返回的都是其字面量的形式。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>正则表达式的 <code>valueOf()</code> 方法返回正则表达式本身。</p></div><h2 id="原始值包装类型" tabindex="-1"><a class="header-anchor" href="#原始值包装类型"><span>原始值包装类型</span></a></h2><p>为了方便操作原始值，ECMAScript 提供了 3 种特殊的引用类型：<code>Boolean</code>、<code>Number</code> 和 <code>String</code>。</p><p>每当用到某个原始值的方法或属性时，后台都会创建一个相应原始包装类型的对象，从而暴露出操作原始值的各种方法。来看下面的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">&#39;some text&#39;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当第二行访问 <code>s1</code> 时，是以读模式访问的，也就是要从内存中读取变量保存的值。</p><p>在以读模式访问字符串值的任何时候，后台都会执行以下 3 步：</p><ol><li>创建一个 <code>String</code> 类型的实例；</li><li>调用实例上的特定方法；</li><li>销毁实例。</li></ol><p>相当于下面行为：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;some text&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
s1 <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引用类型与原始值包装类型的主要区别在于对象的生命周期。在通过 <code>new</code> 实例化引用类型后，得到的实例会在离开作用域时被销毁，而自动创建的原始值包装对象则只存在于访问它的那行代码执行期间。</p><p>这意味着不能在运行时给原始值添加属性和方法。比如下面的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">&#39;some text&#39;</span>
s1<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的第二行代码尝试给字符串 <code>s1</code> 添加了一个 <code>color</code> 属性。可是，第三行代码访问 <code>color</code> 属性时，它却不见了。</p><p>原因就是第二行代码运行时会临时创建一个 <code>String</code> 对象，而当第三行代码执行时，这个对象已经被销毁了。实际上，第三行代码在这里创建了自己的 <code>String</code> 对象，但这个对象没有 <code>color</code> 属性。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>上述代码在严格模式下会报错：<code>TypeError: Cannot create property &#39;color&#39; on string &#39;some text&#39;</code>。</p></div><p>另外，<code>Object</code> 构造函数作为一个工厂方法，能够根据传入值的类型返回相应原始值包装类型的实例。比如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token string">&#39;some text&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意，使用 new 调用原始值包装类型的构造函数，与调用同名的转型函数并不一样。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">&#39;25&#39;</span>
<span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// 转型函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> number<span class="token punctuation">)</span> <span class="token comment">// &quot;number&quot;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// 构造函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">)</span> <span class="token comment">// &quot;object&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean"><span><code>Boolean</code></span></a></h3><p><code>Boolean</code> 的实例会重写 <code>valueOf()</code> 方法，返回一个原始值 <code>true</code> 或 <code>false</code>。<code>toString()</code> 方法被调用时也会被覆盖，返回字符串 <code>&quot;true&quot;</code> 或 <code>&quot;false&quot;</code>。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>永远不要显示使用 <code>Boolean</code> 对象。</p></div><h3 id="number" tabindex="-1"><a class="header-anchor" href="#number"><span><code>Number</code></span></a></h3><p>与 <code>Boolean</code> 类型一样，<code>Number</code> 类型重写了 <code>valueOf()</code>、<code>toLocaleString()</code> 和 <code>toString()</code> 方法。<code>valueOf()</code> 方法返回 <code>Number</code> 对象表示的原始数值，另外两个方法返回数值字符串。</p><p><code>toString()</code> 方法可选地接收一个表示基数的参数，并返回相应基数形式的数值字符串，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;10&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;1010&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;12&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;10&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;a&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不建议直接实例化 <code>Number</code> 对象。</p></div><h4 id="tofixed" tabindex="-1"><a class="header-anchor" href="#tofixed"><span><code>toFixed()</code></span></a></h4><p>返回包含指定小数点位数的数值字符串，如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;10.00&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="toexponential" tabindex="-1"><a class="header-anchor" href="#toexponential"><span><code>toExponential()</code></span></a></h4><p>返回以科学记数法（也称为指数记数法）表示的数值字符串。<code>toExponential()</code> 也接收一个参数，表示结果中小数的位数。来看下面的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toExponential</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;1.0e+1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="toprecision" tabindex="-1"><a class="header-anchor" href="#toprecision"><span><code>toPrecision()</code></span></a></h4><p>会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。来看几个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">99</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;1e+2&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;99&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;99.0&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="isinteger" tabindex="-1"><a class="header-anchor" href="#isinteger"><span><code>isInteger()</code></span></a></h4><p>ES6 新增了 <code>Number.isInteger()</code> 方法，用于辨别一个数值是否保存为整数。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1.01</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span><code>String</code></span></a></h3><p>3 个继承的方法 <code>valueOf()</code>、<code>toLocaleString()</code> 和 <code>toString()</code> 都返回对象的原始字符串值。</p>`,70)),s("div",g,[n[16]||(n[16]=s("p",{class:"hint-container-title"},"提示",-1)),s("p",null,[n[13]||(n[13]=s("code",null,"String",-1)),n[14]||(n[14]=a(" 类型方法较多，可以查看 ")),s("a",b,[n[12]||(n[12]=a("MDN String")),t(o)]),n[15]||(n[15]=a("，下面介绍一些常用的。"))])]),n[20]||(n[20]=e(`<h4 id="concat" tabindex="-1"><a class="header-anchor" href="#concat"><span><code>concat()</code></span></a></h4><p>用于将一个或多个字符串拼接成一个新字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> stringValue <span class="token operator">=</span> <span class="token string">&#39;hello &#39;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> stringValue<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// &quot;hello world&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">)</span> <span class="token comment">// &quot;hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然 <code>concat()</code> 方法可以拼接字符串，但更常用的方式是使用加号操作符 <code>+</code>。而且多数情况下，对于拼接多个字符串来说，使用「模版字符串」更方便。</p><h4 id="slice-substring" tabindex="-1"><a class="header-anchor" href="#slice-substring"><span><code>slice()</code>, <code>substring()</code></span></a></h4><p>这两个方法可以从字符串中提取子字符串。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>还有一个方法 <code>substr()</code>，但是已不再推荐使用该特性。</p></div><ul><li><code>slice(start[, end])</code>：返回 <code>[start, end)</code> 之间的元素，若 <code>end</code> 未指定，则默认到末尾所有元素；</li><li><code>substring(start[, end])</code>：返回 <code>[start, end)</code> 之间的元素，若 <code>end</code> 未指定，则默认到末尾所有元素；</li></ul><p>二者在参数都为正数时，效果一致，但是它们对负数的处理不一样，下面看看例子。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 参数为正数</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello world&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;ello world&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;ello&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;ello world&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;ello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对负值的处理如下：</p><ul><li><code>slice(start[, end])</code>：所有负值与字符串长度相加；</li><li><code>substring(start[, end])</code>：所有负值置 0，若 <code>start</code> 大于 <code>end</code>，则会将二者调换。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 参数为负数</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello world&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// str.slice(8) &quot;rld&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// str.slice(3, 7) &quot;lo w&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// str.substring(0) &quot;hello world&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// str.substring(3, 0) -&gt; str.substring(0, 3) &quot;hel&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>为了减少心智负担，给所有参数置为正数即可。</p></div><h4 id="indexof-lastindexof" tabindex="-1"><a class="header-anchor" href="#indexof-lastindexof"><span><code>indexOf()</code>, <code>lastIndexOf()</code></span></a></h4><p>这两个方法从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回 <code>-1</code>）。</p><p>两者的区别在于，<code>indexOf()</code> 方法从字符串开头开始查找子字符串，而 <code>lastIndexOf()</code> 方法从字符串末尾开始查找子字符串。来看下面的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> stringValue <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="startswith-endswith-includes" tabindex="-1"><a class="header-anchor" href="#startswith-endswith-includes"><span><code>startsWith()</code>, <code>endsWith()</code>, <code>includes()</code></span></a></h4><p>这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。它们的区别在于，<code>startsWith()</code> 检查开始于索引 <code>0</code> 的匹配项，<code>endsWith()</code> 检查开始于索引 <code>(string.length - substring.length)</code> 的匹配项，而 <code>includes()</code> 检查整个字符串：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;foo bar baz&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;qux&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21))])}const j=l(r,[["render",h],["__file","007-basic-reference-type.html.vue"]]),w=JSON.parse('{"path":"/frontend/basic/javascript/007-basic-reference-type.html","title":"基本引用类型","lang":"zh-CN","frontmatter":{"title":"基本引用类型","date":"2024-04-17T00:00:00.000Z","icon":"reference","category":["JavaScript"],"tag":["language advanced"],"description":"引用值（或者对象）是某个特定 引用类型 的实例。 新对象通过使用 new 操作符后跟一个构造函数（constructor）来创建。构造函数就是用来创建新对象的函数，比如下面这行代码： 这行代码创建了引用类型 Date 的一个新实例，并将它保存在变量 now 中。Date() 在这里就是构造函数，它负责创建一个只有默认属性和方法的简单对象。 ECMASc...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/007-basic-reference-type.html"}],["meta",{"property":"og:title","content":"基本引用类型"}],["meta",{"property":"og:description","content":"引用值（或者对象）是某个特定 引用类型 的实例。 新对象通过使用 new 操作符后跟一个构造函数（constructor）来创建。构造函数就是用来创建新对象的函数，比如下面这行代码： 这行代码创建了引用类型 Date 的一个新实例，并将它保存在变量 now 中。Date() 在这里就是构造函数，它负责创建一个只有默认属性和方法的简单对象。 ECMASc..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"language advanced"}],["meta",{"property":"article:published_time","content":"2024-04-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基本引用类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 Date","slug":"date","link":"#date","children":[{"level":3,"title":"1.1 Date.parse() 和 Date.UTC()","slug":"date-parse-和-date-utc","link":"#date-parse-和-date-utc","children":[{"level":4,"title":"1.1.1 Date.parse()","slug":"date-parse","link":"#date-parse","children":[]},{"level":4,"title":"1.1.2 Date.UTC()","slug":"date-utc","link":"#date-utc","children":[]},{"level":4,"title":"1.1.3 对比","slug":"对比","link":"#对比","children":[]}]},{"level":3,"title":"1.2 继承的方法","slug":"继承的方法","link":"#继承的方法","children":[]},{"level":3,"title":"1.3 日期格式化方法","slug":"日期格式化方法","link":"#日期格式化方法","children":[]}]},{"level":2,"title":"2 RegExp","slug":"regexp","link":"#regexp","children":[{"level":3,"title":"2.1 实例属性","slug":"实例属性","link":"#实例属性","children":[]},{"level":3,"title":"2.2 实例方法","slug":"实例方法","link":"#实例方法","children":[{"level":4,"title":"2.2.1 exec()","slug":"exec","link":"#exec","children":[]},{"level":4,"title":"2.2.2 test()","slug":"test","link":"#test","children":[]}]},{"level":3,"title":"2.3 继承的方法","slug":"继承的方法-1","link":"#继承的方法-1","children":[]}]},{"level":2,"title":"3 原始值包装类型","slug":"原始值包装类型","link":"#原始值包装类型","children":[{"level":3,"title":"3.1 Boolean","slug":"boolean","link":"#boolean","children":[]},{"level":3,"title":"3.2 Number","slug":"number","link":"#number","children":[{"level":4,"title":"3.2.1 toFixed()","slug":"tofixed","link":"#tofixed","children":[]},{"level":4,"title":"3.2.2 toExponential()","slug":"toexponential","link":"#toexponential","children":[]},{"level":4,"title":"3.2.3 toPrecision()","slug":"toprecision","link":"#toprecision","children":[]},{"level":4,"title":"3.2.4 isInteger()","slug":"isinteger","link":"#isinteger","children":[]}]},{"level":3,"title":"3.3 String","slug":"string","link":"#string","children":[{"level":4,"title":"3.3.1 concat()","slug":"concat","link":"#concat","children":[]},{"level":4,"title":"3.3.2 slice(), substring()","slug":"slice-substring","link":"#slice-substring","children":[]},{"level":4,"title":"3.3.3 indexOf(), lastIndexOf()","slug":"indexof-lastindexof","link":"#indexof-lastindexof","children":[]},{"level":4,"title":"3.3.4 startsWith(), endsWith(), includes()","slug":"startswith-endswith-includes","link":"#startswith-endswith-includes","children":[]}]}]}],"git":{"createdTime":1713445632000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":5}]},"readingTime":{"minutes":12.41,"words":3722},"filePathRelative":"frontend/basic/javascript/007-basic-reference-type.md","localizedDate":"2024年4月17日","excerpt":"","autoDesc":true}');export{j as comp,w as data};
