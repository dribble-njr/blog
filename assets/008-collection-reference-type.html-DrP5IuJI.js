import{_ as r,c as d,e as o,a as n,b as c,d as s,w as e,r as l,o as k}from"./app-nKKmHBUX.js";const m={};function v(b,a){const i=l("RouteLink"),u=l("Tabs");return k(),d("div",null,[a[10]||(a[10]=o(`<h2 id="object" tabindex="-1"><a class="header-anchor" href="#object"><span><code>Object</code></span></a></h2><p>创建方式：</p><ul><li>构造函数；</li><li>对象字面量。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Nicholas&#39;</span>
person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span>

<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">29</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在对象字面量表示法中，属性名可以是字符串或数值，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Nicholas&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span>
  <span class="token number">5</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>数值属性会自动转换为字符串。</p></div><h2 id="array" tabindex="-1"><a class="header-anchor" href="#array"><span><code>Array</code></span></a></h2><p>ECMAScript 数组的两个特点：</p><ul><li>每个槽位可以存储任意类型的数据。</li><li>数组长度是动态大小的，会随着数据添加而自动增长。</li></ul><h3 id="创建方式" tabindex="-1"><a class="header-anchor" href="#创建方式"><span>创建方式</span></a></h3><p>创建方式共有四种：</p><ul><li>构造函数；</li><li>字面量；</li><li><code>Array.from()</code>；</li><li><code>Array.of()</code>。</li></ul>`,13)),n("p",null,[a[1]||(a[1]=n("code",null,"from()",-1)),a[2]||(a[2]=s(" 用于将 ")),c(i,{to:"/frontend/basic/javascript/009-array-like-object.html"},{default:e(()=>a[0]||(a[0]=[s("类数组对象")])),_:1,__:[0]}),a[3]||(a[3]=s(" 转换为数组实例，而 ")),a[4]||(a[4]=n("code",null,"of()",-1)),a[5]||(a[5]=s(" 用于将一组参数转换为数组实例。"))]),c(u,{id:"77",data:[{id:"<code v-pre>from()</code>"},{id:"<code v-pre>of()</code>"}]},{title0:e(({value:t,isActive:p})=>a[6]||(a[6]=[n("code",null,"from()",-1)])),title1:e(({value:t,isActive:p})=>a[7]||(a[7]=[n("code",null,"of()",-1)])),tab0:e(({value:t,isActive:p})=>a[8]||(a[8]=[n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 字符串会被拆分为单字符数组"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Matt'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},'// ["M", "a", "t", "t"]'),s(`

`),n("span",{class:"token comment"},"// 可以使用 from() 将集合和映射转换为一个新数组"),s(`
`),n("span",{class:"token keyword"},"const"),s(" m "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"const"),s(" s "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),s("m"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// [[1, 2], [3, 4]]"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// [1, 2, 3, 4]"),s(`

`),n("span",{class:"token comment"},"// Array.from() 对现有数组执行浅复制"),s(`
`),n("span",{class:"token keyword"},"const"),s(" a1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token keyword"},"const"),s(" a2 "),n("span",{class:"token operator"},"="),s(" Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),s("a1"),n("span",{class:"token punctuation"},")"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("a1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// [1, 2, 3, 4]"),s(`
`),n("span",{class:"token function"},"alert"),n("span",{class:"token punctuation"},"("),s("a1 "),n("span",{class:"token operator"},"==="),s(" a2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// false"),s(`

`),n("span",{class:"token comment"},"// 可以使用任何可迭代对象"),s(`
`),n("span",{class:"token keyword"},"const"),s(" iter "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"["),s("Symbol"),n("span",{class:"token punctuation"},"."),s("iterator"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"yield"),s(),n("span",{class:"token number"},"1"),s(`
    `),n("span",{class:"token keyword"},"yield"),s(),n("span",{class:"token number"},"2"),s(`
    `),n("span",{class:"token keyword"},"yield"),s(),n("span",{class:"token number"},"3"),s(`
    `),n("span",{class:"token keyword"},"yield"),s(),n("span",{class:"token number"},"4"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),s("iter"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// [1, 2, 3, 4]"),s(`

`),n("span",{class:"token comment"},"// arguments 对象可以被轻松地转换为数组"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getArgsArray"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),s("arguments"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"getArgsArray"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// [1, 2, 3, 4]"),s(`

`),n("span",{class:"token comment"},"// from() 也能转换带有必要属性的自定义对象"),s(`
`),n("span",{class:"token keyword"},"const"),s(" arrayLikeObject "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token number"},"0"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token number"},"2"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token number"},"3"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"length"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"4"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),s("arrayLikeObject"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// [1, 2, 3, 4]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:p})=>a[9]||(a[9]=[n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"of"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// [1, 2, 3, 4]"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"of"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"undefined"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// [undefined]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[11]||(a[11]=o(`<h3 id="数组空位" tabindex="-1"><a class="header-anchor" href="#数组空位"><span>数组空位</span></a></h3><p>使用数组字面量初始化数组时，可以使用一串逗号来创建空位。</p><p>ES6 新增的方法和迭代器与早期 ECMAScript 版本中存在的方法行为不同。ES6 新增方法普遍将这些空位当成存在的元素，只不过值为 <code>undefined</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> option <span class="token keyword">of</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// false</span>
<span class="token comment">// true</span>
<span class="token comment">// true</span>
<span class="token comment">// true</span>
<span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6 之前的方法则会忽略这个空位，但具体的行为也会因方法而异：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token comment">// map() 会跳过空位置</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [6, undefined, undefined, undefined, 6]</span>
<span class="token comment">// join() 视空位置为空字符串</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;1----5&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>由于行为的不一致，因此需要显示地使用 <code>undefined</code> 代替数组空位。</p></div><h3 id="数组索引" tabindex="-1"><a class="header-anchor" href="#数组索引"><span>数组索引</span></a></h3><p>如果把一个值设置给超过数组最大索引的索引，则数组长度会自动扩展到该索引值加 1。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 定义一个字符串数组</span>
<span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 显示第一项</span>
colors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;black&#39;</span> <span class="token comment">// 修改第三项</span>
colors<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;brown&#39;</span> <span class="token comment">// 添加第四项</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组 <code>length</code> 属性不是只读的。通过修改 <code>length</code> 属性，可以从数组末尾删除或添加元素。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 创建一个包含 3 个字符串的数组</span>
colors<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span>
<span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检测数组" tabindex="-1"><a class="header-anchor" href="#检测数组"><span>检测数组</span></a></h3><p>一个经典的 ECMAScript 问题是判断一个对象是不是数组。在只有一个网页（因而只有一个全局作用域）的情况下，使用 <code>instanceof</code> 操作符就足矣：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 操作数组</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>instanceof</code> 的问题是假定只有一个全局执行上下文。如果网页里有多个框架，则可能涉及两个不同的全局执行上下文，因此就会有两个不同版本的 <code>Array</code> 构造函数。如果要把数组从一个框架传给另一个框架，则这个数组的构造函数将有别于在第二个框架内本地创建的数组。</p><p>为此，可以使用 <code>Array.isArray()</code> 方法判断是不是数组。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 操作数组</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="迭代器方法" tabindex="-1"><a class="header-anchor" href="#迭代器方法"><span>迭代器方法</span></a></h3><p>在 ES6 中，<code>Array</code> 的原型上暴露了 3 个用于检索数组内容的方法：<code>keys()</code>、<code>values()</code> 和 <code>entries()</code>。<code>keys()</code> 返回数组索引的迭代器，<code>values()</code> 返回数组元素的迭代器，而 <code>entries()</code> 返回索引/值对的迭代器：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;qux&#39;</span><span class="token punctuation">]</span>

<span class="token comment">// 因为这些方法都返回迭代器，所以可以将它们的内容通过 Array.from() 直接转换为数组实例</span>
<span class="token keyword">const</span> aKeys <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> aValues <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> aEntries <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aKeys<span class="token punctuation">)</span> <span class="token comment">// [0, 1, 2, 3]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aValues<span class="token punctuation">)</span> <span class="token comment">// [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;qux&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aEntries<span class="token punctuation">)</span> <span class="token comment">// [[0, &quot;foo&quot;], [1, &quot;bar&quot;], [2, &quot;baz&quot;], [3, &quot;qux&quot;]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 ES6 的解构可以非常容易地在循环中拆分键/值对：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;qux&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>idx<span class="token punctuation">,</span> element<span class="token punctuation">]</span> <span class="token keyword">of</span> a<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 0</span>
<span class="token comment">// foo</span>
<span class="token comment">// 1</span>
<span class="token comment">// bar</span>
<span class="token comment">// 2</span>
<span class="token comment">// baz</span>
<span class="token comment">// 3</span>
<span class="token comment">// qux</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转换方法" tabindex="-1"><a class="header-anchor" href="#转换方法"><span>转换方法</span></a></h3><p>所有对象都有 <code>toLocaleString()</code>、<code>toString()</code> 和 <code>valueOf()</code> 方法。</p><p>其中，<code>valueOf()</code> 返回的还是数组本身。而 <code>toString()</code> 返回由数组中每个值的等效字符串拼接而成的一个逗号分隔的字符串。也就是说，对数组的每个值都会调用其 <code>toString()</code> 方法，以得到最终的字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 创建一个包含3 个字符串的数组</span>
<span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// red,blue,green</span>
<span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ &#39;red&#39;, &#39;blue&#39;, &#39;green&#39; ]</span>
<span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span> <span class="token comment">// [ &#39;red&#39;, &#39;blue&#39;, &#39;green&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果数组中某一项是 <code>null</code> 或 <code>undefined</code>，则在 <code>join()</code>、<code>toLocaleString()</code>、<code>toString()</code> 返回的结果中会以空字符串表示。</p></div><h3 id="排序方法" tabindex="-1"><a class="header-anchor" href="#排序方法"><span>排序方法</span></a></h3><p>数组有两个方法可以用来对元素重新排序：<code>reverse()</code> 和 <code>sort()</code>。</p><p><code>reverse()</code> 方法就是将数组元素反向排列。比如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
values<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token comment">// 5,4,3,2,1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>sort()</code> 方法更加灵活，默认情况，会按升序重新排列数组。即最小的值在前面，最大的值在后面。为此，<code>sort()</code> 会在每一项上调用 <code>String()</code> 转型函数，然后比较字符串来决定顺序。即使数组的元素都是数值，也会先把数组转换为字符串再比较、排序。比如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span>
values<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token comment">// 0,1,10,15,5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>默认情况的规则并不符合预期，因此 <code>sort()</code> 可以接受一个比较函数，用于判断哪个值应该排在前面。</p></div><p>比较函数接收两个参数，如果第一个参数应该排在第二个参数前面，就返回负值；如果两个参数相等，就返回 0；如果第一个参数应该排在第二个参数后面，就返回正值。</p>`,36)),a[12]||(a[12]=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"compare"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("value1"),n("span",{class:"token punctuation"},","),s(" value2")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("value1 "),n("span",{class:"token operator"},"<"),s(" value2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("value1 "),n("span",{class:"token operator"},">"),s(" value2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"1"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token number"},"0"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"let"),s(" values "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"15"),n("span",{class:"token punctuation"},"]"),s(`
values`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort"),n("span",{class:"token punctuation"},"("),s("compare"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token function"},"alert"),n("span",{class:"token punctuation"},"("),s("values"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// 0,1,5,10,15"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)),a[13]||(a[13]=n("p",null,[s("降序比较函数可以简写为一个箭头函数（升序即为 "),n("code",null,"(a, b) => a - b"),s("）：")],-1)),a[14]||(a[14]=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"let"),s(" values "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"15"),n("span",{class:"token punctuation"},"]"),s(`
values`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sort"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("a"),n("span",{class:"token punctuation"},","),s(" b")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(" b "),n("span",{class:"token operator"},"-"),s(" a"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token function"},"alert"),n("span",{class:"token punctuation"},"("),s("values"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// 15,10,5,1,0"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)),a[15]||(a[15]=o(`<h2 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span><code>Map</code></span></a></h2><p><code>Map</code> 是一种新的集合类型，提供键/值存储机制。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="基本-api" tabindex="-1"><a class="header-anchor" href="#基本-api"><span>基本 API</span></a></h3><p>初始化之后，可以使用 <code>set()</code> 方法再添加键/值对。另外，可以使用 <code>get()</code> 和 <code>has()</code> 进行查询，可以通过 <code>size</code> 属性获取映射中的键/值对的数量，还可以使用 <code>delete()</code> 和 <code>clear()</code> 删除值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">alert</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
<span class="token function">alert</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 0</span>

m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Matt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;lastName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mark&#39;</span><span class="token punctuation">)</span>

<span class="token function">alert</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Matt</span>
<span class="token function">alert</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 2</span>

m<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 只删除这一个键/值对</span>

<span class="token function">alert</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">alert</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;lastName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 1</span>

m<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 清除这个映射实例中的所有键/值对</span>

<span class="token function">alert</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;firstName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">alert</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;lastName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">alert</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="map-vs-object" tabindex="-1"><a class="header-anchor" href="#map-vs-object"><span><code>Map</code> VS <code>Object</code></span></a></h3><p>与 <code>Object</code> 只能使用「数值、字符串或符号」作为键不同，<code>Map</code> 可以使用任何 JavaScript 数据类型作为键。</p><p>与 <code>Object</code> 类型的一个主要差异是，<code>Map</code> 实例会 <strong>维护</strong> 键值对的插入顺序，因此可以根据插入顺序执行迭代操作。</p><ol><li>内存占用<br><code>Object</code> 和 <code>Map</code> 的工程级实现在不同浏览器间存在明显差异，但存储单个键/值对所占用的内存数量都会随键的数量线性增加。批量添加或删除键/值对则取决于各浏览器对该类型内存分配的工程实现。不同浏览器的情况不同，但给定固定大小的内存，<code>Map</code> 大约可以比 <code>Object</code> 多存储 50% 的键/值对。</li><li>插入性能<br> 向 <code>Object</code> 和 <code>Map</code> 中插入新键/值对的消耗大致相当，不过插入 <code>Map</code> 在所有浏览器中一般会稍微快一点儿。对这两个类型来说，插入速度并不会随着键/值对数量而线性增加。如果代码涉及大量插入操作，那么显然 <code>Map</code> 的性能更佳。</li><li>查找速度<br> 与插入不同，从大型 <code>Object</code> 和 <code>Map</code> 中查找键/值对的性能差异极小，但如果只包含少量键/值对，则 <code>Object</code> 有时候速度更快。在把 <code>Object</code> 当成数组使用的情况下（比如使用连续整数作为属性），浏览器引擎可以进行优化，在内存中使用更高效的布局。这对 <code>Map</code> 来说是不可能的。对这两个类型而言，查找速度不会随着键/值对数量增加而线性增加。如果代码涉及大量查找操作，那么某些情况下可能选择 <code>Object</code> 更好一些。</li><li>删除性能<br> 使用 <code>delete</code> 删除 <code>Object</code> 属性的性能一直以来饱受诟病，目前在很多浏览器中仍然如此。为此，出现了一些伪删除对象属性的操作，包括把属性值设置为 undefined 或 null。但很多时候，这都是一种讨厌的或不适宜的折中。而对大多数浏览器引擎来说，<code>Map</code> 的 <code>delete()</code> 操作都比插入和查找更快。如果代码涉及大量删除操作，那么毫无疑问应该选择 <code>Map</code>。</li></ol><h2 id="weakmap" tabindex="-1"><a class="header-anchor" href="#weakmap"><span><code>WeakMap</code></span></a></h2><p><code>WeakMap</code> API 是 <code>Map</code> API 的子集，差异在于 JavaScript 垃圾回收程序对待「弱映射」中键的方式。</p><p><code>WeakMap</code> 中的键只能是 <code>Object</code> 或者继承自 <code>Object</code> 的类型，尝试使用非对象设置键会抛出 TypeError。值的类型没有限制。</p><h3 id="弱键" tabindex="-1"><a class="header-anchor" href="#弱键"><span>弱键</span></a></h3><p>WeakMap 中「weak」表示弱映射的键是「弱弱地拿着」的。意思就是，这些键不属于正式的引用，不会阻止垃圾回收。</p><p>但要注意的是，弱映射中 <strong>值的引用</strong> 可不是「弱弱地拿着」的。只要键存在，键/值对就会存在于映射中，并被当作对值的引用，因此就不会被当作垃圾回收。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> wm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
wm<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;val&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>set()</code> 方法初始化了一个新对象并将它用作一个字符串的键。因为没有指向这个对象的其他引用，所以当这行代码执行完成后，这个对象键就会被当作垃圾回收。然后，这个键/值对就从弱映射中消失了，使其成为一个空映射。在这个例子中，因为值也没有被引用，所以这对键/值被破坏以后，值本身也会成为垃圾回收的目标。</p><p>再看一个稍微不同的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> wm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
wm<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token string">&#39;val&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">removeReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  container<span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一次，<code>container</code> 对象维护着一个对弱映射键的引用，因此这个对象键不会成为垃圾回收的目标。不过，如果调用了 <code>removeReference()</code>，就会摧毁键对象的最后一个引用，垃圾回收程序就可以把这个键/值对清理掉。</p><h3 id="不可迭代键" tabindex="-1"><a class="header-anchor" href="#不可迭代键"><span>不可迭代键</span></a></h3><p>因为 <code>WeakMap</code> 中的键/值对任何时候都可能被销毁，所以没必要提供迭代其键/值对的能力。当然，也用不着像 <code>clear()</code> 这样一次性销毁所有键/值的方法。</p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><h4 id="私有变量" tabindex="-1"><a class="header-anchor" href="#私有变量"><span>私有变量</span></a></h4><p>私有变量会存储在弱映射中，以对象实例为键，以私有成员的字典为值。这里使用一个闭包把 <code>WeakMap</code> 包装起来，这样就可以把弱映射与外界完全隔离开了：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> wm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>idProperty <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">setPrivate</span><span class="token punctuation">(</span><span class="token parameter">property<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> privateMembers <span class="token operator">=</span> wm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      privateMembers<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value
      wm<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> privateMembers<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token parameter">property</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> wm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">[</span>property<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token function">setId</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setPrivate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>idProperty<span class="token punctuation">,</span> id<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">getId</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>idProperty<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> User
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 123</span>
user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dom-节点元数据" tabindex="-1"><a class="header-anchor" href="#dom-节点元数据"><span>DOM 节点元数据</span></a></h4><p>因为 <code>WeakMap</code> 实例不会妨碍垃圾回收，所以非常适合保存关联元数据。来看下面这个例子，其中使用了常规的 <code>Map</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> loginButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#login&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 给这个节点关联一些元数据</span>
m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>loginButton<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">disabled</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设在上面的代码执行后，页面被 JavaScript 改变了，原来的登录按钮从 DOM 树中被删掉了。但由于映射中还保存着按钮的引用，所以对应的 DOM 节点仍然会逗留在内存中，除非明确将其从映射中删除或者等到映射本身被销毁。</p><p>如果这里使用的是弱映射，如以下代码所示，那么当节点从 DOM 树中被删除后，垃圾回收程序就可以立即释放其内存（假设没有其他地方引用这个对象）：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> wm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> loginButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#login&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 给这个节点关联一些元数据</span>
wm<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>loginButton<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">disabled</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span><code>Set</code></span></a></h2><p><code>Set</code> 与 <code>Map</code> 大多数 API 和行为都是一致的。<code>Set</code> 也会维护插入的顺序。</p><h2 id="weakset" tabindex="-1"><a class="header-anchor" href="#weakset"><span><code>WeakSet</code></span></a></h2><p><code>WeakMap</code> 是垃圾回收对键的处理行为，而 <code>Set</code> 描述地是垃圾回收对值对处理行为。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>add()</code> 方法初始化了一个新对象，并将它用作一个值。因为没有指向这个对象的其他引用，所以当这行代码执行完成后，这个对象值就会被当作垃圾回收。然后，这个值就从弱集合中消失了，使其成为一个空集合。</p><p>再看一个稍微不同的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">val</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
ws<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">removeReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  container<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一次，<code>container</code> 对象维护着一个对弱集合值的引用，因此这个对象值不会成为垃圾回收的目标。不过，如果调用了 <code>removeReference()</code>，就会摧毁值对象的最后一个引用，垃圾回收程序就可以把这个值清理掉。</p><h3 id="不可迭代值" tabindex="-1"><a class="header-anchor" href="#不可迭代值"><span>不可迭代值</span></a></h3><p>行为和 <code>WeakMap</code> 一致。</p><h3 id="使用场景-1" tabindex="-1"><a class="header-anchor" href="#使用场景-1"><span>使用场景</span></a></h3><p>弱集合在给对象打标签时还是有价值的。来看下面的例子，这里使用了一个普通 <code>Set</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> disabledElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> loginButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过加入对应集合，给这个节点打上“禁用”标签</span>
disabledElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>loginButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，通过查询元素在不在 <code>disabledElements</code> 中，就可以知道它是不是被禁用了。不过，假如元素从 DOM 树中被删除了，它的引用却仍然保存在 <code>Set</code> 中，因此垃圾回收程序也不能回收它。</p><p>为了让垃圾回收程序回收元素的内存，可以在这里使用 <code>WeakSet</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> disabledElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> loginButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过加入对应集合，给这个节点打上“禁用”标签</span>
disabledElements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>loginButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，只要 <code>WeakSet</code> 中任何元素从 DOM 树中被删除，垃圾回收程序就可以忽略其存在，而立即释放其内存（假设没有其他地方引用这个对象）。</p>`,51))])}const f=r(m,[["render",v],["__file","008-collection-reference-type.html.vue"]]),h=JSON.parse('{"path":"/frontend/basic/javascript/008-collection-reference-type.html","title":"集合引用类型","lang":"zh-CN","frontmatter":{"title":"集合引用类型","date":"2024-04-19T00:00:00.000Z","icon":"reference","category":["JavaScript"],"tag":["language advanced"],"description":"Object 创建方式： 构造函数； 对象字面量。 在对象字面量表示法中，属性名可以是字符串或数值，比如： 注意 数值属性会自动转换为字符串。 Array ECMAScript 数组的两个特点： 每个槽位可以存储任意类型的数据。 数组长度是动态大小的，会随着数据添加而自动增长。 创建方式 创建方式共有四种： 构造函数； 字面量； Array.from(...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/008-collection-reference-type.html"}],["meta",{"property":"og:title","content":"集合引用类型"}],["meta",{"property":"og:description","content":"Object 创建方式： 构造函数； 对象字面量。 在对象字面量表示法中，属性名可以是字符串或数值，比如： 注意 数值属性会自动转换为字符串。 Array ECMAScript 数组的两个特点： 每个槽位可以存储任意类型的数据。 数组长度是动态大小的，会随着数据添加而自动增长。 创建方式 创建方式共有四种： 构造函数； 字面量； Array.from(..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"language advanced"}],["meta",{"property":"article:published_time","content":"2024-04-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"集合引用类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 Object","slug":"object","link":"#object","children":[]},{"level":2,"title":"2 Array","slug":"array","link":"#array","children":[{"level":3,"title":"2.1 创建方式","slug":"创建方式","link":"#创建方式","children":[]},{"level":3,"title":"2.2 数组空位","slug":"数组空位","link":"#数组空位","children":[]},{"level":3,"title":"2.3 数组索引","slug":"数组索引","link":"#数组索引","children":[]},{"level":3,"title":"2.4 检测数组","slug":"检测数组","link":"#检测数组","children":[]},{"level":3,"title":"2.5 迭代器方法","slug":"迭代器方法","link":"#迭代器方法","children":[]},{"level":3,"title":"2.6 转换方法","slug":"转换方法","link":"#转换方法","children":[]},{"level":3,"title":"2.7 排序方法","slug":"排序方法","link":"#排序方法","children":[]}]},{"level":2,"title":"3 Map","slug":"map","link":"#map","children":[{"level":3,"title":"3.1 基本 API","slug":"基本-api","link":"#基本-api","children":[]},{"level":3,"title":"3.2 Map VS Object","slug":"map-vs-object","link":"#map-vs-object","children":[]}]},{"level":2,"title":"4 WeakMap","slug":"weakmap","link":"#weakmap","children":[{"level":3,"title":"4.1 弱键","slug":"弱键","link":"#弱键","children":[]},{"level":3,"title":"4.2 不可迭代键","slug":"不可迭代键","link":"#不可迭代键","children":[]},{"level":3,"title":"4.3 使用场景","slug":"使用场景","link":"#使用场景","children":[{"level":4,"title":"4.3.1 私有变量","slug":"私有变量","link":"#私有变量","children":[]},{"level":4,"title":"4.3.2 DOM 节点元数据","slug":"dom-节点元数据","link":"#dom-节点元数据","children":[]}]}]},{"level":2,"title":"5 Set","slug":"set","link":"#set","children":[]},{"level":2,"title":"6 WeakSet","slug":"weakset","link":"#weakset","children":[{"level":3,"title":"6.1 不可迭代值","slug":"不可迭代值","link":"#不可迭代值","children":[]},{"level":3,"title":"6.2 使用场景","slug":"使用场景-1","link":"#使用场景-1","children":[]}]}],"git":{"createdTime":1713934319000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":3}]},"readingTime":{"minutes":12.82,"words":3845},"filePathRelative":"frontend/basic/javascript/008-collection-reference-type.md","localizedDate":"2024年4月19日","excerpt":"","autoDesc":true}');export{f as comp,h as data};
