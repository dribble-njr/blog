import{_ as l,c as o,a as n,e as t,d as e,b as p,r as i,o as r}from"./app-DeAcFSYJ.js";const c={},d={href:"https://chakra-ui.com/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://chakra-ui.com/docs/styled-system/color-mode",target:"_blank",rel:"noopener noreferrer"},h={href:"https://tailwindcss.com/",target:"_blank",rel:"noopener noreferrer"};function k(m,a){const s=i("ExternalLinkIcon");return r(),o("div",null,[n("p",null,[n("a",d,[a[0]||(a[0]=e("Chakra UI")),p(s)]),a[1]||(a[1]=e(" 是一个简单、模块化和可访问的组件库，可提供构建 React 应用程序所需的组件。"))]),a[11]||(a[11]=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"总结"),n("p",null,"非常灵活自由，但有一定上手门槛。")],-1)),a[12]||(a[12]=n("h2",{id:"设计原则",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#设计原则"},[n("span",null,"设计原则")])],-1)),a[13]||(a[13]=n("p",null,"Chakra UI 建立在保持组件一致性的原则之上。了解这些概念将有助于您更好地为 Chakra UI 做出贡献。",-1)),a[14]||(a[14]=n("p",null,"我们的目标是设计简单、可组合的组件，以解决现实生活中的用户界面设计问题。为此，我们制定了一系列原则，帮助我们始终沿着这条道路前进。",-1)),n("ul",null,[a[7]||(a[7]=t("<li>Style Props：所有组件的样式都可以通过 <code>style props</code> 覆盖或扩展，以减少 <code>css prop</code> 或 <code>styled()</code> 的使用。从 Box 中组合新组件。</li><li>简单：努力保持组件应用程序接口（API）相当简单，并展示组件在现实世界中的使用场景。</li><li>组合：将组件分解成具有最小道具的较小部分，以降低复杂性，并将它们组合在一起。这将确保样式和功能的灵活性和可扩展性。</li><li>可访问性：创建组件时，应将可访问性放在首位。这包括键盘导航、焦点管理、色彩对比、语音播报以及正确的 <code>aria-*</code> 属性。</li>",4)),n("li",null,[a[3]||(a[3]=e("暗色模式：使组件兼容暗色模式。使用 ")),a[4]||(a[4]=n("code",null,"useColorMode",-1)),a[5]||(a[5]=e(" 钩子处理样式。了解有关 ")),n("a",u,[a[2]||(a[2]=e("暗色模式")),p(s)]),a[6]||(a[6]=e(" 的更多信息。"))]),a[8]||(a[8]=t("<li><code>Naming Props</code>：命名是最难的事情。一般来说，要确保 <code>prop name</code> 能说明其作用。<code>Boolean prop</code> 应使用助动词命名，如 <code>does</code>、<code>has</code>、<code>is</code> 和 <code>should</code>。例如，按钮使用 <code>isDisabled</code>、<code>isLoading</code> 等。</li>",1))]),a[15]||(a[15]=t('<h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h2><h3 id="tailwind-css" tabindex="-1"><a class="header-anchor" href="#tailwind-css"><span>Tailwind CSS</span></a></h3><h4 id="总览" tabindex="-1"><a class="header-anchor" href="#总览"><span>总览</span></a></h4>',3)),n("p",null,[n("a",h,[a[9]||(a[9]=e("Tailwind CSS")),p(s)]),a[10]||(a[10]=e("：CSS 框架，提供原子 CSS 类，帮助你为组件设计样式、可访问性、组件组成、键盘导航、样式重写等。"))]),a[16]||(a[16]=t(`<p>Chakra UI：一个由精心创建的 React 组件组成的库，具有 Tailwind 的所有样式优势，并能处理所有细节。</p><h4 id="学习曲线" tabindex="-1"><a class="header-anchor" href="#学习曲线"><span>学习曲线</span></a></h4><p>Tailwind CSS：如果你有过 Bootstrap 或 Bulma CSS 背景，你可能会发现学习 Tailwind 非常容易。但是，如果你是 <code>styled-components</code> 或 <code>emotion</code> 背景，学习曲线可能会相当陡峭。</p><p>Chakra UI：Chakra UI 采用非常直观、类似 CSS 和基于 <code>prop</code> 的组件样式模型，因此很容易上手。组件名称和 <code>prop</code> 名称也非常容易理解。</p><h4 id="响应式" tabindex="-1"><a class="header-anchor" href="#响应式"><span>响应式</span></a></h4><p>Tailwind CSS：在 Tailwind 中创建响应式样式需要结合伪类。随着项目的增长，这可能会变得相当冗长。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w-16 md:w-32 lg:w-48<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Chakra UI：以非常简单直观的方式创建响应式样式。可以使用数组或对象符号：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Img</span></span> <span class="token attr-name">w</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Img</span></span> <span class="token attr-name">w</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> base：<span class="token number">16</span><span class="token punctuation">,</span> md：<span class="token number">32</span><span class="token punctuation">,</span> lg：<span class="token number">48</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="样式覆盖" tabindex="-1"><a class="header-anchor" href="#样式覆盖"><span>样式覆盖</span></a></h4><p>在大多数应用中，为满足设计要求而覆盖特定上下文的样式是一项常见的挑战。</p><p>Tailwind CSS：鉴于 Tailwind 是一个 CSS 实用框架，你可能需要找出覆盖特定 classNames 或编写自定义 CSS 的最佳方法。</p><p>Chakra UI：Chakra UI 的样式是基于 <code>prop</code> 的，因此覆盖就像传递 <code>prop</code> 一样简单。</p><h4 id="可访问性" tabindex="-1"><a class="header-anchor" href="#可访问性"><span>可访问性</span></a></h4><p>如前所述，Tailwind CSS 只是一个 CSS 框架，类似于 Bootstrap 或 Bulma CSS。这样，用户就可以处理语义 html 结构、满足 WAI-ARIA 要求、键盘导航等。</p><p>Chakra 不仅提供了 Tailwind 的便利性，还具有其他所有优点。</p><h4 id="暗色模式" tabindex="-1"><a class="header-anchor" href="#暗色模式"><span>暗色模式</span></a></h4><p>Tailwind CSS：所有组件均与暗色模式兼容。</p><p>Chakra UI：所有组件均兼容明暗模式。还可以在整个应用程序中创建自己的明暗模式体验。</p><h3 id="theme-ui" tabindex="-1"><a class="header-anchor" href="#theme-ui"><span>Theme UI</span></a></h3><p>Chakra UI 深受 Theme UI 的启发，并遵循系统 UI 规范。</p><p>与 Theme UI 相比，Chakra UI 提供了更多组件、改进的样式 API、可访问性和直观的组件 API。</p><p>可以将 Chakra 视为更强大的 Theme UI 版本，它充分利用了 <code>styled-system</code> 的全部功能，提供更好的组件样式和主题。</p><h3 id="material-ui" tabindex="-1"><a class="header-anchor" href="#material-ui"><span>Material UI</span></a></h3><p>Material UI React 库为用户提供了大量 UI 布局工具，但其最著名的地方在于它提供了大量预设样式的 UI 组件，开发人员可以在这些组件上应用自定义样式来覆盖开箱即用的基础样式。</p><p>Chakra UI 是一个更强大、更注重布局的库，它也为开发人员提供了与 Material UI 类似的 UI 组件，但更注重创建灵活、可组合和可扩展的代码。</p><p>在比较这两个框架时，需要考虑的一个核心概念是 &quot;易于修改&quot;。</p><p>相比之下，Material UI 为与导出组件和布局相关的单个 HTML 标签添加了更多的类，这迫使开发人员在定制界面时不得不与基本样式作斗争。</p><p>Chakra 为开发人员提供了更大的自由度来操作导出组件和布局的 CSS 类，而且通常只需较少的代码即可完成。</p><p>例如，Material UI 需要单独的代码来控制基于视口变化的响应式样式，而 Chakra 提供了内置的响应式样式支持，无需创建 CSS 类或媒体查询。</p><p>如果自定义样式并不是项目的主要关注点，Material UI 则是有益的，因为您可以避免创建该库所提供的自定义组件。</p><p>如果可扩展的自定义设计对您的项目很重要（很多时候确实如此），Chakra 对开发人员的便利性比 Material UI 更为突出，尤其是在项目随时间扩展的情况下。</p><h3 id="ant-design" tabindex="-1"><a class="header-anchor" href="#ant-design"><span>Ant Design</span></a></h3><p>Ant Design React 库是 ant.design 设计语言的实现。这意味着组件遵循现有的设计规则和值，只允许在有限的范围内自定义某些变量。</p><p>Chakra 不受任何设计系统的束缚，可以更自由地定制组件，实现自己的设计。</p><h4 id="样式组件" tabindex="-1"><a class="header-anchor" href="#样式组件"><span>样式组件</span></a></h4><p>Ant Design 组件是为开箱即用而构建的，因此它们的特定样式 <code>prop</code> 和自定义功能非常有限。</p><p>另一方面，Chakra 组件的主要风格化方式是将样式作为 <code>prop</code>。</p><p>以按钮组件为例。Chakra Button 的 <code>colorScheme</code>（色彩主题）道具在默认情况下有许多不同的值，您可以对其进行自定义和/或扩展，以应用自己的设计。</p><p>相比之下，您需要记住，Antd Design 按钮只有在拥有 <code>primary prop</code> 和 <code>danger prop</code> 的情况下才能着色，而不能因为 Ant Design 的现有设计值而着色。</p><p>同样的模式也可以在布局、表单和排版等其他组件中看到。</p><h4 id="设置和自定义" tabindex="-1"><a class="header-anchor" href="#设置和自定义"><span>设置和自定义</span></a></h4><p>Ant Design 有一长串可修改的默认变量，包括颜色、页边距、边距、动画、阴影、边框、屏幕尺寸、尺寸等，有些是通用变量，有些则是用户界面组件的特定变量。为了尊重底层设计规范，除修改这些现有变量外，不建议进行其他自定义操作。</p><p>Chakra 的特点是所有全局和组件样式默认值都可以轻松定制/扩展。可以为每个组件定义新的尺寸或变体。此外，您还可以使用 Chakra Factory 从现有组件甚至非 Chakra 组件中组合出新的组件。</p>`,44))])}const C=l(c,[["render",k],["__file","01-getting-started.html.vue"]]),b=JSON.parse('{"path":"/frontend/framework/chakra/01-getting-started.html","title":"快速开始","lang":"zh-CN","frontmatter":{"title":"快速开始","date":"2024-03-07T00:00:00.000Z","icon":"STARTUP","category":["chakra"],"tag":["frontend","atomic css","chakra"],"description":"Chakra UI 是一个简单、模块化和可访问的组件库，可提供构建 React 应用程序所需的组件。 总结 非常灵活自由，但有一定上手门槛。 设计原则 Chakra UI 建立在保持组件一致性的原则之上。了解这些概念将有助于您更好地为 Chakra UI 做出贡献。 我们的目标是设计简单、可组合的组件，以解决现实生活中的用户界面设计问题。为此，我们制定...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/01-getting-started.html"}],["meta",{"property":"og:title","content":"快速开始"}],["meta",{"property":"og:description","content":"Chakra UI 是一个简单、模块化和可访问的组件库，可提供构建 React 应用程序所需的组件。 总结 非常灵活自由，但有一定上手门槛。 设计原则 Chakra UI 建立在保持组件一致性的原则之上。了解这些概念将有助于您更好地为 Chakra UI 做出贡献。 我们的目标是设计简单、可组合的组件，以解决现实生活中的用户界面设计问题。为此，我们制定..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"frontend"}],["meta",{"property":"article:tag","content":"atomic css"}],["meta",{"property":"article:tag","content":"chakra"}],["meta",{"property":"article:published_time","content":"2024-03-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"快速开始\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 设计原则","slug":"设计原则","link":"#设计原则","children":[]},{"level":2,"title":"2 对比","slug":"对比","link":"#对比","children":[{"level":3,"title":"2.1 Tailwind CSS","slug":"tailwind-css","link":"#tailwind-css","children":[{"level":4,"title":"2.1.1 总览","slug":"总览","link":"#总览","children":[]},{"level":4,"title":"2.1.2 学习曲线","slug":"学习曲线","link":"#学习曲线","children":[]},{"level":4,"title":"2.1.3 响应式","slug":"响应式","link":"#响应式","children":[]},{"level":4,"title":"2.1.4 样式覆盖","slug":"样式覆盖","link":"#样式覆盖","children":[]},{"level":4,"title":"2.1.5 可访问性","slug":"可访问性","link":"#可访问性","children":[]},{"level":4,"title":"2.1.6 暗色模式","slug":"暗色模式","link":"#暗色模式","children":[]}]},{"level":3,"title":"2.2 Theme UI","slug":"theme-ui","link":"#theme-ui","children":[]},{"level":3,"title":"2.3 Material UI","slug":"material-ui","link":"#material-ui","children":[]},{"level":3,"title":"2.4 Ant Design","slug":"ant-design","link":"#ant-design","children":[{"level":4,"title":"2.4.1 样式组件","slug":"样式组件","link":"#样式组件","children":[]},{"level":4,"title":"2.4.2 设置和自定义","slug":"设置和自定义","link":"#设置和自定义","children":[]}]}]}],"git":{"createdTime":1709804101000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":3}]},"readingTime":{"minutes":6.2,"words":1859},"filePathRelative":"frontend/framework/chakra/01-getting-started.md","localizedDate":"2024年3月7日","excerpt":"","autoDesc":true}');export{C as comp,b as data};
