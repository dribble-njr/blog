import{_ as o,c as r,a as s,e as i,d as n,b as t,r as d,o as l}from"./app-nKKmHBUX.js";const c={},p={href:"https://github.com/expressjs/express",target:"_blank",rel:"noopener noreferrer"},u={class:"hint-container warning"},m={href:"https://github.com/senchalabs/connect#middleware",target:"_blank",rel:"noopener noreferrer"};function v(b,e){const a=d("ExternalLinkIcon");return l(),r("div",null,[s("p",null,[s("a",p,[e[0]||(e[0]=n("Express")),t(a)]),e[1]||(e[1]=n(" 是适用于 Node.js 的极简网络应用程序框架。它为构建网络和移动应用程序提供了一套强大的功能。尽管简单，Express 却具有很强的可扩展性，允许开发人员添加中间件并自定义应用程序的行为。"))]),e[7]||(e[7]=i('<div class="hint-container warning"><p class="hint-container-title">注意</p><p>在代码解读中，贴上的源码有可能改为 TS 类型，在阅读源码时请注意。</p></div><h2 id="核心组件" tabindex="-1"><a class="header-anchor" href="#核心组件"><span>核心组件</span></a></h2><p>包括 <code>Application</code>、<code>Request</code>、<code>Response</code> 和 <code>Router</code>：</p><ul><li><code>Application</code>：应用程序对象，由 <code>express()</code> 创建，它代表一个 Express 应用程序，用于通过设置中间件、路由和错误处理程序来配置应用程序。</li><li><code>Request</code>： HTTP 请求实例，该对象封装了传入请求的所有信息，如 <code>header</code>、<code>query parameters</code>、<code>URL</code>、<code>body</code> 等。</li><li><code>Response</code>：HTTP 响应实例，该对象用于向客户端发回数据、设置响应 <code>header</code>、<code>cookie</code>、状态代码等。</li><li><code>Router</code>: 路由器对象，由 <code>express.Router()</code> 创建，一个小型 <code>Application</code>，可拥有自己的路由和中间件。它有助于将应用组织成更小的、模块化的部分。</li></ul><h2 id="middleware" tabindex="-1"><a class="header-anchor" href="#middleware"><span>Middleware</span></a></h2><p>可以访问请求（<code>req</code>）、响应（<code>res</code>）以及应用程序请求-响应循环中下一个中间件函数的函数。中间件可以执行任何代码、修改请求和响应对象、结束请求-响应循环或调用下一个中间件函数。</p><p>在 Express 中，有不同类型的中间件：</p><ul><li>应用程序级中间件：与 <code>Express</code> 应用程序实例绑定。</li><li>路由器级中间件：与 <code>express.Router()</code> 实例绑定。</li><li>错误处理中间件：能捕捉错误并进行处理的特殊中间件。</li></ul><p>中间件按照应用程序中定义的顺序执行。 如果中间件函数没有结束请求-响应循环（调用 <code>res.end()</code>），则必须调用 <code>next()</code> 将控制权传递给下一个中间件函数。</p>',9)),s("div",u,[e[5]||(e[5]=s("p",{class:"hint-container-title"},"注意",-1)),s("p",null,[e[3]||(e[3]=n("Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see ")),s("a",m,[e[2]||(e[2]=n("https://github.com/senchalabs/connect#middleware")),t(a)]),e[4]||(e[4]=n("."))]),e[6]||(e[6]=i(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> removedMiddlewares <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;bodyParser&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;compress&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;cookieSession&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;session&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;logger&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;cookieParser&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;favicon&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;responseTime&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;errorHandler&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;timeout&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;methodOverride&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;vhost&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;csrf&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;directory&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;limit&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;multipart&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;staticCache&#39;</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))]),e[8]||(e[8]=i(`<h2 id="routing" tabindex="-1"><a class="header-anchor" href="#routing"><span>Routing</span></a></h2><p>路由定义了应用程序响应客户端请求的端点（URI）。每个路由可以有多个处理程序，并支持所有 HTTP 方法（GET、POST、PUT、DELETE 等）。</p><p>支持自动解析 <code>query parameters</code> 和 <code>URL</code> 中的 <code>:param</code> 值。</p><p>简单理解为分发请求并进行相应处理。</p><h2 id="lib-源码结构" tabindex="-1"><a class="header-anchor" href="#lib-源码结构"><span>lib 源码结构</span></a></h2><p>Express@4.21.0 中，<code>lib</code> 目录结构如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>lib/
├── application.js
├── express.js
├── middleware/
│   ├── init.js
│   ├── query.js
├── request.js
├── response.js
├── router/
│   ├── index.js
│   ├── layer.js
│   ├── route.js
├── utils.js
└── view.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>express.js</code>: 主入口文件，导出了核心的 <code>express()</code> 函数。</li><li><code>application.js</code>: 定义了 Express 应用的核心功能，如 <code>app.use()</code>、<code>app.get()</code> 等方法。</li><li><code>middleware/</code>: 包含 Express 内置的 <code>middleware</code>，例如 <code>init.js</code> 用于初始化中间件，<code>query.js</code> 用于解析查询字符串。</li><li><code>request.js</code>: 定义了 <code>req</code> 对象的扩展和辅助方法。</li><li><code>response.js</code>: 定义了 <code>res</code> 对象的扩展和辅助方法。</li><li><code>router/</code>: 包含与路由相关的代码，其中 <code>index.js</code> 是路由器的主模块，<code>layer.js</code> 和 <code>route.js</code> 用于处理路由层次和路径匹配。</li><li><code>utils.js</code>: 一些工具函数，用于简化内部实现。</li><li><code>view.js</code>: 处理视图渲染相关的逻辑。</li></ul><p>接下来会对每个文件进行详细分析。</p>`,9))])}const h=o(c,[["render",v],["__file","01-overview-architecture.html.vue"]]),k=JSON.parse('{"path":"/backend/node/express/01-overview-architecture.html","title":"总体架构","lang":"zh-CN","frontmatter":{"title":"总体架构","date":"2024-08-20T00:00:00.000Z","icon":"architecture","category":["node"],"tag":["express","architecture"],"description":"Express 是适用于 Node.js 的极简网络应用程序框架。它为构建网络和移动应用程序提供了一套强大的功能。尽管简单，Express 却具有很强的可扩展性，允许开发人员添加中间件并自定义应用程序的行为。 注意 在代码解读中，贴上的源码有可能改为 TS 类型，在阅读源码时请注意。 核心组件 包括 Application、Request、Respon...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/backend/node/express/01-overview-architecture.html"}],["meta",{"property":"og:title","content":"总体架构"}],["meta",{"property":"og:description","content":"Express 是适用于 Node.js 的极简网络应用程序框架。它为构建网络和移动应用程序提供了一套强大的功能。尽管简单，Express 却具有很强的可扩展性，允许开发人员添加中间件并自定义应用程序的行为。 注意 在代码解读中，贴上的源码有可能改为 TS 类型，在阅读源码时请注意。 核心组件 包括 Application、Request、Respon..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"express"}],["meta",{"property":"article:tag","content":"architecture"}],["meta",{"property":"article:published_time","content":"2024-08-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"总体架构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 核心组件","slug":"核心组件","link":"#核心组件","children":[]},{"level":2,"title":"2 Middleware","slug":"middleware","link":"#middleware","children":[]},{"level":2,"title":"3 Routing","slug":"routing","link":"#routing","children":[]},{"level":2,"title":"4 lib 源码结构","slug":"lib-源码结构","link":"#lib-源码结构","children":[]}],"git":{"createdTime":1724407584000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":4}]},"readingTime":{"minutes":2.67,"words":802},"filePathRelative":"backend/node/express/01-overview-architecture.md","localizedDate":"2024年8月20日","excerpt":"","autoDesc":true}');export{h as comp,k as data};
