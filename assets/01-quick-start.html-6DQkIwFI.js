import{_ as l,c as p,a as s,e as i,d as a,b as t,r,o}from"./app-BFkZJg83.js";const d={},c={href:"https://nodejs.org/en",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.mysql.com/",target:"_blank",rel:"noopener noreferrer"},m={class:"hint-container note"},v={href:"https://www.prisma.io/docs/orm/reference/system-requirements",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.prisma.io/docs/orm/reference/connection-urls",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.prisma.io/docs/concepts/components/prisma-schema",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.prisma.io/docs/orm/more/development-environment/environment-variables/env-files",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.prisma.io/docs/orm/prisma-migrate",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.prisma.io/docs/orm/prisma-client",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#nested-writes",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relation-fields",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.prisma.io/docs/orm/prisma-client/queries/select-fields#return-nested-objects-by-selecting-relation-fields",target:"_blank",rel:"noopener noreferrer"};function P(T,n){const e=r("ExternalLinkIcon");return o(),p("div",null,[n[41]||(n[41]=s("p",null,"以关系型数据库 Mysql 为例，介绍 Prisma 在 Node.js 和 Typescript 项目中的安装和使用。",-1)),n[42]||(n[42]=s("h2",{id:"前置条件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前置条件"},[s("span",null,"前置条件")])],-1)),s("ul",null,[s("li",null,[n[1]||(n[1]=a("安装 ")),s("a",c,[n[0]||(n[0]=a("Node.js")),t(e)])]),s("li",null,[n[3]||(n[3]=a("运行 ")),s("a",u,[n[2]||(n[2]=a("Mysql")),t(e)])])]),s("div",m,[n[10]||(n[10]=s("p",{class:"hint-container-title"},"注",-1)),s("p",null,[n[5]||(n[5]=a("更多系统要求请参考 ")),s("a",v,[n[4]||(n[4]=a("Prisma 系统要求")),t(e)]),n[6]||(n[6]=a("。"))]),s("p",null,[n[8]||(n[8]=a("确保拥有 ")),s("a",b,[n[7]||(n[7]=a("数据库连接 url")),t(e)]),n[9]||(n[9]=a("。"))])]),n[43]||(n[43]=i(`<h2 id="安装项目" tabindex="-1"><a class="header-anchor" href="#安装项目"><span>安装项目</span></a></h2><p>创建项目目录：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> hello-prisma
<span class="token builtin class-name">cd</span> hello-prisma
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化 Typescript 项目并安装 Prisma CLI：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> init <span class="token parameter variable">-y</span>
<span class="token function">npm</span> <span class="token function">install</span> prisma typescript tsx @types/node --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这会创建 <code>package.json</code> 文件，并创建一个 Typescript 项目。</p><p>接下来，初始化 Typescript：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx tsc <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你现在可以通过 <code>npx</code> 运行 Prisma CLI：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10)),s("p",null,[n[12]||(n[12]=a("接下来，你可以通过创建 ")),s("a",k,[n[11]||(n[11]=a("Prisma Schema")),t(e)]),n[13]||(n[13]=a(" 文件来创建 Prisma ORM 项目："))]),n[44]||(n[44]=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[s("pre",{class:"language-bash"},[s("code",null,`npx prisma init
`)]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1)),n[45]||(n[45]=s("p",null,"这个命令做了两件事：",-1)),s("ul",null,[n[17]||(n[17]=s("li",null,[a("创建一个名为 "),s("code",null,"prisma"),a(" 的目录，其中包含一个名为 "),s("code",null,"schema.prisma"),a(" 的文件，该文件包含数据库连接变量和 schema 模型。")],-1)),s("li",null,[n[15]||(n[15]=a("在项目根目录中创建 ")),s("a",g,[n[14]||(n[14]=s("code",null,".env",-1)),t(e)]),n[16]||(n[16]=a(" 文件，用于定义环境变量（例如数据库连接）。"))])]),n[46]||(n[46]=i(`<h2 id="连接数据库" tabindex="-1"><a class="header-anchor" href="#连接数据库"><span>连接数据库</span></a></h2><p>为了连接数据库，你需要在 <code>schema.prisma</code> 文件中定义数据源：</p><p><strong>prisma/schema.prisma</strong></p><div class="language-prisma line-numbers-mode" data-ext="prisma" data-title="prisma"><pre class="language-prisma"><code>datasource db {
  provider = &quot;mysql&quot;
  url      = env(&quot;DATABASE_URL&quot;)
}
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>.env</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>DATABASE_URL=&quot;mysql://johndoe:randompassword@localhost:3306/mydb&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>URL 格式取决于你使用的数据库。对于 MySQL，它看起来如下（大写的部分是你的特定连接细节的占位符）：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mysql://USER:PASSWORD@HOST:PORT/DATABASE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里是对每个组件的简要解释：</p><ul><li>USER: 数据库用户名</li><li>PASSWORD: 数据库用户密码</li><li>PORT: 数据库服务器运行的端口（通常为 3306 用于 MySQL）</li><li>DATABASE: 数据库名称</li></ul><h2 id="prisma-migrate" tabindex="-1"><a class="header-anchor" href="#prisma-migrate"><span>Prisma Migrate</span></a></h2>`,11)),s("p",null,[s("a",h,[n[18]||(n[18]=a("Prisma Migrate")),t(e)]),n[19]||(n[19]=a(" 是 Prisma 的迁移工具，用于管理数据库 schema 的变更。"))]),n[47]||(n[47]=i(`<p><strong>prisma/schema.prisma</strong></p><div class="language-prisma line-numbers-mode" data-ext="prisma" data-title="prisma"><pre class="language-prisma"><code>model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了将 schema 转换为数据库，你需要运行 Prisma Migrate：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma migrate <span class="token parameter variable">--name</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会做两件事：</p><ul><li>创建一个 SQL 迁移文件。</li><li>在数据库中执行对应的 SQL 迁移文件。</li></ul><div class="hint-container note"><p class="hint-container-title">注</p><p>注意：默认情况下，运行 <code>prisma migrate dev</code> 后，会在引擎盖下调用 <code>generate</code>。 如果模式中定义了 <code>prisma-client-js</code> 生成器，它会检查 <code>@prisma/client</code> 是否已安装，如果缺少，则安装。</p></div><h2 id="安装-prisma-client" tabindex="-1"><a class="header-anchor" href="#安装-prisma-client"><span>安装 Prisma Client</span></a></h2><p>要开始使用 Prisma 客户端，需要安装 <code>@prisma/client</code> 软件包：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @prisma/client
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装命令会调用 <code>prisma generate</code>，读取 Prisma schema 并生成适合你模型的 Prisma 客户端版本。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241217183854.png" alt="workflow" tabindex="0" loading="lazy"><figcaption>workflow</figcaption></figure><p>无论何时更新 Prisma schema，都必须使用 <code>prisma migrate dev</code> 或 <code>prisma db push</code> 更新数据库模式。这将使数据库模式与 Prisma 模式保持同步。这些命令还将重新生成 Prisma 客户端。</p><blockquote><p>[!WARNING] &gt; <code>prisma db push</code> 不会生成迁移文件，只会在数据库中执行对应的 SQL 语句。</p><p>因此如果你需要对数据库进行版本控制，需要更好的迁移记录和管理，请使用 <code>prisma migrate dev</code>。</p></blockquote><h2 id="操作数据库" tabindex="-1"><a class="header-anchor" href="#操作数据库"><span>操作数据库</span></a></h2><h3 id="查询数据" tabindex="-1"><a class="header-anchor" href="#查询数据"><span>查询数据</span></a></h3>`,16)),s("p",null,[n[21]||(n[21]=a("现在已经生成了 ")),s("a",f,[n[20]||(n[20]=a("Prisma Client")),t(e)]),n[22]||(n[22]=a("，可以开始编写在数据库中读写数据的查询。"))]),n[48]||(n[48]=i(`<p>创建一个名为 <code>index.ts</code> 的新文件，并在其中添加以下代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@prisma/client&#39;</span>

<span class="token keyword">const</span> prisma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrismaClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... you will write your Prisma Client queries here</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> prisma<span class="token punctuation">.</span><span class="token function">$disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token keyword">await</span> prisma<span class="token punctuation">.</span><span class="token function">$disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是代码片段各部分的简要概述：</p><ul><li>从 <code>@prisma/client</code> 节点模块导入 <code>PrismaClient</code> 构造函数</li><li>实例化 <code>PrismaClient</code></li><li>定义名为 <code>main</code> 的异步函数，向数据库发送查询</li><li>调用 <code>main</code> 函数</li><li>脚本终止时关闭数据库连接</li></ul><p>在 <code>main</code> 函数中，添加以下查询，从数据库中读取所有用户记录并打印结果：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... you will write your Prisma Client queries here</span>
  <span class="token keyword">const</span> allUsers <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>allUsers<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行脚本：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx tsx index.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将打印一个空数组，因为数据库中还没有用户记录：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="写入数据" tabindex="-1"><a class="header-anchor" href="#写入数据"><span>写入数据</span></a></h3><p><code>findMany</code> 查询只能从数据库中读取数据（尽管它仍然是空的）。接下来可以向 <code>Post</code> 表和 <code>User</code> 表中写入新记录。</p><p>调整 <code>main</code> 函数，向数据库发送创建查询：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span>
      email<span class="token operator">:</span> <span class="token string">&#39;alice@prisma.io&#39;</span><span class="token punctuation">,</span>
      posts<span class="token operator">:</span> <span class="token punctuation">{</span>
        create<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Hello World&#39;</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      profile<span class="token operator">:</span> <span class="token punctuation">{</span>
        create<span class="token operator">:</span> <span class="token punctuation">{</span> bio<span class="token operator">:</span> <span class="token string">&#39;I like turtles&#39;</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> allUsers <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    include<span class="token operator">:</span> <span class="token punctuation">{</span>
      posts<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      profile<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>allUsers<span class="token punctuation">,</span> <span class="token punctuation">{</span> depth<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14)),s("p",null,[n[25]||(n[25]=a("这段代码使用 ")),s("a",y,[n[23]||(n[23]=a("嵌套写查询")),t(e)]),n[26]||(n[26]=a(" 创建了一条新的用户记录以及新的帖子和简介记录。用户记录分别通过 ")),n[27]||(n[27]=s("code",null,"Post.author ↔ User.posts",-1)),n[28]||(n[28]=a(" 和 ")),n[29]||(n[29]=s("code",null,"Profile.user ↔ User.profile",-1)),n[30]||(n[30]=a(" 关系字段与其他两条记录创建 ")),s("a",w,[n[24]||(n[24]=a("关系")),t(e)]),n[31]||(n[31]=a("。"))]),s("p",null,[n[33]||(n[33]=a("请注意，您向 ")),n[34]||(n[34]=s("code",null,"findMany",-1)),n[35]||(n[35]=a(" 传递了 ")),s("a",x,[n[32]||(n[32]=s("code",null,"include",-1)),t(e)]),n[36]||(n[36]=a(" 选项，该选项告诉 Prisma 客户端在返回的用户对象中包含 ")),n[37]||(n[37]=s("code",null,"posts",-1)),n[38]||(n[38]=a(" 和 ")),n[39]||(n[39]=s("code",null,"profile",-1)),n[40]||(n[40]=a(" 关系。"))]),n[49]||(n[49]=i(`<p>运行脚本：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx tsx index.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将打印一个包含新创建的用户的数组：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    email: <span class="token string">&#39;alice@prisma.io&#39;</span>,
    id: <span class="token number">1</span>,
    name: <span class="token string">&#39;Alice&#39;</span>,
    posts: <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        content: null,
        createdAt: <span class="token number">2020</span>-03-21T16:45:01.246Z,
        updatedAt: <span class="token number">2020</span>-03-21T16:45:01.246Z,
        id: <span class="token number">1</span>,
        published: false,
        title: <span class="token string">&#39;Hello World&#39;</span>,
        authorId: <span class="token number">1</span>,
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>,
    profile: <span class="token punctuation">{</span>
      bio: <span class="token string">&#39;I like turtles&#39;</span>,
      id: <span class="token number">1</span>,
      userId: <span class="token number">1</span>,
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 query 向 <code>User</code> 和 <code>Post</code> 表中写入了新记录：</p><p>User</p><table><thead><tr><th>id</th><th>email</th><th>name</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:alice@prisma.io">alice@prisma.io</a></td><td>Alice</td></tr></tbody></table><p>Post</p><table><thead><tr><th>id</th><th>createdAt</th><th>updatedAt</th><th>title</th><th>content</th><th>published</th><th>authorId</th></tr></thead><tbody><tr><td>1</td><td>2020-03-21T16:45:01.246Z</td><td>2020-03-21T16:45:01.246Z</td><td>Hello World</td><td>null</td><td>false</td><td>1</td></tr></tbody></table><p>Profile</p><table><thead><tr><th>id</th><th>bio</th><th>userId</th></tr></thead><tbody><tr><td>1</td><td>I like turtles</td><td>1</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你可以通过 <code>npx prisma studio</code> 启动 Prisma Studio，查看数据库中的数据。</p></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过以上步骤，你已经了解了如何使用 Prisma 在 Node.js 和 Typescript 项目中连接数据库、查询数据和写入数据，并使用 Prisma Studio 查看数据库中的数据。</p>`,14))])}const S=l(d,[["render",P],["__file","01-quick-start.html.vue"]]),A=JSON.parse('{"path":"/backend/node/prisma/01-quick-start.html","title":"Prisma 入门","lang":"zh-CN","frontmatter":{"title":"Prisma 入门","date":"2024-12-17T00:00:00.000Z","icon":"STARTUP","category":["node"],"tag":["prisma","ORM"],"description":"以关系型数据库 Mysql 为例，介绍 Prisma 在 Node.js 和 Typescript 项目中的安装和使用。 前置条件 安装 Node.js 运行 Mysql 注 更多系统要求请参考 Prisma 系统要求。 确保拥有 数据库连接 url。 安装项目 创建项目目录： 初始化 Typescript 项目并安装 Prisma CLI： 这会创建...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/backend/node/prisma/01-quick-start.html"}],["meta",{"property":"og:title","content":"Prisma 入门"}],["meta",{"property":"og:description","content":"以关系型数据库 Mysql 为例，介绍 Prisma 在 Node.js 和 Typescript 项目中的安装和使用。 前置条件 安装 Node.js 运行 Mysql 注 更多系统要求请参考 Prisma 系统要求。 确保拥有 数据库连接 url。 安装项目 创建项目目录： 初始化 Typescript 项目并安装 Prisma CLI： 这会创建..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241217183854.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-17T10:57:18.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Prisma 入门"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"prisma"}],["meta",{"property":"article:tag","content":"ORM"}],["meta",{"property":"article:published_time","content":"2024-12-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-17T10:57:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Prisma 入门\\",\\"image\\":[\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241217183854.png\\"],\\"datePublished\\":\\"2024-12-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-17T10:57:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 前置条件","slug":"前置条件","link":"#前置条件","children":[]},{"level":2,"title":"2 安装项目","slug":"安装项目","link":"#安装项目","children":[]},{"level":2,"title":"3 连接数据库","slug":"连接数据库","link":"#连接数据库","children":[]},{"level":2,"title":"4 Prisma Migrate","slug":"prisma-migrate","link":"#prisma-migrate","children":[]},{"level":2,"title":"5 安装 Prisma Client","slug":"安装-prisma-client","link":"#安装-prisma-client","children":[]},{"level":2,"title":"6 操作数据库","slug":"操作数据库","link":"#操作数据库","children":[{"level":3,"title":"6.1 查询数据","slug":"查询数据","link":"#查询数据","children":[]},{"level":3,"title":"6.2 写入数据","slug":"写入数据","link":"#写入数据","children":[]}]},{"level":2,"title":"7 总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1734433038000,"updatedTime":1734433038000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":4.83,"words":1449},"filePathRelative":"backend/node/prisma/01-quick-start.md","localizedDate":"2024年12月17日","excerpt":"","autoDesc":true}');export{S as comp,A as data};
