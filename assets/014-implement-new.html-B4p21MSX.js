import{_ as s,c as a,e as t,o as e}from"./app-x8ymDRL-.js";const p={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<p><code>new</code> 操作符的实现过程：</p><ol><li>首先创建一个空对象；</li><li>将空对象的隐式原型 <code>[[prototype]]</code> 赋值为构造函数的 <code>prototype</code> 对象；</li><li>让构造函数的 <code>this</code> 指向这个空对象，执行构造函数的代码；</li><li>判断构造函数返回值的类型，如果是基本类型，则返回创建的对象，如果是引用类型，则返回这个引用类型。</li></ol><p>那么具体实现可以这么做：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">newOperator</span><span class="token punctuation">(</span><span class="token parameter">constructor<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> constructor <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;type error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建一个新对象，并将构造函数的 prototype 对象作为它的原型</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
  <span class="token comment">// 执行构造函数的代码</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token comment">// 判断返回值的类型</span>
  <span class="token keyword">let</span> flag <span class="token operator">=</span> res <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> flag <span class="token operator">?</span> res <span class="token operator">:</span> instance
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">newOperator</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">&#39;wang&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">// Person { name: &#39;wang&#39;, age: 18 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const l=s(p,[["render",o],["__file","014-implement-new.html.vue"]]),r=JSON.parse('{"path":"/frontend/basic/javascript/014-implement-new.html","title":"手写 new 操作符","lang":"zh-CN","frontmatter":{"title":"手写 new 操作符","date":"2022-08-23T00:00:00.000Z","icon":"code","category":["JavaScript"],"tag":["new","手写代码"],"description":"new 操作符的实现过程： 首先创建一个空对象； 将空对象的隐式原型 [[prototype]] 赋值为构造函数的 prototype 对象； 让构造函数的 this 指向这个空对象，执行构造函数的代码； 判断构造函数返回值的类型，如果是基本类型，则返回创建的对象，如果是引用类型，则返回这个引用类型。 那么具体实现可以这么做： ","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/014-implement-new.html"}],["meta",{"property":"og:title","content":"手写 new 操作符"}],["meta",{"property":"og:description","content":"new 操作符的实现过程： 首先创建一个空对象； 将空对象的隐式原型 [[prototype]] 赋值为构造函数的 prototype 对象； 让构造函数的 this 指向这个空对象，执行构造函数的代码； 判断构造函数返回值的类型，如果是基本类型，则返回创建的对象，如果是引用类型，则返回这个引用类型。 那么具体实现可以这么做： "}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"new"}],["meta",{"property":"article:tag","content":"手写代码"}],["meta",{"property":"article:published_time","content":"2022-08-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"手写 new 操作符\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[],"git":{"createdTime":1719473174000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2}]},"readingTime":{"minutes":0.8,"words":240},"filePathRelative":"frontend/basic/javascript/014-implement-new.md","localizedDate":"2022年8月23日","excerpt":"","autoDesc":true}');export{l as comp,r as data};
