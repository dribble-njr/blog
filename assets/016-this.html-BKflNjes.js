import{_ as i,c as l,e,a as s,d as a,b as t,w as u,r as o,o as r}from"./app-CMUwc0b2.js";const d={},k={class:"hint-container tip"},v={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout#%E5%85%B3%E4%BA%8Ethis%E7%9A%84%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developer.mozilla.org/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/6844903746984476686",target:"_blank",rel:"noopener noreferrer"};function g(h,n){const c=o("RouteLink"),p=o("ExternalLinkIcon");return r(),l("div",null,[n[13]||(n[13]=e("<p>在常见的编程语言中，几乎都有 <code>this</code> 关键字，但是 JavaScript 中的 <code>this</code> 和常见的面向对象语言中的 <code>this</code> 不太一样：</p><ul><li>常见的面向对象的编程语言中，如 Java、C++、Swift 等，<code>this</code> 通常只会出现在类的方法中，<code>this</code> 代表的是当前调用对象；</li><li>但是 JavaScript 中的 <code>this</code> 更加灵活，无论是它出现的位置还是代表的含义。</li></ul>",2)),s("p",null,[n[1]||(n[1]=a("在 ",-1)),t(c,{to:"/frontend/basic/javascript/0006%E3%80%81%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.html"},{default:u(()=>n[0]||(n[0]=[a("执行上下文",-1)])),_:1,__:[0]}),n[2]||(n[2]=a(" 中提到过：上下文中会包含 ",-1)),n[3]||(n[3]=s("code",null,"this",-1)),n[4]||(n[4]=a(" 指向，那么不同的上下文的 ",-1)),n[5]||(n[5]=s("code",null,"this",-1)),n[6]||(n[6]=a(" 指向肯定会不同。下面就来具体看看。",-1))]),n[14]||(n[14]=e(`<h2 id="全局上下文" tabindex="-1"><a class="header-anchor" href="#全局上下文"><span>全局上下文</span></a></h2><p>无论是否处于严格模式，全局上下文中的 <code>this</code> 都指向全局对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="函数上下文" tabindex="-1"><a class="header-anchor" href="#函数上下文"><span>函数上下文</span></a></h2><p>在函数上下文中，<code>this</code> 指向取决于函数的调用方式，一共分为四种。</p><ul><li>默认绑定</li><li>隐式绑定</li><li>显式绑定</li><li>new 绑定</li></ul><h3 id="默认绑定" tabindex="-1"><a class="header-anchor" href="#默认绑定"><span>默认绑定</span></a></h3><p>默认绑定即为独立函数调用，可以理解为没有绑定到某个对象上进行调用。</p><p>严格模式和非严格模式下 <code>this</code> 的指向会有所不同。</p><p>非严格模式下，独立调用函数的 <code>this</code> 指向为全局对象，在浏览器中为 <code>window</code>，node 中为 <code>global</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>

<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> window <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而严格模式下，独立调用函数的 <code>this</code> 指向为 <code>undefined</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&#39;use strict&#39;</span> <span class="token comment">// 这里是严格模式</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>

<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="隐式绑定-对象函数调用" tabindex="-1"><a class="header-anchor" href="#隐式绑定-对象函数调用"><span>隐式绑定（对象函数调用）</span></a></h3><p>通过对象发起的函数调用，<code>this</code> 会指向调用者本身。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 案例一</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;why&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> foo
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// obj 对象发起的函数调用，因此 this 指向 obj 对象</span>

<span class="token comment">// 案例二</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;wang&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">eating</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;在吃东西&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">eating</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// wang在吃东西</span>

<span class="token keyword">var</span> fn <span class="token operator">=</span> obj<span class="token punctuation">.</span>eating
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined在吃东西 -&gt; 没有对象调用，还是默认绑定</span>

<span class="token comment">// 案例三</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;obj1&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;obj2&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> obj1<span class="token punctuation">.</span>foo
<span class="token punctuation">}</span>

obj2<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// obj2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="显示绑定" tabindex="-1"><a class="header-anchor" href="#显示绑定"><span>显示绑定</span></a></h3><p>前面的隐式绑定存在一个缺点：对象内部必须有一个函数的引用，否则会报错。</p><p>如果我们不希望在 <strong>对象内部</strong> 包含这个函数的引用，同时又希望在这个对象上强制调用，那么应该怎么办？</p><p>JavaScript 提供了三个改变 this 指向的函数：<code>call()</code>、<code>apply()</code> 和 <code>bind()</code>。它们都能改变 this 指向，但是都有一些细微的区别。</p><h4 id="function-prototype-call" tabindex="-1"><a class="header-anchor" href="#function-prototype-call"><span><code>Function.prototype.call()</code></span></a></h4><p>语法：第一个参数为 this 值（可选，若省略或指定为 <code>null</code> 或 <code>undefined</code> 则为全局对象），后面为参数列表。<code>call()</code> 会立即调用该函数，因此返回值为该函数的返回值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">[</span><span class="token punctuation">,</span> arg2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数被调用了&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;obj&#39;</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 函数被调用了 { name: &#39;obj&#39; }</span>

<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;call&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token comment">// 90 [String: &#39;call&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="function-prototype-apply" tabindex="-1"><a class="header-anchor" href="#function-prototype-apply"><span><code>Function.prototype.apply()</code></span></a></h4><p>语法：第一个参数为 this 值（可选，若省略或指定为 <code>null</code> 或 <code>undefined</code> 则为全局对象），后面为参数列表。和 <code>call()</code> 一样，<code>apply()</code>会立即调用该函数，因此返回值为该函数的返回值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">aplly</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> <span class="token punctuation">[</span>argsArray<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数被调用了&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;obj&#39;</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 函数被调用了 { name: &#39;obj&#39; }</span>

<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">&#39;call&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 90 [String: &#39;call&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="function-prototype-bind" tabindex="-1"><a class="header-anchor" href="#function-prototype-bind"><span><code>Function.prototype.bind()</code></span></a></h4><p>有时候我们不希望函数立即被执行，那么可以使用 <code>bind()</code>，它和 <code>call()</code>、<code>apply()</code> 不同，<code>bind()</code> <strong>不会</strong>立即调用该函数，返回值为改变 this 指向之后的函数。</p><p><code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 this 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p><p>语法：第一个参数为 this 值（可选，若省略或指定为 <code>null</code> 或 <code>undefined</code> 则为全局对象），后面为参数列表。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">[</span><span class="token punctuation">,</span> arg2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> _bind <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">&#39;bind&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token function">_bind</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token comment">// 90 [String: &#39;bind&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="new-绑定" tabindex="-1"><a class="header-anchor" href="#new-绑定"><span>new 绑定</span></a></h3><p>使用 new 操作符调用构造函数生成对象时，会自动执行以下操作：</p><ol><li>创建一个全新的对象；</li><li>这个对象的 <code>[[proto]]</code> 属性会被赋值为构造函数的 <code>prototype</code> 属性；</li><li>构造函数内部的 this 被赋值为这个对象（<strong>new 绑定</strong>）;</li><li>执行构造函数内部的代码；</li><li>如果构造函数返回非空对象，则返回该对象；否则返回刚才创建的新对象。</li></ol><p>在这个过程中就会执行 new 绑定。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// Person { name: &#39;wang&#39;, sayName: [Function (anonymous)] }</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;wang&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级"><span>优先级</span></a></h2><p>如果一个函数应用了多个规则，那么它们的优先级谁更高？</p><ol><li><p>默认绑定</p><p>毫无疑问，优先级最低</p></li><li><p>显式绑定高于隐式绑定</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;obj&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 1.call/apply的显示绑定高于隐式绑定</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [String: &#39;abc&#39;]</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [String: &#39;abc&#39;]</span>

<span class="token comment">// 2.bind的优先级高于隐式绑定</span>
<span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [String: &#39;abc&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>new 绑定高于显示绑定</p><p>new 不能和 <code>call()</code>、<code>apply()</code> 一起使用。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// foo {}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>因此优先级是 new 绑定 &gt; 显示绑定(apply/call/bind) &gt; 隐式绑定(obj.foo()) &gt; 默认绑定(独立函数调用)。</p><h2 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数"><span>箭头函数</span></a></h2><p>上面所说的是普通函数的 this 指向，而在箭头函数中，this 根据外层作用域来决定。</p><p>那么它有什么应用场景呢？来看一个模拟网络请求的例子：</p>`,49)),s("div",k,[n[10]||(n[10]=s("p",{class:"hint-container-title"},"提示",-1)),s("p",null,[n[8]||(n[8]=s("code",null,"setTimeout()",-1)),n[9]||(n[9]=a(" 中的 this 关键字在非严格模式会指向 window (或全局)对象，严格模式下为 undefined。详见 ",-1)),s("a",v,[n[7]||(n[7]=a("window.setTimeout - Web API 接口参考 | MDN (mozilla.org)",-1)),t(p)])])]),n[15]||(n[15]=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">getData</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 发送网络请求, 将结果放到上面 data 属性中</span>
    <span class="token comment">// 在箭头函数之前的解决方案</span>
    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
      <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nba&#39;</span><span class="token punctuation">]</span>
      _this<span class="token punctuation">.</span>data <span class="token operator">=</span> result
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment">// [&quot;abc&quot;, &quot;cba&quot;, &quot;nba&quot;]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了箭头函数之后，就不必使用 <code>_this = this</code> 获取真正想要的 <code>this</code> 了：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// { data: [], getData: [Function: getData] }</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nba&#39;</span><span class="token punctuation">]</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> result
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2>`,4)),s("ul",null,[s("li",null,[s("a",m,[n[11]||(n[11]=a("MDN (mozilla.org)",-1)),t(p)])]),s("li",null,[s("a",b,[n[12]||(n[12]=a("面试官问：JS 的 this 指向 - 掘金 (juejin.cn)",-1)),t(p)])])])])}const y=i(d,[["render",g],["__file","016-this.html.vue"]]),j=JSON.parse('{"path":"/frontend/basic/javascript/016-this.html","title":"this 指向","lang":"zh-CN","frontmatter":{"title":"this 指向","icon":"this","date":"2022-04-22T00:00:00.000Z","category":["JavaScript"],"tag":["this"],"description":"在常见的编程语言中，几乎都有 this 关键字，但是 JavaScript 中的 this 和常见的面向对象语言中的 this 不太一样： 常见的面向对象的编程语言中，如 Java、C++、Swift 等，this 通常只会出现在类的方法中，this 代表的是当前调用对象； 但是 JavaScript 中的 this 更加灵活，无论是它出现的位置还是代...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/016-this.html"}],["meta",{"property":"og:title","content":"this 指向"}],["meta",{"property":"og:description","content":"在常见的编程语言中，几乎都有 this 关键字，但是 JavaScript 中的 this 和常见的面向对象语言中的 this 不太一样： 常见的面向对象的编程语言中，如 Java、C++、Swift 等，this 通常只会出现在类的方法中，this 代表的是当前调用对象； 但是 JavaScript 中的 this 更加灵活，无论是它出现的位置还是代..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"this"}],["meta",{"property":"article:published_time","content":"2022-04-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"this 指向\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 全局上下文","slug":"全局上下文","link":"#全局上下文","children":[]},{"level":2,"title":"2 函数上下文","slug":"函数上下文","link":"#函数上下文","children":[{"level":3,"title":"2.1 默认绑定","slug":"默认绑定","link":"#默认绑定","children":[]},{"level":3,"title":"2.2 隐式绑定（对象函数调用）","slug":"隐式绑定-对象函数调用","link":"#隐式绑定-对象函数调用","children":[]},{"level":3,"title":"2.3 显示绑定","slug":"显示绑定","link":"#显示绑定","children":[{"level":4,"title":"2.3.1 Function.prototype.call()","slug":"function-prototype-call","link":"#function-prototype-call","children":[]},{"level":4,"title":"2.3.2 Function.prototype.apply()","slug":"function-prototype-apply","link":"#function-prototype-apply","children":[]},{"level":4,"title":"2.3.3 Function.prototype.bind()","slug":"function-prototype-bind","link":"#function-prototype-bind","children":[]}]},{"level":3,"title":"2.4 new 绑定","slug":"new-绑定","link":"#new-绑定","children":[]}]},{"level":2,"title":"3 优先级","slug":"优先级","link":"#优先级","children":[]},{"level":2,"title":"4 箭头函数","slug":"箭头函数","link":"#箭头函数","children":[]},{"level":2,"title":"5 参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1723018767000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2}]},"readingTime":{"minutes":5.34,"words":1601},"filePathRelative":"frontend/basic/javascript/016-this.md","localizedDate":"2022年4月22日","excerpt":"","autoDesc":true}');export{y as comp,j as data};
