import{_ as l,c as s,e as a,a as i,d as t,b as r,r as o,o as d}from"./app-CMUwc0b2.js";const p={},c={href:"https://wproxy.org/whistle/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://wproxy.org/whistle/webui/https.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/liriliri/eruda",target:"_blank",rel:"noopener noreferrer"};function g(u,e){const n=o("ExternalLinkIcon");return d(),s("div",null,[e[10]||(e[10]=a('<p>在前端开发中移动端开发技能必不可少。当我们遇到类似于这样的问题：</p><ul><li>移动端 <code>Canvas</code> 渲染失败</li><li>微信获取 <code>openId</code> 回调页不匹配</li><li>微信浏览器文件上传失败</li><li>支付宝，微信 <code>H5</code> 支付域名校验不匹配</li><li>生产环境 BUG，测试环境无法复现</li><li>当后端接口启用 <code>cors</code> 跨域时，本地环境无法访问</li></ul><p><code>Chrome</code> 模拟器和微信开发者工具等都无法完美复现我们遇到的问题，这时候我们需要用到 <code>whistle</code> 来实现真机调试</p><h2 id="whistle" tabindex="-1"><a class="header-anchor" href="#whistle"><span>Whistle</span></a></h2>',4)),i("p",null,[i("a",c,[e[0]||(e[0]=t("whistle",-1)),r(n)]),e[1]||(e[1]=t("（读音[ˈwɪsəl]，拼音[wēisǒu]）基于 Node 实现的跨平台 web 调试代理工具。",-1))]),e[11]||(e[11]=a(`<p>它的作用可以理解为用 Node 开一个代理服务器，将我们需要调试的设备代理到 <code>whistle</code> 后，由 <code>whistle</code> 进行代理请求。同时 <code>whistle</code> 支持类似于 hosts 的转发规则，我们可以通过正则或者内置的一些指令对我们需要进行代理的域名进行转发，添加插件等。</p><h3 id="安装启动" tabindex="-1"><a class="header-anchor" href="#安装启动"><span>安装启动</span></a></h3><p>安装 <code>whistle</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> whistle <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动 <code>whistle</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>w2 start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动完成后，默认会在 <code>localhost:8899</code> 端口监听。</p><h3 id="设置代理" tabindex="-1"><a class="header-anchor" href="#设置代理"><span>设置代理</span></a></h3><h4 id="移动端" tabindex="-1"><a class="header-anchor" href="#移动端"><span>移动端</span></a></h4><p>电脑与手机连接同一 wifi，在手机端 wifi 中设置代理为手动，输入代理 ip（启动 <code>whistle</code> 后在控制台中打印的局域网 ip），端口号为 <code>8899</code>。</p><p>保存后移动端则已经设置好代理，在手机浏览器中访问互联网，即可以在 <code>whistle</code> 控制台中抓取到相应的网络请求。</p><h4 id="pc-端" tabindex="-1"><a class="header-anchor" href="#pc-端"><span>PC 端</span></a></h4><p>PC 端有时也需要通过 <code>whistle</code> 控制台设置代理修改请求信息或者配置 <code>source map</code> 文件，下面介绍如何使用 <code>Proxy switchyOmega</code> 插件设置代理。</p><p>在扩展商店中搜索安装 <code>Proxy switchyOmega</code> 插件，下载完成后，默认会有一个 <code>proxy</code> 的情景模式，设置代理服务器为 <code>127.0.0.1</code>，端口号为 <code>8899</code> 保存并应用选项。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240729163103.png" alt="设置情景模式" tabindex="0" loading="lazy"><figcaption>设置情景模式</figcaption></figure><p>这里还推荐修改一个配置，将默认配置改为系统代理，避免日常使用时被代理到 <code>whistle</code>，无法科学上网。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240729163028.png" alt="修改默认配置" tabindex="0" loading="lazy"><figcaption>修改默认配置</figcaption></figure><h3 id="安装证书" tabindex="-1"><a class="header-anchor" href="#安装证书"><span>安装证书</span></a></h3>`,18)),i("p",null,[e[3]||(e[3]=t("参考 ",-1)),i("a",h,[e[2]||(e[2]=t("官方文档",-1)),r(n)]),e[4]||(e[4]=t(" 即可。",-1))]),e[12]||(e[12]=a(`<h2 id="真机调试" tabindex="-1"><a class="header-anchor" href="#真机调试"><span>真机调试</span></a></h2><p>打开 <code>whistle</code> 控制台，左侧有个 <code>Rules</code>，在这里面可以进行一些跳转规则的分组，配置。</p><h3 id="resmerge" tabindex="-1"><a class="header-anchor" href="#resmerge"><span>resMerge</span></a></h3><p>由于大部分 webapp 是嵌入到 webview 中，因此需要更改响应结果中的 <code>webAppUrl</code> 路径。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>https://xxxx resMerge://(webAppUrl=https://localhost:3000/index.html?isWebApp=true)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="tpl" tabindex="-1"><a class="header-anchor" href="#tpl"><span>tpl</span></a></h3><p>tpl 基本功能跟 file 一样可以做本地替换，但 tpl 内置了一个简单的模板引擎，可以把文件内容里面 <code>{name}</code> 替换请求参数对应的字段(如果不存在对应的自动则不会进行替换)，一般可用于 mock jsonp 的请求。</p><p>在 <code>values</code> 面板中创建一个文件，名字为 <code>mockConfig.json</code>，内容如下：</p><p>可以直接修改返回结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>https://xxxx tpl://{mockConfig.json}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="注入-eruda" tabindex="-1"><a class="header-anchor" href="#注入-eruda"><span>注入 eruda</span></a></h3>`,11)),i("p",null,[e[6]||(e[6]=t("安装 ",-1)),e[7]||(e[7]=i("code",null,"whistle.inspect",-1)),e[8]||(e[8]=t(" 插件，该插件即成了 ",-1)),i("a",m,[e[5]||(e[5]=t("eruda",-1)),r(n)]),e[9]||(e[9]=t(" 等调试工具，用来在移动端页面上模拟 Chrome 开发者工具功能的模块。",-1))]),e[13]||(e[13]=a(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>w2 i whistle.inspect
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>https://localhost:3000/index.html whistle.inspect://eruda disable://cache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个配置的作用是当访问到 <code>localhost:3000</code> 时，页面会自动注入 <code>eruda</code> 调试工具。</p><h2 id="chrome-inspect" tabindex="-1"><a class="header-anchor" href="#chrome-inspect"><span>Chrome inspect</span></a></h2><p>有些时候，使用 <code>whistle</code> 注入调试工具的效果并不是很好，因此我们可以使用 Chrome inspect 来替代。</p><h3 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h3><p>需要的工具：</p><ul><li>PC 安装 Chrome 浏览器</li><li>安卓手机</li><li>数据线</li></ul><h3 id="操作步骤" tabindex="-1"><a class="header-anchor" href="#操作步骤"><span>操作步骤</span></a></h3><p>打开手机开发者选项，允许 USB 调试。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>不同安卓设备打开方式不同，根据品牌谷歌搜索打开方式。</p></div><p>谷歌浏览器输入 <code>chrome://inspect/</code> 打开调试工具，点击 <code>inspect</code> 按钮即可调试网页。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240821141307.png" alt="inspect" tabindex="0" loading="lazy"><figcaption>inspect</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><p>应该只能调试 chrome 内核的浏览器。</p></div>`,15))])}const w=l(p,[["render",g],["__file","017-whistle-debug-real-phone.html.vue"]]),v=JSON.parse('{"path":"/frontend/practice/017-whistle-debug-real-phone.html","title":"whistle 调试真机","lang":"zh-CN","frontmatter":{"title":"whistle 调试真机","date":"2024-07-29T00:00:00.000Z","icon":"debug","category":["practice"],"tag":["debug"],"description":"在前端开发中移动端开发技能必不可少。当我们遇到类似于这样的问题： 移动端 Canvas 渲染失败 微信获取 openId 回调页不匹配 微信浏览器文件上传失败 支付宝，微信 H5 支付域名校验不匹配 生产环境 BUG，测试环境无法复现 当后端接口启用 cors 跨域时，本地环境无法访问 Chrome 模拟器和微信开发者工具等都无法完美复现我们遇到的问题...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/practice/017-whistle-debug-real-phone.html"}],["meta",{"property":"og:title","content":"whistle 调试真机"}],["meta",{"property":"og:description","content":"在前端开发中移动端开发技能必不可少。当我们遇到类似于这样的问题： 移动端 Canvas 渲染失败 微信获取 openId 回调页不匹配 微信浏览器文件上传失败 支付宝，微信 H5 支付域名校验不匹配 生产环境 BUG，测试环境无法复现 当后端接口启用 cors 跨域时，本地环境无法访问 Chrome 模拟器和微信开发者工具等都无法完美复现我们遇到的问题..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240729163103.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"whistle 调试真机"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"debug"}],["meta",{"property":"article:published_time","content":"2024-07-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"whistle 调试真机\\",\\"image\\":[\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240729163103.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240729163028.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240821141307.png\\"],\\"datePublished\\":\\"2024-07-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 Whistle","slug":"whistle","link":"#whistle","children":[{"level":3,"title":"1.1 安装启动","slug":"安装启动","link":"#安装启动","children":[]},{"level":3,"title":"1.2 设置代理","slug":"设置代理","link":"#设置代理","children":[{"level":4,"title":"1.2.1 移动端","slug":"移动端","link":"#移动端","children":[]},{"level":4,"title":"1.2.2 PC 端","slug":"pc-端","link":"#pc-端","children":[]}]},{"level":3,"title":"1.3 安装证书","slug":"安装证书","link":"#安装证书","children":[]}]},{"level":2,"title":"2 真机调试","slug":"真机调试","link":"#真机调试","children":[{"level":3,"title":"2.1 resMerge","slug":"resmerge","link":"#resmerge","children":[]},{"level":3,"title":"2.2 tpl","slug":"tpl","link":"#tpl","children":[]},{"level":3,"title":"2.3 注入 eruda","slug":"注入-eruda","link":"#注入-eruda","children":[]}]},{"level":2,"title":"3 Chrome inspect","slug":"chrome-inspect","link":"#chrome-inspect","children":[{"level":3,"title":"3.1 准备工作","slug":"准备工作","link":"#准备工作","children":[]},{"level":3,"title":"3.2 操作步骤","slug":"操作步骤","link":"#操作步骤","children":[]}]}],"git":{"createdTime":1722242800000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":4}]},"readingTime":{"minutes":3.38,"words":1015},"filePathRelative":"frontend/practice/017-whistle-debug-real-phone.md","localizedDate":"2024年7月29日","excerpt":"","autoDesc":true}');export{w as comp,v as data};
