import{_ as p,c,a,e as o,d as s,b as e,r as i,o as l}from"./app-CMUwc0b2.js";const r={},u={href:"https://github.com/microsoft/monaco-editor",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/suren-atoyan/monaco-react",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.npmjs.com/package/monaco-editor-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/rspack-contrib/rspack-examples/blob/main/rspack/monaco-editor-ts-react/src/components/Editor.tsx",target:"_blank",rel:"noopener noreferrer"},v={class:"hint-container warning"},b={href:"https://rspack.dev/config/output#outputpublicpath",target:"_blank",rel:"noopener noreferrer"};function g(y,n){const t=i("ExternalLinkIcon");return l(),c("div",null,[a("p",null,[a("a",u,[n[0]||(n[0]=s("Monaco Editor",-1)),e(t)]),n[1]||(n[1]=s(" 是由微软开发的开源代码编辑器，使用于 VS Code。然而他本身是用 JavaScript/TypeScript 编写的一个独立库，提供了丰富的 API 来实现代码编辑器的功能。因此无法直接在 React 中使用。",-1))]),a("p",null,[a("a",d,[n[2]||(n[2]=s("@monaco-editor/react",-1)),e(t)]),n[3]||(n[3]=s(" 这个库是对 monaco-editor 的 React 封装，使得你在 React 项目中更方便地使用 Monaco Editor。",-1))]),n[17]||(n[17]=o(`<h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h2><p>Monaco Editor (<code>monaco-editor</code>)：提供了编辑器的核心功能，包括代码高亮、自动补全、语法检查等。它是独立于框架的，可以在任何 JavaScript 环境中使用。它提供了一个全局的 monaco 对象，通过这个对象，你可以调用各种 API 来配置和操作编辑器。</p><p>React 封装 (<code>@monaco-editor/react</code>)： 为了更好地在 React 环境中使用 Monaco Editor，<code>@monaco-editor/react</code> 通过封装组件的方式，将 <code>monaco-editor</code> 的 API 暴露给 React 用户。这个库管理了编辑器的生命周期和状态，使得 Monaco Editor 能够很好地与 React 的组件生命周期和状态管理系统配合使用。</p><p>具体来说，<code>@monaco-editor/react</code> 主要做了以下几件事情：</p><ul><li>组件化封装：提供了一个 <code>Editor</code> 组件，供 React 开发者使用。你可以通过 JSX 的方式直接在 React 组件中嵌入 Monaco Editor。</li><li>API 接口简化：提供了一些简单的 props 来配置编辑器，而不需要直接调用 <code>monaco</code> 对象。</li><li>生命周期管理：处理了编辑器的创建、更新和销毁，使得它与 React 的生命周期方法（如 <code>componentDidMount</code>、<code>componentWillUnmount</code>）配合良好。</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>在 React 中使用 <code>@monaco-editor/react</code> 时，你不需要手动管理 monaco 对象的创建和销毁，只需要通过 <code>Editor</code> 组件来设置语言、主题、默认代码等配置项。比如：</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> Editor <span class="token keyword">from</span> <span class="token string">&#39;@monaco-editor/react&#39;</span>

<span class="token keyword">function</span> <span class="token function">MyEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Editor</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>90vh<span class="token punctuation">&quot;</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vs-dark<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>// Start coding here<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> MyEditor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你需要进行更复杂的定制化操作，比如加载自定义语言或主题，<code>@monaco-editor/react</code> 也提供了 <code>beforeMount</code> 和 <code>onMount</code> 回调函数，让你可以直接访问 <code>monaco</code> 对象来进行高级配置：</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Editor</span></span>
  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>90vh<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vs-dark<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">beforeMount</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>monaco<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里可以对 monaco 进行配置，例如定义自定义的语言或主题</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">onMount</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>editor<span class="token punctuation">,</span> monaco<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里可以操作 editor 和 monaco 对象，例如注册快捷键等</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loader-config" tabindex="-1"><a class="header-anchor" href="#loader-config"><span>loader-config</span></a></h2><p><code>@monaco-editor/react</code> 的 loader 会默认从 cdn 中加载，这会影响中国用户的访问速度，因此需要修改 loader 的默认配置。</p><h3 id="使用-monaco-editor-包" tabindex="-1"><a class="header-anchor" href="#使用-monaco-editor-包"><span>使用 monaco-editor 包</span></a></h3>`,13)),a("p",null,[n[5]||(n[5]=s("如果项目使用 ",-1)),n[6]||(n[6]=a("code",null,"webpack",-1)),n[7]||(n[7]=s(" 进行打包，可以通过 ",-1)),a("a",k,[n[4]||(n[4]=s("monaco-editor-webpack-plugin",-1)),e(t)]),n[8]||(n[8]=s(" 来进行配置。该插件自动处理编辑器了相关的文件。",-1))]),n[18]||(n[18]=o(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> monaco <span class="token keyword">from</span> <span class="token string">&#39;monaco-editor&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@monaco-editor/react&#39;</span>

loader<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> monaco <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于其他打包工具，官方提供了 Vite 示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@monaco-editor/react&#39;</span>

<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> monaco <span class="token keyword">from</span> <span class="token string">&#39;monaco-editor&#39;</span>
<span class="token keyword">import</span> editorWorker <span class="token keyword">from</span> <span class="token string">&#39;monaco-editor/esm/vs/editor/editor.worker?worker&#39;</span>
<span class="token keyword">import</span> jsonWorker <span class="token keyword">from</span> <span class="token string">&#39;monaco-editor/esm/vs/language/json/json.worker?worker&#39;</span>
<span class="token keyword">import</span> cssWorker <span class="token keyword">from</span> <span class="token string">&#39;monaco-editor/esm/vs/language/css/css.worker?worker&#39;</span>
<span class="token keyword">import</span> htmlWorker <span class="token keyword">from</span> <span class="token string">&#39;monaco-editor/esm/vs/language/html/html.worker?worker&#39;</span>
<span class="token keyword">import</span> tsWorker <span class="token keyword">from</span> <span class="token string">&#39;monaco-editor/esm/vs/language/typescript/ts.worker?worker&#39;</span>

self<span class="token punctuation">.</span>MonacoEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">getWorker</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> label</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jsonWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">&#39;css&#39;</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">&#39;scss&#39;</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">&#39;less&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">cssWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">&#39;html&#39;</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">&#39;handlebars&#39;</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">&#39;razor&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">htmlWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">&#39;typescript&#39;</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">&#39;javascript&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">tsWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">editorWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

loader<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> monaco <span class="token punctuation">}</span><span class="token punctuation">)</span>

loader<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我使用了 Rspack 来打包，官方说明对 <code>monaco-editor-webpack-plugin</code> 插件进行了兼容，但是不知道是由于我 Rspack 版本问题，导致报错，因此实验了一种更加稳定的方式如下。</p>`,4)),a("p",null,[n[10]||(n[10]=s("Rspack 配置与 Vite 一致，详细见 ",-1)),a("a",m,[n[9]||(n[9]=s("Rspack demo monaco-editor-react",-1)),e(t)]),n[11]||(n[11]=s("。",-1))]),a("div",v,[n[15]||(n[15]=a("p",{class:"hint-container-title"},"注意",-1)),n[16]||(n[16]=a("p",null,[s("需要注意的是 "),a("code",null,"publicPath"),s(" 需要设置为 "),a("code",null,"'auto'"),s("，否则 web worker 内引用的文件会添加重复路径。")],-1)),a("p",null,[n[13]||(n[13]=s("See ",-1)),a("a",b,[n[12]||(n[12]=s("Rspack output.publicPath",-1)),e(t)]),n[14]||(n[14]=s("。",-1))])]),n[19]||(n[19]=o(`<h3 id="本地路径" tabindex="-1"><a class="header-anchor" href="#本地路径"><span><s>本地路径</s></span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>该方式会在 public 中引入大量文件，不太优雅。</p></div><p><code>monaco-editor</code> 中提供了一些打包后的文件，路径是 <code>monaco-editor/min/vs</code>，因此可以通过下载 npm 包并将文件移动至 <code>public</code> 文件夹，并自定义路径。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mv</span> node_modules/monaco-editor/min/vs public
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@monaco-editor/react&#39;</span>

<span class="token comment">// you can change the source of the monaco files</span>
loader<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">vs</span><span class="token operator">:</span> <span class="token string">&#39;./vs&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// you can configure the locales</span>
loader<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;vs/nls&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">availableLanguages</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;*&#39;</span><span class="token operator">:</span> <span class="token string">&#39;de&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// or</span>
loader<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">vs</span><span class="token operator">:</span> <span class="token string">&#39;./vs&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;vs/nls&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">availableLanguages</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;*&#39;</span><span class="token operator">:</span> <span class="token string">&#39;de&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5))])}const w=p(r,[["render",g],["__file","018-monaco-editor-react.html.vue"]]),h=JSON.parse('{"path":"/frontend/practice/018-monaco-editor-react.html","title":"monaco-editor/react","lang":"zh-CN","frontmatter":{"title":"monaco-editor/react","date":"2024-08-09T00:00:00.000Z","icon":"code","category":["practice"],"tag":["code editor"],"description":"Monaco Editor 是由微软开发的开源代码编辑器，使用于 VS Code。然而他本身是用 JavaScript/TypeScript 编写的一个独立库，提供了丰富的 API 来实现代码编辑器的功能。因此无法直接在 React 中使用。 @monaco-editor/react 这个库是对 monaco-editor 的 React 封装，使得你...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/practice/018-monaco-editor-react.html"}],["meta",{"property":"og:title","content":"monaco-editor/react"}],["meta",{"property":"og:description","content":"Monaco Editor 是由微软开发的开源代码编辑器，使用于 VS Code。然而他本身是用 JavaScript/TypeScript 编写的一个独立库，提供了丰富的 API 来实现代码编辑器的功能。因此无法直接在 React 中使用。 @monaco-editor/react 这个库是对 monaco-editor 的 React 封装，使得你..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-03T06:25:23.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"code editor"}],["meta",{"property":"article:published_time","content":"2024-08-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-03T06:25:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"monaco-editor/react\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-03T06:25:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":2,"title":"2 示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"3 loader-config","slug":"loader-config","link":"#loader-config","children":[{"level":3,"title":"3.1 使用 monaco-editor 包","slug":"使用-monaco-editor-包","link":"#使用-monaco-editor-包","children":[]},{"level":3,"title":"3.2 本地路径","slug":"本地路径","link":"#本地路径","children":[]}]}],"git":{"createdTime":1723201171000,"updatedTime":1733207123000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":5}]},"readingTime":{"minutes":3.52,"words":1055},"filePathRelative":"frontend/practice/018-monaco-editor-react.md","localizedDate":"2024年8月9日","excerpt":"","autoDesc":true}');export{w as comp,h as data};
