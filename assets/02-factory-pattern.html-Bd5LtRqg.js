import{_ as l,c as i,e as t,b as e,a as n,w as r,d as a,r as p,o as u}from"./app-Bq0FCg7h.js";const k={},d={href:"https://medium.com/javascript-scene/javascript-factory-functions-with-es6-4d224591a8b1",target:"_blank",rel:"noopener noreferrer"};function m(v,s){const o=p("CodeDemo"),c=p("ExternalLinkIcon");return u(),i("div",null,[s[3]||(s[3]=t(`<p>通过工厂模式，我们可以使用工厂函数来创建新对象。当一个函数在不使用 <code>new</code> 关键字的情况下返回一个新对象时，它就是一个工厂函数！</p><p>假设我们的应用程序需要许多用户。我们可以创建带有名、姓和电子邮件属性的新用户。工厂函数还会为新创建的对象添加一个 <code>fullName</code> 属性，并返回 <code>name</code> 和 <code>lastName</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> email <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  firstName<span class="token punctuation">,</span>
  lastName<span class="token punctuation">,</span>
  email<span class="token punctuation">,</span>
  <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完美！现在，我们可以通过调用 <code>createUser</code> 函数轻松创建多个用户。</p>`,4)),e(o,{id:"code-demo-10",type:"normal",code:"eJyrVsooyc1RslKyKbB71jn56Z6GFxuaX6yf+qxv+dOObU/7Nzybv/T5nO4X+yY/bd9lo19gF5OnpKOUVQzUkZyfV1yikFyUmliSGlqcWqRgq6BRrZCWWVRc4peYm6qjkJMIY6XmJmbmKNRqKtjaAdXE5CkgKQPx4CpBHLBiMCutNCcHJKyhqQDWpKBQlFpSWpSnkKBSXZKRWawHN6VWASoCM6k2AaShNiavVjMmLyYP4tZSoCsNgc5EuBnNMVYK6l75GXnqKI4CCrrkp0LEwG4DCmQBVTmk5KfqJefnqmNaYkTIksQ8qIF4LQGqwmpJfk6qXk5+ugbYP0BRdDEjoJhSLQCloa1m"},{default:r(()=>s[0]||(s[0]=[n("div",{class:"language-html line-numbers-mode","data-ext":"html","data-title":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("p")]),n("span",{class:"token punctuation"},">")]),a("打开调试控制台查看输出"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("p")]),n("span",{class:"token punctuation"},">")]),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token function-variable function"},"createUser"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[n("span",{class:"token punctuation"},"{"),a(" firstName"),n("span",{class:"token punctuation"},","),a(" lastName"),n("span",{class:"token punctuation"},","),a(" email "),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(`
  firstName`),n("span",{class:"token punctuation"},","),a(`
  lastName`),n("span",{class:"token punctuation"},","),a(`
  email`),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token function"},"fullName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),a("firstName"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"}," "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),a("lastName"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(`

`),n("span",{class:"token keyword"},"const"),a(" user1 "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token function"},"createUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"firstName"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'John'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token literal-property property"},"lastName"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'Doe'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token literal-property property"},"email"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'john@doe.com'"),a(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(`

`),n("span",{class:"token keyword"},"const"),a(" user2 "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token function"},"createUser"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"firstName"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'Jane'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token literal-property property"},"lastName"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'Doe'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token literal-property property"},"email"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'jane@doe.com'"),a(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("user1"),n("span",{class:"token punctuation"},")"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("user2"),n("span",{class:"token punctuation"},")"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),s[4]||(s[4]=t(`<p>如果我们要创建相对复杂且可配置的对象，工厂模式就会非常有用。可能发生的情况是，键和值的值取决于特定的环境或配置。使用工厂模式，我们可以轻松创建包含自定义键和值的新对象！</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createObjectFromArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> value
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">createObjectFromArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// { name: &quot;John&quot; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h2><p>当我们需要创建多个共享相同属性的较小对象时，工厂模式非常有用。工厂函数可以根据当前环境或用户特定配置轻松返回自定义对象。</p><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h2><p>在 JavaScript 中，工厂模式不过是一个不使用 <code>new</code> 关键字就能返回对象的函数。<strong>ES6 箭头函数</strong> 允许我们创建小型工厂函数，每次都隐式返回一个对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createDog</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> breed</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> breed <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过，在许多情况下，创建新实例比每次创建新对象更节省内存。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> email</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName
    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName
    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email
  <span class="token punctuation">}</span>

  <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;Doe&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;john@doe.com&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;Jane&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;Doe&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">&#39;jane@doe.com&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,10)),n("ul",null,[n("li",null,[n("a",d,[s[1]||(s[1]=a("JavaScript Factory Functions with ES6+")),e(c)]),s[2]||(s[2]=a(" - Eric Elliott"))])])])}const g=l(k,[["render",m],["__file","02-factory-pattern.html.vue"]]),y=JSON.parse('{"path":"/reading/patterns/vanilla/02-factory-pattern.html","title":"工厂模式","lang":"zh-CN","frontmatter":{"title":"工厂模式","date":"2024-02-04T00:00:00.000Z","icon":"Factory","author":"patterns","category":["reading"],"tag":["design pattern","vanilla","factory-pattern"],"description":"通过工厂模式，我们可以使用工厂函数来创建新对象。当一个函数在不使用 new 关键字的情况下返回一个新对象时，它就是一个工厂函数！ 假设我们的应用程序需要许多用户。我们可以创建带有名、姓和电子邮件属性的新用户。工厂函数还会为新创建的对象添加一个 fullName 属性，并返回 name 和 lastName。 完美！现在，我们可以通过调用 createU...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/02-factory-pattern.html"}],["meta",{"property":"og:title","content":"工厂模式"}],["meta",{"property":"og:description","content":"通过工厂模式，我们可以使用工厂函数来创建新对象。当一个函数在不使用 new 关键字的情况下返回一个新对象时，它就是一个工厂函数！ 假设我们的应用程序需要许多用户。我们可以创建带有名、姓和电子邮件属性的新用户。工厂函数还会为新创建的对象添加一个 fullName 属性，并返回 name 和 lastName。 完美！现在，我们可以通过调用 createU..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"patterns"}],["meta",{"property":"article:tag","content":"design pattern"}],["meta",{"property":"article:tag","content":"vanilla"}],["meta",{"property":"article:tag","content":"factory-pattern"}],["meta",{"property":"article:published_time","content":"2024-02-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工厂模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"patterns\\"}]}"]]},"headers":[{"level":2,"title":"1 优点","slug":"优点","link":"#优点","children":[]},{"level":2,"title":"2 缺点","slug":"缺点","link":"#缺点","children":[]},{"level":2,"title":"3 参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707280012000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":3}]},"readingTime":{"minutes":1.74,"words":521},"filePathRelative":"reading/patterns/vanilla/02-factory-pattern.md","localizedDate":"2024年2月4日","excerpt":"","autoDesc":true}');export{g as comp,y as data};
