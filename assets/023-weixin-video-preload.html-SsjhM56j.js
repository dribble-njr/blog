import{_ as a,c as e,e as s,o as t}from"./app-CMUwc0b2.js";const o={};function p(i,n){return t(),e("div",null,n[0]||(n[0]=[s(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>在 Web 项目中使用 <code>video.js</code> 播放视频时，通常我们会通过 <code>preload=&quot;metadata&quot;</code> 或 <code>preload=&quot;auto&quot;</code> 来提前加载视频元数据（<code>loadedmetadata</code> 事件）和首帧，以便显示封面或做一些视频时长计算。</p><p>然而，在 <strong>微信内置浏览器（尤其是 iOS 版）</strong> 中，视频的加载行为存在限制：</p><ul><li>即使设置了 <code>autoplay</code>、<code>muted</code>、<code>preload</code>，也<strong>不会自动触发 <code>loadedmetadata</code></strong>。</li><li>视频首帧也不会在未播放时渲染出来。</li><li>这些行为与 Chrome / Safari / Android 微信都有差异。</li></ul><hr><h2 id="原因分析" tabindex="-1"><a class="header-anchor" href="#原因分析"><span>原因分析</span></a></h2><p>这是微信内置浏览器的 <strong>自动播放和加载策略</strong> 导致的：</p><ul><li>iOS 微信要求用户与页面产生交互（如点击、触摸），才会允许调用 <code>video.play()</code> 或加载视频数据。</li><li>虽然 <code>muted</code> + <code>autoplay</code> 在多数移动浏览器能绕过这个限制，但在微信内核中并不完全适用。</li><li>结果就是，在没有用户交互前，视频的 <code>loadedmetadata</code> 事件不会触发，首帧也不会加载。</li></ul><hr><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><p>在 <strong>第一次用户交互时</strong>，主动调用 <code>video.load()</code>，这样可以在不真正播放视频的情况下，触发视频的加载和首帧渲染。</p><p>实现方式：</p><ol><li>判断当前是否在微信内置浏览器中。</li><li>如果是，监听 <code>touchstart</code> 事件（或 <code>click</code>，但移动端推荐 <code>touchstart</code>）。</li><li>在第一次触摸时调用 <code>player.load()</code>。</li></ol><hr><h2 id="实现代码" tabindex="-1"><a class="header-anchor" href="#实现代码"><span>实现代码</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 判断是否为微信内置浏览器</span>
<span class="token keyword">function</span> <span class="token function">isWeixin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">MicroMessenger</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 初始化逻辑</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isWeixin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
    <span class="token string">&#39;touchstart&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      player<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发视频加载，渲染首帧</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> once<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token comment">// 只执行一次</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16)]))}const c=a(o,[["render",p],["__file","023-weixin-video-preload.html.vue"]]),d=JSON.parse('{"path":"/frontend/practice/023-weixin-video-preload.html","title":"微信内置浏览器视频 preload 兼容性问题","lang":"zh-CN","frontmatter":{"title":"微信内置浏览器视频 preload 兼容性问题","date":"2025-08-15T00:00:00.000Z","description":"背景 在 Web 项目中使用 video.js 播放视频时，通常我们会通过 preload=\\"metadata\\" 或 preload=\\"auto\\" 来提前加载视频元数据（loadedmetadata 事件）和首帧，以便显示封面或做一些视频时长计算。 然而，在 微信内置浏览器（尤其是 iOS 版） 中，视频的加载行为存在限制： 即使设置了 autopla...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/practice/023-weixin-video-preload.html"}],["meta",{"property":"og:title","content":"微信内置浏览器视频 preload 兼容性问题"}],["meta",{"property":"og:description","content":"背景 在 Web 项目中使用 video.js 播放视频时，通常我们会通过 preload=\\"metadata\\" 或 preload=\\"auto\\" 来提前加载视频元数据（loadedmetadata 事件）和首帧，以便显示封面或做一些视频时长计算。 然而，在 微信内置浏览器（尤其是 iOS 版） 中，视频的加载行为存在限制： 即使设置了 autopla..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-15T08:49:38.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:published_time","content":"2025-08-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-15T08:49:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"微信内置浏览器视频 preload 兼容性问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-15T08:49:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"2 原因分析","slug":"原因分析","link":"#原因分析","children":[]},{"level":2,"title":"3 解决方案","slug":"解决方案","link":"#解决方案","children":[]},{"level":2,"title":"4 实现代码","slug":"实现代码","link":"#实现代码","children":[]}],"git":{"createdTime":1755247778000,"updatedTime":1755247778000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":1.41,"words":423},"filePathRelative":"frontend/practice/023-weixin-video-preload.md","localizedDate":"2025年8月15日","excerpt":"","autoDesc":true}');export{c as comp,d as data};
