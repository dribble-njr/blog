import{_ as s,c as a,e as t,o as e}from"./app-DjBUyNfp.js";const o={};function p(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h2 id="享元模式" tabindex="-1"><a class="header-anchor" href="#享元模式"><span>享元模式</span></a></h2><p>当我们创建大量对象时，我们可以使用享元模式来减少内存使用。</p><p>在我们的应用程序中，我们希望用户能够添加书籍。所有书籍都有 <code>title</code>、<code>author</code> 和 <code>isbn</code>！然而，一个图书馆通常不会只有一本书：它通常有同一本书的多本副本。</p><p>如果有多本完全相同的书，每次创建一个新的图书实例并不是很有用。相反，我们希望创建多个 <code>Book</code> 构造函数实例，代表一本书。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> isbn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title
    <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author
    <span class="token keyword">this</span><span class="token punctuation">.</span>isbn <span class="token operator">=</span> isbn
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一本书有相同的 ISBN 编号，因此是完全相同的图书类型，我们就不想创建一个全新的图书实例。相反，我们应该首先检查这本书是否已经存在。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">createBook</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> isbn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> existingBook <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>isbn<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>existingBook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> books<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>isbn<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果它尚未包含图书的 ISBN 编号，我们将创建一本新书，并将其 ISBN 编号添加到 <code>isbnNumbers</code> 集合中。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createBook</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> isbn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> existingBook <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>isbn<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>existingBook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> books<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>isbn<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> isbn<span class="token punctuation">)</span>
  books<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>isbn<span class="token punctuation">,</span> book<span class="token punctuation">)</span>

  <span class="token keyword">return</span> book
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createBook</code> 函数可以帮助我们创建一种图书的新实例。然而，图书馆通常包含同一本书的多个副本！让我们创建一个 <code>addBook</code> 函数，它允许我们添加同一本书的多个副本。它应该调用 <code>createBook</code> 函数，该函数要么返回一个新创建的图书实例，要么返回已经存在的实例。</p><p>为了记录副本总数，我们创建一个 <code>bookList</code> 数组，其中包含图书馆中的图书总数。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bookList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> <span class="token function-variable function">addBook</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> isbn<span class="token punctuation">,</span> availability<span class="token punctuation">,</span> sales</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token function">createBook</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> isbn<span class="token punctuation">)</span><span class="token punctuation">,</span>
    sales<span class="token punctuation">,</span>
    availability<span class="token punctuation">,</span>
    isbn
  <span class="token punctuation">}</span>

  bookList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span>
  <span class="token keyword">return</span> book
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完美！我们不必每次添加副本时都创建一个新的图书实例，而是可以有效地为特定副本使用已有的图书实例。让我们创建 3 本书的 5 个副本：《哈利-波特》、《杀死一只知更鸟》和《了不起的盖茨比》。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">addBook</span><span class="token punctuation">(</span><span class="token string">&#39;Harry Potter&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JK Rowling&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AB123&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token function">addBook</span><span class="token punctuation">(</span><span class="token string">&#39;Harry Potter&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JK Rowling&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AB123&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
<span class="token function">addBook</span><span class="token punctuation">(</span><span class="token string">&#39;To Kill a Mockingbird&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Harper Lee&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CD345&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token function">addBook</span><span class="token punctuation">(</span><span class="token string">&#39;To Kill a Mockingbird&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Harper Lee&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CD345&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token function">addBook</span><span class="token punctuation">(</span><span class="token string">&#39;The Great Gatsby&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F. Scott Fitzgerald&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EF567&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h2><p>享元模式是一种结构型设计模式，其核心思想是通过共享已经存在的对象来减少内存占用，从而提高性能。有两个特点：</p><ul><li>对象共享：避免重复创建相同状态的对象，节省内存。</li><li>不可变部分与可变部分分离：将对象分为共享的、不可变的部分（如 <code>title</code>、<code>author</code> 和 <code>isbn</code>）和非共享的、可变的部分（如 <code>availability</code> 和 <code>sales</code>）。</li></ul><p>上述代码体现了这两个特点：</p><p><code>Book</code> 类实例化了书籍的基本信息（<code>title</code>、<code>author</code>、<code>isbn</code>），并通过 <code>Map</code> 存储，确保同样的 <code>isbn</code> 只会创建一次。这部分相当于享元对象的内部状态（不可变且可以被多个实例共享）。</p><p><code>addBook</code> 函数添加了一些书籍的可变信息（<code>sales</code> 和 <code>availability</code>），这些信息属于享元对象的外部状态（每次使用时可以独立指定）。</p><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h2><ul><li>减少内存占用：避免了为每个新书籍对象重复创建相同的 <code>Book</code> 实例。如果书籍的 <code>isbn</code> 相同，那么不再创建新的实例，而是共享现有的对象。</li><li>提高性能：通过共享已有对象，减少对象的创建和销毁，特别是在大量数据处理的场景中能显著提高性能。</li><li>更好的管理：将不可变的数据与可变数据分开，代码逻辑更加清晰，易于维护。</li></ul><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h2><p>在本例中，由于 <code>title</code>、<code>author</code> 和 <code>isbn</code> 都是基本数据类型（字符串），享元模式带来的优化可能会非常有限，甚至没有明显的优势，原因如下：</p><ul><li>内存优化有限：由于字符串本身是不可变且通常由引擎优化处理，JavaScript 已经会对相同的字符串进行共享存储（类似于享元模式），这意味着手动实现的享元模式在这方面并没有太大的额外好处。</li><li>重复实例减少不明显：与对象不同，基本类型的重复实例在内存中通常不会像对象那样占用大量空间。因此，避免创建多个基本类型的实例不会有明显的内存节省。</li></ul><p>因此，享元模式适用于有大量公共内在属性的场景，如：粒子系统，在这种情况下，每个粒子都有一些共同的属性，如颜色、精灵图等。通过享元模式，我们可以共享这些属性，从而节省内存。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>实际上享元模式是共享一些内在的公共状态，而不是共享所有的状态。</p><p>在 JavaScript 中，我们可以通过原型继承轻松解决这个问题。</p><p>在享元模式中，虽然最后创建的对象数量和之前一样多，但会大量节省内存。在本例中可能没有体现出这个好处，但是如果共享的内在状态是对象，那么享元模式就可以发挥作用。</p></div>`,27)]))}const l=s(o,[["render",p],["__file","03-flyweight-pattern.html.vue"]]),u=JSON.parse('{"path":"/reading/patterns/vanilla/03-flyweight-pattern.html","title":"享元模式","lang":"zh-CN","frontmatter":{"title":"享元模式","date":"2024-09-18T00:00:00.000Z","icon":"flyweight","author":"patterns","category":["reading"],"tag":["design pattern","vanilla","flyweight-pattern"],"description":"享元模式 当我们创建大量对象时，我们可以使用享元模式来减少内存使用。 在我们的应用程序中，我们希望用户能够添加书籍。所有书籍都有 title、author 和 isbn！然而，一个图书馆通常不会只有一本书：它通常有同一本书的多本副本。 如果有多本完全相同的书，每次创建一个新的图书实例并不是很有用。相反，我们希望创建多个 Book 构造函数实例，代表一本...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/03-flyweight-pattern.html"}],["meta",{"property":"og:title","content":"享元模式"}],["meta",{"property":"og:description","content":"享元模式 当我们创建大量对象时，我们可以使用享元模式来减少内存使用。 在我们的应用程序中，我们希望用户能够添加书籍。所有书籍都有 title、author 和 isbn！然而，一个图书馆通常不会只有一本书：它通常有同一本书的多本副本。 如果有多本完全相同的书，每次创建一个新的图书实例并不是很有用。相反，我们希望创建多个 Book 构造函数实例，代表一本..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"patterns"}],["meta",{"property":"article:tag","content":"design pattern"}],["meta",{"property":"article:tag","content":"vanilla"}],["meta",{"property":"article:tag","content":"flyweight-pattern"}],["meta",{"property":"article:published_time","content":"2024-09-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"享元模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"patterns\\"}]}"]]},"headers":[{"level":2,"title":"1 享元模式","slug":"享元模式","link":"#享元模式","children":[]},{"level":2,"title":"2 特点","slug":"特点","link":"#特点","children":[]},{"level":2,"title":"3 优点","slug":"优点","link":"#优点","children":[]},{"level":2,"title":"4 适用场景","slug":"适用场景","link":"#适用场景","children":[]}],"git":{"createdTime":1726649150000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2}]},"readingTime":{"minutes":4.51,"words":1354},"filePathRelative":"reading/patterns/vanilla/03-flyweight-pattern.md","localizedDate":"2024年9月18日","excerpt":"","autoDesc":true}');export{l as comp,u as data};
