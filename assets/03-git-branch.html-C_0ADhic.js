import{_ as s,c as o,e as t,a as i,d as n,b as c,r,o as d}from"./app-HGC3Yy25.js";const l={},g={href:"https://git-scm.com/book/zh/v2/ch00/divergent_history",target:"_blank",rel:"noopener noreferrer"};function p(m,e){const a=r("ExternalLinkIcon");return d(),o("div",null,[e[9]||(e[9]=t(`<h2 id="分支简介" tabindex="-1"><a class="header-anchor" href="#分支简介"><span>分支简介</span></a></h2><p>Git 仓库中有五个对象：三个 <em>blob</em> 对象（保存着文件快照）、一个 <strong>树</strong> 对象 （记录着目录结构和 blob 对象索引）以及一个 <strong>提交</strong> 对象（包含着指向前述树对象的指针和所有提交信息）。</p><p>做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20231012172546292.png" alt="提交对象及其父对象" tabindex="0" loading="lazy"><figcaption>提交对象及其父对象</figcaption></figure><p>Git 的分支，其实本质上仅仅是指向提交对象的可变指针。 Git 的默认分支名字是 <code>master</code>。 在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 <code>master</code> 分支。 <code>master</code> 分支会在每次提交时自动向前移动。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20231012172739646.png" alt="分支及其提交历史" tabindex="0" loading="lazy"><figcaption>分支及其提交历史</figcaption></figure><h3 id="新建分支" tabindex="-1"><a class="header-anchor" href="#新建分支"><span>新建分支</span></a></h3><p>Git 在新建分支时创建了一个可以移动的新的指针。 比如，创建一个 testing 分支， 你需要使用 <code>git branch</code> 命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> branch testing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会在当前所在的提交对象上创建一个指针。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/two-branches.png" alt="两个指向相同提交历史的分支" tabindex="0" loading="lazy"><figcaption>两个指向相同提交历史的分支</figcaption></figure><p>Git 使用 Head 指针确定当前在哪一个分支上，指向当前所在的本地分支。在本例中，你仍然在 <code>master</code> 分支上。 因为 <code>git branch</code> 命令仅仅 <strong>创建</strong> 一个新分支，并不会自动切换到新分支中去。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/head-to-master.png" alt="HEAD 指向当前所在的分支" tabindex="0" loading="lazy"><figcaption>HEAD 指向当前所在的分支</figcaption></figure><h3 id="分支切换" tabindex="-1"><a class="header-anchor" href="#分支切换"><span>分支切换</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>新版本使用 <code>git switch</code> 进行分支切换。</p></div><p>要切换到一个已存在的分支，你需要使用 <code>git checkout</code> 命令。 我们现在切换到新创建的 <code>testing</code> 分支去：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout testing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样 <code>HEAD</code> 就指向 <code>testing</code> 分支了。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/head-to-testing.png" alt="HEAD 指向当前所在的分支。" tabindex="0" loading="lazy"><figcaption>HEAD 指向当前所在的分支。</figcaption></figure><p>现在不妨再提交一次：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">vim</span> test.rb
$ <span class="token function">git</span> commit <span class="token parameter variable">-a</span> <span class="token parameter variable">-m</span> <span class="token string">&#39;made a change&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/advance-testing-20231016151948599.png" alt="HEAD 分支随着提交操作自动向前移动" tabindex="0" loading="lazy"><figcaption>HEAD 分支随着提交操作自动向前移动</figcaption></figure><p>如图所示，你的 <code>testing</code> 分支向前移动了，但是 <code>master</code> 分支却没有，它仍然指向运行 <code>git checkout</code> 时所指的对象。 这就有意思了，现在我们切换回 <code>master</code> 分支看看：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/checkout-master.png" alt="检出时 HEAD 随之移动" tabindex="0" loading="lazy"><figcaption>检出时 HEAD 随之移动</figcaption></figure><p>这条命令做了两件事。 一是使 HEAD 指回 <code>master</code> 分支，二是将工作目录恢复成 <code>master</code> 分支所指向的快照内容。 也就是说，你现在做修改的话，项目将始于一个较旧的版本。 本质上来讲，这就是忽略 <code>testing</code> 分支所做的修改，以便于向另一个方向进行开发。</p><div class="hint-container tip"><p class="hint-container-title">分支新建与切换</p><p><code>git checkout -b branch_name</code> 可以快速创建新分支并切换到该分支上。</p></div><div class="hint-container tip"><p class="hint-container-title">分支切换会改变你工作目录中的文件</p><p>在切换分支时，一定要注意你工作目录里的文件会被改变。 如果是切换到一个较旧的分支，你的工作目录会恢复到该分支最后一次提交时的样子。 如果 Git 不能干净利落地完成这个任务，它将禁止切换分支。</p></div><p>我们不妨再稍微做些修改并提交：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ vim test.rb
$ git commit -a -m &#39;made other changes&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,30)),i("p",null,[e[1]||(e[1]=n("现在，这个项目的提交历史已经产生了分叉（参见 ")),i("a",g,[e[0]||(e[0]=n("项目分叉历史")),c(a)]),e[2]||(e[2]=n("）。 因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回 master 分支进行了另外一些工作。 上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。 而所有这些工作，你需要的命令只有 ")),e[3]||(e[3]=i("code",null,"branch",-1)),e[4]||(e[4]=n("、")),e[5]||(e[5]=i("code",null,"checkout",-1)),e[6]||(e[6]=n(" 和 ")),e[7]||(e[7]=i("code",null,"commit",-1)),e[8]||(e[8]=n("。"))]),e[10]||(e[10]=t(`<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/advance-master.png" alt="项目分叉历史。" tabindex="0" loading="lazy"><figcaption>项目分叉历史。</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），<br> 如此的简单能不快吗？</p></div><h2 id="分支合并" tabindex="-1"><a class="header-anchor" href="#分支合并"><span>分支合并</span></a></h2><p>让我们来看一个简单的分支新建与分支合并的例子，实际工作中你可能会用到类似的工作流。 你将经历如下步骤：</p><ol><li>开发某个网站。</li><li>为实现某个新的用户需求，创建一个分支。</li><li>在这个分支上开展工作。</li></ol><p>正在此时，你突然接到一个电话说有个很严重的问题需要紧急修补。 你将按照如下方式来处理：</p><ol><li>切换到你的线上分支（production branch）。</li><li>为这个紧急任务新建一个分支，并在其中修复它。</li><li>在测试通过之后，切换回线上分支，然后合并这个修补分支，最后将改动推送到线上分支。</li><li>切换回你最初工作的分支上，继续工作。</li></ol><h3 id="新建分支-1" tabindex="-1"><a class="header-anchor" href="#新建分支-1"><span>新建分支</span></a></h3><p>首先，我们假设你正在你的项目上工作，并且在 <code>master</code> 分支上已经有了一些提交。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-1.png" alt="一个简单的提交历史。" tabindex="0" loading="lazy"><figcaption>一个简单的提交历史。</figcaption></figure><p>现在，你已经决定要解决你的公司使用的问题追踪系统中的 #53 问题。 想要新建一个分支并同时切换到那个分支上，你可以运行一个带有 <code>-b</code> 参数的 <code>git checkout</code> 命令：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout -b iss53
Switched to a new branch &quot;iss53&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它是下面两条命令的简写：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git branch iss53
$ git checkout iss53
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-2.png" alt="创建一个新分支指针" tabindex="0" loading="lazy"><figcaption>创建一个新分支指针</figcaption></figure><p>你继续在 #53 问题上工作，并且做了一些提交。 在此过程中，<code>iss53</code> 分支在不断的向前推进，因为你已经检出到该分支 （也就是说，你的 <code>HEAD</code> 指针指向了 <code>iss53</code> 分支）</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ vim index.html
$ git commit -a -m &#39;added a new footer [issue 53]&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-3.png" alt=" 分支随着工作的进展向前推进。" tabindex="0" loading="lazy"><figcaption><code>iss53</code> 分支随着工作的进展向前推进。</figcaption></figure><p>现在你接到那个电话，有个紧急问题等待你来解决。有了 Git 的帮助，现在只需要切换回 <code>master</code> 分支。在切换分支之前，需要提交一个 <code>commit</code> <strong>保持干净的工作区</strong>。</p><p>现在，我们假设你已经把你的修改全部提交了，这时你可以切换回 <code>master</code> 分支了：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout master
Switched to branch &#39;master&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候，你的工作目录和你在开始 #53 问题之前一模一样，现在你可以专心修复紧急问题了。建立一个 <code>hotfix</code> 分支，在该分支上工作直到问题解决：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout -b hotfix
Switched to a new branch &#39;hotfix&#39;
$ vim index.html
$ git commit -a -m &#39;fixed the broken email address&#39;
[hotfix 1fb7853] fixed the broken email address
 1 file changed, 2 insertions(+)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-4.png" alt="基于  分支的紧急问题分支（hotfix branch）。" tabindex="0" loading="lazy"><figcaption>基于 <code>master</code> 分支的紧急问题分支（hotfix branch）。</figcaption></figure><p>你可以运行你的测试，确保你的修改是正确的，然后将 <code>hotfix</code> 分支合并回你的 <code>master</code> 分支来部署到线上。 你可以使用 <code>git merge</code> 命令来达到上述目的：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在合并的时候，你应该注意到了「快进（fast-forward）」这个词。</p><p>由于你想要合并的分支 <code>hotfix</code> 所指向的提交 <code>C4</code> 是你所在的提交 <code>C2</code> 的直接后继， 因此 Git 会直接将指针向前移动。换句话说，当你试图合并两个分支时， 如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候， 只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有需要解决的分歧——这就叫做「快进（fast-forward）」。</p><p>现在，最新的修改已经在 <code>master</code> 分支所指向的提交快照中，你可以着手发布该修复了。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-5.png" alt=" 被快进到 。" tabindex="0" loading="lazy"><figcaption><code>master</code> 被快进到 <code>hotfix</code>。</figcaption></figure><p>关于这个紧急问题的解决方案发布之后，你准备回到被打断之前时的工作中。然而，你应该先删除 <code>hotfix</code> 分支，因为你已经不再需要它了——<code>master</code> 分支已经指向了同一个位置。 你可以使用带 <code>-d</code> 选项的 <code>git branch</code> 命令来删除分支：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你可以切换回你正在工作的分支继续你的工作，也就是针对 #53 问题的那个分支（iss53 分支）。</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout iss53
Switched to branch &quot;iss53&quot;
$ vim index.html
$ git commit -a -m &#39;finished the new footer [issue 53]&#39;
[iss53 ad82d7a] finished the new footer [issue 53]
1 file changed, 1 insertion(+)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-6-20231016171324548.png" alt="继续在  分支上的工作" tabindex="0" loading="lazy"><figcaption>继续在 <code>iss53</code> 分支上的工作</figcaption></figure><h3 id="分支合并-1" tabindex="-1"><a class="header-anchor" href="#分支合并-1"><span>分支合并</span></a></h3><p>假设你已经修正了 #53 问题，并且打算将你的工作合并入 <code>master</code> 分支。 为此，你需要合并 <code>iss53</code> 分支到 <code>master</code> 分支，这和之前你合并 <code>hotfix</code> 分支所做的工作差不多。 你只需要检出到你想合并入的分支，然后运行 <code>git merge</code> 命令：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout master
Switched to branch &#39;master&#39;
$ git merge iss53
Merge made by the &#39;recursive&#39; strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这和你之前合并 <code>hotfix</code> 分支的时候看起来有一点不一样。 在这种情况下，你的开发历史从一个更早的地方开始分叉开来（diverged）。 因为，<code>master</code> 分支所在提交并不是 <code>iss53</code> 分支所在提交的直接祖先，Git 不得不做一些额外的工作。 出现这种情况的时候，Git 会使用两个分支的末端所指的快照（<code>C4</code> 和 <code>C5</code>）以及这两个分支的公共祖先（<code>C2</code>），做一个简单的三方合并。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-merging-1.png" alt="一次典型合并中所用到的三个快照" tabindex="0" loading="lazy"><figcaption>一次典型合并中所用到的三个快照</figcaption></figure><p>和之前将分支指针向前推进所不同的是，Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。 这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-merging-2.png" alt="一个合并提交" tabindex="0" loading="lazy"><figcaption>一个合并提交</figcaption></figure><h3 id="解决冲突" tabindex="-1"><a class="header-anchor" href="#解决冲突"><span>解决冲突</span></a></h3><p>如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们。 如果你对 #53 问题的修改和有关 <code>hotfix</code> 分支的修改都涉及到同一个文件的同一处，在合并它们的时候就会产生合并冲突：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 Git 做了合并，但是没有自动地创建一个新的合并提交。 Git 会暂停下来，等待你去解决合并产生的冲突。 你可以在合并冲突后的任意时刻使用 <code>git status</code> 命令来查看那些因包含合并冲突而处于未合并（unmerged）状态的文件：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run &quot;git commit&quot;)

Unmerged paths:
  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)

    both modified:      index.html

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 Git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>footer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>contact : email.support@github.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
=======
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>footer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>please contact us at support@github.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这表示 <code>HEAD</code> 所指示的版本（也就是你的 <code>master</code> 分支所在的位置，因为你在运行 merge 命令的时候已经检出到了这个分支）在这个区段的上半部分（<code>=======</code> 的上半部分），而 <code>iss53</code> 分支所指示的版本在 <code>=======</code> 的下半部分。 为了解决冲突，你必须选择使用由 <code>=======</code> 分割的两部分中的一个，或者你也可以自行合并这些内容。 例如，你可以通过把这段内容换成下面的样子来解决冲突：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>footer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>please contact us at email.support@github.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述的冲突解决方案仅保留了其中一个分支的修改，并且 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> , <code>=======</code> , 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 这些行被完全删除了。 在你解决了所有文件里的冲突之后，对每个文件使用 <code>git add</code> 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>VScode 提供了图形化工具用以解决冲突。</p></div><p>等你退出合并工具之后，Git 会询问刚才的合并是否成功。 如果你回答是，Git 会暂存那些文件以表明冲突已解决： 你可以再次运行 <code>git status</code> 来确认所有的合并冲突都已被解决：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git status
On branch master
All conflicts fixed but you are still merging.
  (use &quot;git commit&quot; to conclude merge)

Changes to be committed:

    modified:   index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入 <code>git commit</code> 来完成合并提交。 默认情况下提交信息看起来像下面这个样子：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>Merge branch &#39;iss53&#39;

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with &#39;#&#39; will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你觉得上述的信息不够充分，不能完全体现分支合并的过程，你可以修改上述信息，添加一些细节给未来检视这个合并的读者一些帮助，告诉他们你是如何解决合并冲突的，以及理由是什么。</p><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理"><span>分支管理</span></a></h2><p><code>git branch</code> 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会得到当前所有分支的一个列表：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git branch
  iss53
* master
  testing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 <code>master</code> 分支前的 <code>*</code> 字符：它代表现在检出的那一个分支（也就是说，当前 <code>HEAD</code> 指针所指向的分支）。</p><p>如果需要查看每一个分支的最后一次提交，可以运行 <code>git branch -v</code> 命令：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git branch -v
  iss53   93b412c fix javascript issue
* master  7a98805 Merge branch &#39;iss53&#39;
  testing 782fd34 add scott to the author list in the readmes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>--merged</code> 与 <code>--no-merged</code> 这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。 如果要查看哪些分支已经合并到当前分支，可以运行 <code>git branch --merged</code>：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git branch --merged
  iss53
* master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为之前已经合并了 <code>iss53</code> 分支，所以现在看到它在列表中。 在这个列表中分支名字前没有 <code>*</code> 号的分支通常可以使用 <code>git branch -d</code> 删除掉；你已经将它们的工作整合到了另一个分支，所以并不会失去任何东西。</p><p>这里显示了其他分支。 因为它包含了还未合并的工作，尝试使用 <code>git branch -d</code> 命令删除它时会失败：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git branch -d testing
error: The branch &#39;testing&#39; is not fully merged.
If you are sure you want to delete it, run &#39;git branch -D testing&#39;.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果真的想要删除分支并丢掉那些工作，如同帮助信息里所指出的，可以使用 <code>-D</code> 选项强制删除它。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>上面描述的选项 <code>--merged</code> 和 <code>--no-merged</code> 会在没有给定提交或分支名作为参数时， 分别列出已合并或未合并到 <strong>当前</strong> 分支的分支。</p><p>你总是可以提供一个附加的参数来查看其它分支的合并状态而不必检出它们。 例如，尚未合并到 <code>master</code> 分支的有哪些？</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout testing
$ git branch --no-merged master
topicA
featureB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="分支开发工作流" tabindex="-1"><a class="header-anchor" href="#分支开发工作流"><span>分支开发工作流</span></a></h2><p>在整个项目开发周期的不同阶段，你可以同时拥有多个开发的分支；你可以定期地把某些主题分支合并入其他分支中。</p><p>只在 <code>master</code> 分支上保留完全稳定的代码——有可能仅仅是已经发布或即将发布的代码。 他们还有一些名为 <code>develop</code> 或者 <code>next</code> 的平行分支，被用来做后续开发或者测试稳定性——这些分支不必保持绝对稳定，但是一旦达到稳定状态，它们就可以被合并入 <code>master</code> 分支了。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/lr-branches-2.png" alt="趋于稳定分支的工作流（“silo”）视图。" tabindex="0" loading="lazy"><figcaption>趋于稳定分支的工作流（“silo”）视图。</figcaption></figure><h2 id="远程分支" tabindex="-1"><a class="header-anchor" href="#远程分支"><span>远程分支</span></a></h2><p>远程分支以 <code>&lt;remote&gt;/&lt;branch&gt;</code> 的形式命名。 例如，<code>origin/master</code> 分支。</p><p>假设你的网络里有一个在 <code>git.ourcompany.com</code> 的 Git 服务器。</p><p>如果你从这里克隆，Git 的 <code>clone</code> 命令会为你自动将该远程分支命名为 <code>origin</code>，拉取它的所有数据，创建一个指向它的 <code>master</code> 分支的指针，并且在本地将其命名为 <code>origin/master</code>。</p><p>Git 也会给你一个与 <code>origin</code> 的 <code>master</code> 分支在指向同一个地方的本地 <code>master</code> 分支。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207145750.png" alt="克隆之后的服务器与本地仓库" tabindex="0" loading="lazy"><figcaption>克隆之后的服务器与本地仓库</figcaption></figure><p>如果你在本地的 <code>master</code> 分支做了一些工作，在同一段时间内有其他人推送提交到 <code>git.ourcompany.com</code> 并且更新了它的 <code>master</code> 分支，这就是说你们的提交历史已走向不同的方向。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207145827.png" alt="本地与远程的工作可以分叉" tabindex="0" loading="lazy"><figcaption>本地与远程的工作可以分叉</figcaption></figure><p>如果要与给定的远程仓库同步数据，运行 <code>git fetch &lt;remote&gt;</code> 命令（在本例中为 <code>git fetch origin</code>）。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>通常可以省略 <code>&lt;remote&gt;</code>。</p></div><p>这个命令查找 <code>origin</code> 是哪一个服务器（在本例中，它是 <code>git.ourcompany.com</code>），从中抓取本地没有的数据，并且更新本地数据库，移动 <code>origin/master</code> 指针到更新之后的位置。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207145928.png" alt="git fetch 更新你的远程跟踪分支" tabindex="0" loading="lazy"><figcaption>git fetch 更新你的远程跟踪分支</figcaption></figure><p>为了演示有多个远程仓库与远程分支的情况，我们假定你有另一个内部 Git 服务器，仅服务于你的某个敏捷开发团队。这个服务器位于 <code>git.team1.ourcompany.com</code>。 你可以运行 <code>git remote add</code> 命令添加一个新的远程仓库引用到当前的项目。将这个远程仓库命名为 <code>teamone</code>，将其作为完整 URL 的缩写。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207150645.png" alt="添加另一个远程仓库" tabindex="0" loading="lazy"><figcaption>添加另一个远程仓库</figcaption></figure><p>现在，可以运行 <code>git fetch teamone</code> 来抓取远程仓库 <code>teamone</code> 有而本地没有的数据。 因为那台服务器上现有的数据是 <code>origin</code> 服务器上的一个子集， 所以 Git 并不会抓取数据而是会设置远程跟踪分支 <code>teamone/master</code> 指向 <code>teamone</code> 的 <code>master</code> 分支。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207150743.png" alt="远程跟踪分支 teamone/master" tabindex="0" loading="lazy"><figcaption>远程跟踪分支 teamone/master</figcaption></figure><h3 id="推送" tabindex="-1"><a class="header-anchor" href="#推送"><span>推送</span></a></h3><p>本地的分支并不会自动与远程仓库同步——你必须显式地推送想要分享的分支。</p><p>如果希望和别人一起在名为 <code>serverfix</code> 的分支上工作，你可以像推送第一个分支那样推送它。 运行 <code>git push &lt;remote&gt; &lt;branch&gt;</code>:</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git push origin serverfix
Counting objects: 24, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.
Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit

- [new branch] serverfix -&gt; serverfix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以运行 <code>git push origin serverfix:serverfix</code>， 它会「推送本地的 <code>serverfix</code> 分支，将其作为远程仓库的 <code>serverfix</code> 分支」。</p><p>可以通过这种格式来推送本地分支到一个命名不相同的远程分支。如果并不想让远程仓库上的分支叫做 <code>serverfix</code>，可以运行 <code>git push origin serverfix:awesomebranch</code> 来将本地的 <code>serverfix</code> 分支推送到远程仓库上的 <code>awesomebranch</code> 分支。</p><p>下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 <code>origin/serverfix</code>，指向服务器的 <code>serverfix</code> 分支的引用：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git fetch origin
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/schacon/simplegit
 * [new branch]      serverfix    -&gt; origin/serverfix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要特别注意的一点是使用 <code>git fetch</code> 获取到新的远程跟踪分支时，本地不会有一个新的 <code>serverfix</code> 分支——只有一个不可以修改的 <code>origin/serverfix</code> 指针。</p><p>可以运行 <code>git merge origin/serverfix</code> 将这些工作合并到当前所在的分支。 如果想要在自己的 <code>serverfix</code> 分支上工作，可以将其建立在远程跟踪分支之上：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch &#39;serverfix&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这会给你一个用于工作的本地分支，并且起点位于 <code>origin/serverfix</code>。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>也可以使用 <code>git switch &lt;branch&gt;</code>，Git 会自动新建一个分支并跟踪拉取下来的远程分支。</p></div><h3 id="拉取" tabindex="-1"><a class="header-anchor" href="#拉取"><span>拉取</span></a></h3><p>当 <code>git fetch</code> 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。</p><p>然而，有一个命令叫作 <code>git pull</code> 在大多数情况下它的含义是一个 <code>git fetch</code> 紧接着一个 <code>git merge</code> 命令。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于 <code>git pull</code> 的魔法经常令人困惑所以通常单独显式地使用 <code>fetch</code> 与 <code>merge</code> 命令会更好一些。</p></div><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h3><p>假设你已经通过远程分支做完所有的工作了——也就是说你和你的协作者已经完成了一个特性， 并且将其合并到了远程仓库的 <code>master</code> 分支（或任何其他稳定代码分支）。 可以运行带有 <code>--delete</code> 选项的 <code>git push</code> 命令来删除一个远程分支。 如果想要从服务器上删除 <code>serverfix</code> 分支，运行下面的命令：</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>$ git push origin --delete serverfix
To https://github.com/schacon/simplegit

- [deleted] serverfix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本上这个命令做的只是从服务器上移除这个指针。 Git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。</p><h2 id="变基" tabindex="-1"><a class="header-anchor" href="#变基"><span>变基</span></a></h2><p>在 Git 中整合来自不同分支的修改主要有两种方法：<code>merge</code> 以及 <code>rebase</code>。</p><h3 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作"><span>基本操作</span></a></h3><p>当你的项目目前分叉到两个分支，又各自提交了更新。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207161737.png" alt="分叉的提交历史" tabindex="0" loading="lazy"><figcaption>分叉的提交历史</figcaption></figure><p>之前介绍过，整合分支最容易的方法是 <code>merge</code> 命令。 它会把两个分支的最新快照（<code>C3</code> 和 <code>C4</code>）以及二者最近的共同祖先（<code>C2</code>）进行三方合并，合并的结果是生成一个新的快照（并提交）。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207161821.png" alt="通过合并操作来整合分叉的历史" tabindex="0" loading="lazy"><figcaption>通过合并操作来整合分叉的历史</figcaption></figure><p>其实，还有一种方法：你可以提取在 <code>C4</code> 中引入的补丁和修改，然后在 <code>C3</code> 的基础上应用一次。 在 Git 中，这种操作就叫做「变基（rebase）」。 你可以使用 <code>rebase</code> 命令将提交到某一分支上的所有修改都移至另一分支上，就好像 <strong>重新播放</strong> 一样。</p><p>在这个例子中，你可以检出 <code>experiment</code> 分支，然后将它变基到 <code>master</code> 分支上：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout experiment
$ <span class="token function">git</span> rebase master
First, rewinding <span class="token function">head</span> to replay your work on <span class="token function">top</span> of it<span class="token punctuation">..</span>.
Applying: added staged <span class="token builtin class-name">command</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的原理是首先找到这两个分支（即当前分支 <code>experiment</code>、变基操作的目标基底分支 <code>master</code>） 的最近共同祖先 <code>C2</code>，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目标基底 <code>C3</code>, 最后以此将之前另存为临时文件的修改依序应用。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207162127.png" alt="将 C4 中的修改变基到 C3 上" tabindex="0" loading="lazy"><figcaption>将 C4 中的修改变基到 C3 上</figcaption></figure><p>现在回到 master 分支，进行一次快进合并。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout master
$ <span class="token function">git</span> merge experiment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207163046.png" alt="master 分支的快进合并" tabindex="0" loading="lazy"><figcaption>master 分支的快进合并</figcaption></figure><p>这两种整合方法的最终结果没有任何区别，但是变基使得提交历史更加整洁。你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的，但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。</p><p>请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。</p><h3 id="变基的风险" tabindex="-1"><a class="header-anchor" href="#变基的风险"><span>变基的风险</span></a></h3><p>呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则：</p><p><strong>如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。</strong></p><p>因为 <code>rebase</code> 会修改 <code>commit</code>，若你拉取的是 <code>rebase</code> 后的代码，则会遇到冲突。</p><p>若发生 <code>git pull</code> 拉取冲突，需要使用 <code>git pull --rebase</code> 解决。</p><h3 id="变基-vs-合并" tabindex="-1"><a class="header-anchor" href="#变基-vs-合并"><span>变基 vs. 合并</span></a></h3><p>有一种观点认为，仓库的提交历史即是 <strong>记录实际发生过什么</strong>。 它是针对历史的文档，本身就有价值，不能乱改。从这个角度看来，改变提交历史是一种亵渎，你使用 <strong>谎言</strong> 掩盖了实际发生过的事情。 如果由合并产生的提交历史是一团糟怎么办？ 既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。</p><p>另一种观点则正好相反，他们认为提交历史是 <strong>项目过程中发生的事</strong>。 没人会出版一本书的第一版草稿，软件维护手册也是需要反复修订才能方便使用。 持这一观点的人会使用 <code>rebase</code> 及 <code>filter-branch</code> 等工具来编写故事，怎么方便后来的读者就怎么写。</p><p>总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。</p>`,138))])}const b=s(l,[["render",p],["__file","03-git-branch.html.vue"]]),v=JSON.parse('{"path":"/reading/pro-git/03-git-branch.html","title":"Git 分支","lang":"zh-CN","frontmatter":{"title":"Git 分支","date":"2024-02-07T00:00:00.000Z","icon":"branch","category":["READING"],"tag":["git","branch"],"description":"分支简介 Git 仓库中有五个对象：三个 blob 对象（保存着文件快照）、一个 树 对象 （记录着目录结构和 blob 对象索引）以及一个 提交 对象（包含着指向前述树对象的指针和所有提交信息）。 做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。 提交对象及其父对象提交对象及其父对象 Git 的分支，其实本质上仅...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/reading/pro-git/03-git-branch.html"}],["meta",{"property":"og:title","content":"Git 分支"}],["meta",{"property":"og:description","content":"分支简介 Git 仓库中有五个对象：三个 blob 对象（保存着文件快照）、一个 树 对象 （记录着目录结构和 blob 对象索引）以及一个 提交 对象（包含着指向前述树对象的指针和所有提交信息）。 做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。 提交对象及其父对象提交对象及其父对象 Git 的分支，其实本质上仅..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20231012172546292.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Git 分支"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:tag","content":"branch"}],["meta",{"property":"article:published_time","content":"2024-02-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git 分支\\",\\"image\\":[\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20231012172546292.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/image-20231012172739646.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/two-branches.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/head-to-master.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/head-to-testing.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/advance-testing-20231016151948599.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/checkout-master.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/advance-master.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-1.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-2.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-3.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-4.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-5.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-branching-6-20231016171324548.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-merging-1.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/basic-merging-2.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/lr-branches-2.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207145750.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207145827.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207145928.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207150645.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207150743.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207161737.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207161821.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207162127.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240207163046.png\\"],\\"datePublished\\":\\"2024-02-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 分支简介","slug":"分支简介","link":"#分支简介","children":[{"level":3,"title":"1.1 新建分支","slug":"新建分支","link":"#新建分支","children":[]},{"level":3,"title":"1.2 分支切换","slug":"分支切换","link":"#分支切换","children":[]}]},{"level":2,"title":"2 分支合并","slug":"分支合并","link":"#分支合并","children":[{"level":3,"title":"2.1 新建分支","slug":"新建分支-1","link":"#新建分支-1","children":[]},{"level":3,"title":"2.2 分支合并","slug":"分支合并-1","link":"#分支合并-1","children":[]},{"level":3,"title":"2.3 解决冲突","slug":"解决冲突","link":"#解决冲突","children":[]}]},{"level":2,"title":"3 分支管理","slug":"分支管理","link":"#分支管理","children":[]},{"level":2,"title":"4 分支开发工作流","slug":"分支开发工作流","link":"#分支开发工作流","children":[]},{"level":2,"title":"5 远程分支","slug":"远程分支","link":"#远程分支","children":[{"level":3,"title":"5.1 推送","slug":"推送","link":"#推送","children":[]},{"level":3,"title":"5.2 拉取","slug":"拉取","link":"#拉取","children":[]},{"level":3,"title":"5.3 删除","slug":"删除","link":"#删除","children":[]}]},{"level":2,"title":"6 变基","slug":"变基","link":"#变基","children":[{"level":3,"title":"6.1 基本操作","slug":"基本操作","link":"#基本操作","children":[]},{"level":3,"title":"6.2 变基的风险","slug":"变基的风险","link":"#变基的风险","children":[]},{"level":3,"title":"6.3 变基 vs. 合并","slug":"变基-vs-合并","link":"#变基-vs-合并","children":[]}]}],"git":{"createdTime":1707295678000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2}]},"readingTime":{"minutes":21.8,"words":6541},"filePathRelative":"reading/pro-git/03-git-branch.md","localizedDate":"2024年2月7日","excerpt":"","autoDesc":true}');export{b as comp,v as data};
