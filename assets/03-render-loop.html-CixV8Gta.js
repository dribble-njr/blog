import{_ as t,c as i,e as r,o as a}from"./app-Bq0FCg7h.js";const o={};function n(l,e){return a(),i("div",null,e[0]||(e[0]=[r('<p>现在您已经了解了系统的主要部分，让我们来看看这些部分是如何协同工作，将您的项目呈现在屏幕上的。 与网页不同的是，PixiJS 会不断更新和重新绘制，一遍又一遍。 你更新对象，然后 PixiJS 将它们渲染到屏幕上，然后重复这个过程。 我们称这个循环为渲染循环。</p><p>任何 PixiJS 项目最主要的部分包含更新 + 渲染循环，编写更新，PixiJS 会处理整个渲染。</p><p>发生在渲染循环中的每一帧主要包含三个部分。</p><h2 id="运行-ticker-回调" tabindex="-1"><a class="header-anchor" href="#运行-ticker-回调"><span>运行 Ticker 回调</span></a></h2><p>第一步是计算从上一帧开始已经过去了多长时间，然后根据时间差调用应用程序对象的 ticker 回调。 这样，项目代码就可以制作动画并更新舞台上的精灵等，为渲染做好准备。</p><h2 id="更新场景图像" tabindex="-1"><a class="header-anchor" href="#更新场景图像"><span>更新场景图像</span></a></h2><p>场景图包含您正在绘制的事物（精灵、文本等），并且这些对象处于树状层次结构中。这些对象处于树状层次结构中。 通过移动、旋转等方式更新游戏对象后，PixiJS 需要计算场景中每个对象的新位置和状态，然后才能开始绘制。</p><h2 id="渲染场景图像" tabindex="-1"><a class="header-anchor" href="#渲染场景图像"><span>渲染场景图像</span></a></h2><p>现在我们的游戏状态已经更新，是时候将其绘制到屏幕上了。渲染系统会从场景图的根节点（app.stage）开始，渲染每个对象及其子节点，直到绘制完所有对象。 在此过程中不会进行剔除或其他巧妙的处理。如果在舞台的可见部分之外有大量对象，则需要将其禁用作为一种优化方法（视椎体剔除）。</p><h2 id="帧频" tabindex="-1"><a class="header-anchor" href="#帧频"><span>帧频</span></a></h2><p>渲染循环不可能无限快地运行--在屏幕上绘制图像需要时间。此外，每次屏幕更新（通常为 60fps，但较新的显示器可支持 144fps 或更高）时，帧的更新次数一般不会超过一次。最后，PixiJS 是在 Chrome 或 Firefox 等网络浏览器的环境中运行的。浏览器本身必须平衡各种内部操作的需要和为任何打开的标签页提供服务的需要。综上所述，确定何时绘制帧是一个复杂的问题。</p><p>如果您想调整该行为，可以在 Ticker 上设置 <code>minFPS</code> 和 <code>maxFPS</code> 属性。请注意，由于环境复杂，项目无法保证给定的 FPS。 在 ticker 回调中使用传递的 <code>ticker.deltaTime</code> 值来缩放任何动画，以确保流畅播放。</p><h2 id="自定义渲染循环" tabindex="-1"><a class="header-anchor" href="#自定义渲染循环"><span>自定义渲染循环</span></a></h2><p>以上介绍的是应用程序辅助类开箱即用的默认呈现循环。对于希望解决特定问题的高级用户来说，创建呈现循环还有许多其他方法。在制作原型和学习 PixiJS 的过程中，建议使用应用程序提供的系统。</p>',14)]))}const c=t(o,[["render",n],["__file","03-render-loop.html.vue"]]),d=JSON.parse('{"path":"/frontend/framework/pixi/03-render-loop.html","title":"渲染循环","lang":"zh-CN","frontmatter":{"title":"渲染循环","date":"2024-08-08T00:00:00.000Z","icon":"loop","category":["Pixi"],"tag":["basic-knowledge"],"description":"现在您已经了解了系统的主要部分，让我们来看看这些部分是如何协同工作，将您的项目呈现在屏幕上的。 与网页不同的是，PixiJS 会不断更新和重新绘制，一遍又一遍。 你更新对象，然后 PixiJS 将它们渲染到屏幕上，然后重复这个过程。 我们称这个循环为渲染循环。 任何 PixiJS 项目最主要的部分包含更新 + 渲染循环，编写更新，PixiJS 会处理整...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/03-render-loop.html"}],["meta",{"property":"og:title","content":"渲染循环"}],["meta",{"property":"og:description","content":"现在您已经了解了系统的主要部分，让我们来看看这些部分是如何协同工作，将您的项目呈现在屏幕上的。 与网页不同的是，PixiJS 会不断更新和重新绘制，一遍又一遍。 你更新对象，然后 PixiJS 将它们渲染到屏幕上，然后重复这个过程。 我们称这个循环为渲染循环。 任何 PixiJS 项目最主要的部分包含更新 + 渲染循环，编写更新，PixiJS 会处理整..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"basic-knowledge"}],["meta",{"property":"article:published_time","content":"2024-08-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"渲染循环\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 运行 Ticker 回调","slug":"运行-ticker-回调","link":"#运行-ticker-回调","children":[]},{"level":2,"title":"2 更新场景图像","slug":"更新场景图像","link":"#更新场景图像","children":[]},{"level":2,"title":"3 渲染场景图像","slug":"渲染场景图像","link":"#渲染场景图像","children":[]},{"level":2,"title":"4 帧频","slug":"帧频","link":"#帧频","children":[]},{"level":2,"title":"5 自定义渲染循环","slug":"自定义渲染循环","link":"#自定义渲染循环","children":[]}],"git":{"createdTime":1723085363000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2}]},"readingTime":{"minutes":2.54,"words":761},"filePathRelative":"frontend/framework/pixi/03-render-loop.md","localizedDate":"2024年8月8日","excerpt":"","autoDesc":true}');export{c as comp,d as data};
