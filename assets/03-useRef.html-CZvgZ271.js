import{_ as s,c as a,e as t,o as e}from"./app-DjBUyNfp.js";const c={};function o(p,n){return e(),a("div",null,n[0]||(n[0]=[t(`<p>使用 React 时，通常需要直接与 DOM 交互。你可能需要使用一个需要直接与 DOM 交互的非框架特定的库。通常为了使 UI 可访问，你需要考虑焦点管理，这需要你调用输入框的 <code>.focus()</code> 方法。</p><p>记住，当你这样做时：<code>&lt;div&gt;hi&lt;/div&gt;</code>，实际上是 <code>React.createElement</code> 的语法糖，所以你实际上无法在渲染方法中访问 DOM 节点。事实上，DOM 节点在 <code>ReactDOM.createRoot().render()</code> 方法被调用之前根本不存在。你的组件的渲染方法实际上只是负责创建和返回 React 元素，与 DOM 本身无关。</p><p>因此，为了访问 DOM，你需要让 React 在渲染组件时给你提供对特定 DOM 节点的访问。这通过一个特殊的属性 <code>ref</code> 来实现。</p><p>有两种使用 <code>ref</code> 属性的方法：回调和 <code>useRef</code> 钩子。</p><p><strong>ref callback:</strong></p><p>最简单的方法是使用 <code>ref</code> 属性并传递一个回调：</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">MyDiv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
			<span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>myDiv <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">here&#39;s my div!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> myDiv<span class="token punctuation">)</span>
				<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">my div is getting removed from the page!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> myDiv<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">}</span></span>
		<span class="token punctuation">&gt;</span></span><span class="token plain-text">
			Hey, this is my div!
		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>出于向后兼容的原因，TypeScript 会告诉你 <code>myDiv</code> 可以是 <code>HTMLDivElement</code> 或 <code>null</code>。因此，你可能需要处理 <code>null</code> 的情况（通常，只需提前返回）。在未来，它将永远不会是 <code>null</code>。</p></div><p><strong>ref object:</strong></p><p>对于更复杂的使用场景（例如，需要在初始渲染后与 DOM 交互），可以使用 <code>useRef</code> 钩子。</p><p>这是一个使用 <code>ref</code> 属性和 <code>useRef</code> 的简单示例：</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">MyDiv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> myDivRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
	<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> myDiv <span class="token operator">=</span> myDivRef<span class="token punctuation">.</span>current
		<span class="token comment">// myDiv is the div DOM node!</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myDiv<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>myDivRef<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">hi</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>ref</code> 对象的优点是你可以将 ref 对象存储在变量中，并在 <code>useEffect</code> 回调或事件处理程序中安全地访问它。</p><p>组件渲染后，它被认为是“已挂载”。这就是 <code>useEffect</code> 回调被调用的时候，所以到那时，ref 应该有它的 <code>current</code> 属性设置为 DOM 节点。因此，你通常会在 <code>useEffect</code> 回调中进行直接 DOM 交互/操作。</p><p>每个元素都有一个特殊的 <code>ref</code> 属性（如上所示）。你将 ref 传递给该属性，React 将为你提供对该元素创建的元素的引用。</p><p>你还可以将 <code>ref</code> 传递给函数组件，该组件可以将 <code>ref</code> 转发到另一个元素，或者它可以使用 <code>useImperativeHandle</code> 在上面添加一些方便的方法。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>直接将 <code>ref</code> 传递作为 <code>props</code> 给函数组件，在 React 18 中需要使用 <code>forwardRef</code> 来转发 <code>ref</code>。</p><p>React19 中，<code>forwardRef</code> 已经废弃，直接将 <code>ref</code> 传递作为 <code>props</code> 给函数组件即可。</p></div>`,17)]))}const l=s(c,[["render",o],["__file","03-useRef.html.vue"]]),r=JSON.parse('{"path":"/frontend/framework/react/03-useRef.html","title":"useRef","lang":"zh-CN","frontmatter":{"title":"useRef","date":"2025-06-26T00:00:00.000Z","icon":"ref","category":["react"],"tag":["react core","hooks"],"description":"使用 React 时，通常需要直接与 DOM 交互。你可能需要使用一个需要直接与 DOM 交互的非框架特定的库。通常为了使 UI 可访问，你需要考虑焦点管理，这需要你调用输入框的 .focus() 方法。 记住，当你这样做时：<div>hi</div>，实际上是 React.createElement 的语法糖，所以你实际上无法在渲染方法中访问 DOM...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/framework/react/03-useRef.html"}],["meta",{"property":"og:title","content":"useRef"}],["meta",{"property":"og:description","content":"使用 React 时，通常需要直接与 DOM 交互。你可能需要使用一个需要直接与 DOM 交互的非框架特定的库。通常为了使 UI 可访问，你需要考虑焦点管理，这需要你调用输入框的 .focus() 方法。 记住，当你这样做时：<div>hi</div>，实际上是 React.createElement 的语法糖，所以你实际上无法在渲染方法中访问 DOM..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-26T03:44:06.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"react core"}],["meta",{"property":"article:tag","content":"hooks"}],["meta",{"property":"article:published_time","content":"2025-06-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-26T03:44:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"useRef\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-26T03:44:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[],"git":{"createdTime":1750909446000,"updatedTime":1750909446000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":2.23,"words":670},"filePathRelative":"frontend/framework/react/03-useRef.md","localizedDate":"2025年6月26日","excerpt":"","autoDesc":true}');export{l as comp,r as data};
