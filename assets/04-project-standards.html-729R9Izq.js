import{_ as p,c as i,e as o,a as s,d as a,b as t,r as l,o as c}from"./app-DjBUyNfp.js";const r={},d={href:"https://stylelint.io/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/ant-design/ant-design/blob/master/package.json",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.npmjs.com/package/lint-staged",target:"_blank",rel:"noopener noreferrer"},k={href:"https://juejin.cn/post/7136009620979449893#heading-5",target:"_blank",rel:"noopener noreferrer"},v={href:"http://commitizen.github.io/cz-cli/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://commitlint.js.org/#/guides-local-setup",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/7136009620979449893",target:"_blank",rel:"noopener noreferrer"};function h(y,n){const e=l("ExternalLinkIcon");return c(),i("div",null,[n[10]||(n[10]=o(`<h2 id="代码规范" tabindex="-1"><a class="header-anchor" href="#代码规范"><span>代码规范</span></a></h2><h3 id="editorconfig" tabindex="-1"><a class="header-anchor" href="#editorconfig"><span>editorconfig</span></a></h3><p>EditorConfig 有助于跨不同编辑器和 IDE 为处理同一项目的多个开发人员维护一致的编码风格。</p><p>VSCode 需要安装 <code>EditorConfig for VS Code</code> 插件。</p><p><strong><code>.editorconfig</code></strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># http://editorconfig.org</span>

root <span class="token operator">=</span> <span class="token boolean">true</span>

<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token comment"># 表示所有文件适用</span>
charset <span class="token operator">=</span> utf-8 <span class="token comment"># 设置文件字符集为 utf-8</span>
indent_style <span class="token operator">=</span> space <span class="token comment"># 缩进风格（tab | space）</span>
indent_size <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment"># 缩进大小</span>
end_of_line <span class="token operator">=</span> lf <span class="token comment"># 控制换行类型(lf | cr | crlf)</span>
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment"># 去除行首的任意空白字符</span>
insert_final_newline <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment"># 始终在文件末尾插入一个新行</span>

<span class="token punctuation">[</span>*.md<span class="token punctuation">]</span> <span class="token comment"># 表示仅 md 文件适用以下规则</span>
max_line_length <span class="token operator">=</span> off
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint"><span>ESLint</span></a></h3><p>ESLint 是一个 Javascript Linter，帮助我们规范代码质量，提高团队开发效率。</p><p>安装 <code>eslint</code> 并新建配置文件 <code>.eslintrc.js</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> eslint <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">es2021</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;eslint:recommended&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;plugin:react/recommended&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;plugin:@typescript-eslint/recommended&#39;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token string">&#39;latest&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要在项目中安装 <code>jest</code>，则需要在配置文件中的 <code>env</code> 加上下面这一行：</p><div class="language-diff line-numbers-mode" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> env: {
</span><span class="token prefix unchanged"> </span><span class="token line">   browser: true,
</span><span class="token prefix unchanged"> </span><span class="token line">   es2021: true,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   jest: true
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> },
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想和 <code>prettier</code> 一起使用则需要在 <code>extends</code> 中加入：</p><div class="language-diff line-numbers-mode" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> extends: [
</span><span class="token prefix unchanged"> </span><span class="token line">   &#39;eslint:recommended&#39;,
</span><span class="token prefix unchanged"> </span><span class="token line">   &#39;plugin:react/recommended&#39;,
</span><span class="token prefix unchanged"> </span><span class="token line">   &#39;plugin:@typescript-eslint/recommended&#39;,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   &quot;prettier&quot;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ],
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还需要在项目中安装与 <code>TypeScript</code> 相关的插件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> eslint-plugin-import @typescript-eslint/parser eslint-import-resolver-typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后在 <code>.eslintrc.js</code> 中添加 <code>settings</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;import/resolver&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;typescript&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="prettier" tabindex="-1"><a class="header-anchor" href="#prettier"><span>prettier</span></a></h3><p><code>prettier</code> 是代码格式化工具，和 <code>eslint</code> 不同的是，它只关注代码格式，而不关注语法问题。</p><p>首先安装 <code>prettier</code> 及相关依赖插件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> prettier eslint-config-prettier eslint-plugin-prettier eslint-plugin-react-hooks <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了使用刚才安装的插件，需要对 <code>.eslintrc.js</code> 中的 <code>plugins</code> 进行修改：</p><div class="language-diff line-numbers-mode" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> plugins: [&quot;react&quot;, &quot;@typescript-eslint&quot;]
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> plugins: [&quot;react&quot;, &quot;react-hooks&quot;, &quot;@typescript-eslint&quot;, &quot;prettier&quot;]
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>prettier</code> 基本的配置文件如下：</p><p><strong><code>.prettierrc</code></strong></p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;useTabs&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;tabWidth&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token property">&quot;printWidth&quot;</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
  <span class="token property">&quot;singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;trailingComma&quot;</span><span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>.prettierignore</code></strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/dist/*
.local
.output.js
/node_modules/**

**/*.svg
**/*.sh

/public/*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后可以在 <code>package.json</code> 中配置 <code>scripts</code>：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;lint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint src/**/*.{js,jsx,ts,tsx,json}&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint:fix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint --fix &#39;src/**/*.{js,jsx,ts,tsx,json}&#39;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;format&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier --write &#39;src/**/*.{js,jsx,ts,tsx,css,md,json}&#39; --config ./.prettierrc&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stylelint" tabindex="-1"><a class="header-anchor" href="#stylelint"><span>StyleLint</span></a></h3><p><code>Stylelint</code> 是一个强大、先进的 CSS 代码检查器（linter），可以帮助你规避 CSS 代码中的错误并保持一致的编码风格。</p>`,34)),s("blockquote",null,[s("p",null,[s("a",d,[n[0]||(n[0]=a("https://stylelint.io/")),t(e)])])]),n[11]||(n[11]=o(`<p>安装依赖</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 如果项目中使用 scss</span>
<span class="token function">pnpm</span> <span class="token function">add</span> stylelint stylelint-config-standard-scss <span class="token parameter variable">-D</span>
<span class="token function">pnpm</span> <span class="token function">add</span> postcss-scss <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件 <code>.stylelintrc.js</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token string">&#39;stylelint-config-standard-scss&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// rule覆盖（根据自己喜好来配置）</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;string-quotes&#39;</span><span class="token operator">:</span> <span class="token string">&#39;single&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;property-no-vendor-prefix&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;declaration-colon-newline-after&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;value-list-comma-newline-after&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;custom-property-pattern&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;color-hex-length&#39;</span><span class="token operator">:</span> <span class="token string">&#39;short&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;color-function-notation&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;alpha-value-notation&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;value-no-vendor-prefix&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;selector-class-pattern&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;function-url-quotes&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;no-missing-end-of-source-newline&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;no-descending-specificity&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;font-family-no-missing-generic-family-keyword&#39;</span><span class="token operator">:</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">overrides</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 若项目中存在scss文件，添加以下配置</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token string">&#39;**/*.scss&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">customSyntax</span><span class="token operator">:</span> <span class="token string">&#39;postcss-scss&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.stylelintignore</code> 忽略校验目录文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/dist/*
/public/*
public/*
node_modules
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-规范" tabindex="-1"><a class="header-anchor" href="#git-规范"><span>Git 规范</span></a></h2><p><code>Git</code> 规范包括：</p><ul><li><code>pre-commit</code>：判断提交的代码是否符合规范</li><li><code>commit-message</code>：判断 <code>commit</code> 信息是否符合规范</li></ul><h3 id="husky" tabindex="-1"><a class="header-anchor" href="#husky"><span>husky</span></a></h3><p><code>husky</code> 可以管理 <code>git</code> 中的 <code>hooks</code>，初始化应该执行如下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> dlx husky-init <span class="token operator">&amp;&amp;</span> <span class="token function">pnpm</span> <span class="token function">install</span> <span class="token comment"># pnpm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>它将设置 <code>husky</code>，修改 <code>package.json</code> 并创建一个你可以编辑的预提交钩子样本。默认情况下，它将在你提交时运行 <code>npm test</code>。</p></div><p>然后修改 <code>pre-commit</code>：</p><div class="language-diff line-numbers-mode" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> npm test
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> npm run lint
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样在每次 <code>git commit</code> 之前，都会首先进行 <code>lint</code> 检查，通过之后才能提交代码。</p><h3 id="lint-staged" tabindex="-1"><a class="header-anchor" href="#lint-staged"><span>lint-staged</span></a></h3><p>然而思考几个问题：</p><ol><li>我们只修改了个别的文件，没有必要检测所有的文件代码格式</li><li>它只能给我们提示出对应的错误，我们还需要手动的进行代码修改</li><li>修改后需要手动 <code>git add .</code></li></ol><p>这时可以使用 <code>lint-staged</code> 解决这个问题，它只会检查在暂存区的代码。</p><p>安装：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> lint-staged <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改 <code>.husky</code> 中的 <code>pre-commit</code>：</p><div class="language-diff line-numbers-mode" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> npm test
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> npx --no-install lint-staged
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>--no-install</code> 强制使用本地模块，不下载远程模块，如果本地不存在该模块，就会报错。</p></div><p>在 <code>package.json</code> 中配置：</p>`,26)),s("blockquote",null,[n[6]||(n[6]=s("p",null,"参考资料",-1)),s("p",null,[s("a",u,[n[1]||(n[1]=a("https://github.com/ant-design/ant-design/blob/master/package.json")),t(e)]),n[4]||(n[4]=a(" > ")),s("a",m,[n[2]||(n[2]=a("https://www.npmjs.com/package/lint-staged")),t(e)]),n[5]||(n[5]=a(" > ")),s("a",k,[n[3]||(n[3]=a("https://juejin.cn/post/7136009620979449893#heading-5")),t(e)])])]),n[12]||(n[12]=o(`<div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;*.{json,md}&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier --ignore-unknown --write&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;*.{js,jsx,ts,tsx}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;eslint --fix&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;prettier --write&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;{!(package)*.json,*.code-snippets,.!(browserslist)*rc}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;prettier --write--parser json&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;package.json&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;prettier --write&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;*.{scss,less,styl,html}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;stylelint --fix&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;prettier --write&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="commitizen" tabindex="-1"><a class="header-anchor" href="#commitizen"><span>commitizen</span></a></h3><p>在安装完上面两个依赖后，就已经能在 <code>pre-commit</code> 钩子判断<strong>暂存区代码</strong>是否符合规范，并且使用 <code>prettier</code> 修复它。</p><p>第二个问题是我们需要在 <code>commit-message</code> 中判断 <code>commit</code> 信息是否符合规范。可以使用 <code>commitizen</code>，它是一个撰写符合 <code>Commit Message</code> 标准的一款工具。通过它可以实现交互式撰写规范的 <code>Commit Message</code>。</p>`,4)),s("blockquote",null,[s("p",null,[s("a",v,[n[7]||(n[7]=a("http://commitizen.github.io/cz-cli/")),t(e)])])]),n[13]||(n[13]=o(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> commitizen <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后，一般我们都采用符合 Angular 的 <code>Commit message</code> 格式的提交规范，运行以下命令生成符合 Angular 提交规范格式的 <code>Commit message</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx --no-install commitizen init cz-conventional-changelog <span class="token parameter variable">--pnpm</span> --save-dev --save-exact
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>package.json</code> 中会自动生成以下配置：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;commitizen&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./node_modules/cz-conventional-changelog&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <code>package.json</code> 中的 <code>scripts</code> 添加命令：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token property">&quot;commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;git-cz&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="commitlint" tabindex="-1"><a class="header-anchor" href="#commitlint"><span>commitlint</span></a></h3><p>虽然使用了 <code>commitizen</code> 交互式撰写规范的 <code>Commit Message</code>，但由于它不是强制使用，我们仍然可以通过 <code>git commit</code> 提交信息，因此不管是使用 <code>git commit</code> 或 <code>git cz</code>，我们都需要对 <code>commit message</code> 进行校验，不允许规范的情况下不能进行 <code>commit</code> 操作。</p>`,9)),s("blockquote",null,[s("p",null,[s("a",g,[n[8]||(n[8]=a("https://commitlint.js.org/#/guides-local-setup")),t(e)])])]),n[14]||(n[14]=o('<p>首先安装相关依赖并且生成相关配置：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Install and configure if needed</span>\n<span class="token function">npm</span> <span class="token function">install</span> --save-dev @commitlint/<span class="token punctuation">{</span>cli,config-conventional<span class="token punctuation">}</span>\n<span class="token comment"># For Windows:</span>\n<span class="token function">pnpm</span> <span class="token function">add</span> @commitlint/config-conventional @commitlint/cli <span class="token parameter variable">-D</span>\n\n<span class="token comment"># Configure commitlint to use conventional config</span>\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;module.exports = { ignores: [(commit) =&gt; commit.includes(&#39;init&#39;)], extends: [&#39;@commitlint/config-conventional&#39;] };&quot;</span> <span class="token operator">&gt;</span> commitlint.config.js\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>hushy</code> 中自动生成 <code>hook</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> .husky/commit-msg <span class="token string">&quot;npx --no-install commitlint --edit <span class="token variable">$1</span>&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除了 <code>cli</code> 和 <code>config-conventional</code> 外，<code>commitlint</code> 还提供了其他的工具包：</p><ul><li><code>@commitlint/cli</code>: 这是 <code>commitlint</code> 的命令行接口，用于在命令行中执行 <code>commitlint</code>。</li><li><code>@commitlint/config-conventional</code>: 这是 <code>commitlint</code> 的一个常规配置，它提供了一组常规的 <code>commit</code> 规则，这些规则来源于 <code>Angular</code> 团队的提交规范。</li><li><code>@commitlint/cz-commitlint</code>: 这个包是 <code>commitizen</code> 与 <code>commitlint</code> 的适配器，用于在命令行中启动交互式的 <code>commit</code> 提示器，来协助开发者完成符合规范的提交信息。</li><li><code>@commitlint/format</code>: 这个包提供了一种格式化 <code>commitlint</code> 返回的结果的方式，可以自定义输出结果的样式。</li><li><code>@commitlint/prompt-cli</code>: 这个包提供了一个命令行的交互式提示器，用于在命令行中启动交互式的 <code>commit</code> 提示器，来协助开发者完成符合规范的提交信息。</li></ul><div class="hint-container tip"><p class="hint-container-title">`commitizen` 和 `@commitlint/cz-commitlint` 的区别</p><p><code>commitizen</code> 和 <code>@commitlint/cz-commitlint</code> 的功能并不完全一样，但它们可以协同工作来帮助实现更好地 <code>git commit</code> 信息。</p><p><code>commitizen</code> 是一个帮助创建符合规范的 <code>git commit</code> 的工具。它在运行 <code>git cz</code> 时会提供一个命令行的交互式界面来引导你创建 <code>commit</code>，使 <code>commit message</code> 更为标准化。</p><p><code>@commitlint/cz-commitlint</code> 是一个为 <code>commitizen</code> 提供的 <code>@commitlint</code> 适配器。它让 <code>commitizen</code> 可以使用 <code>@commitlint</code> 的 <code>config</code> 配置（如 <code>@commitlint/config-conventional</code>）作为 <code>commit</code> 提示的规则。</p><p>所以，可以这么理解：<code>commitizen</code> 提供了一种方式来创建 <code>commit</code>，而 <code>@commitlint/cz-commitlint</code> 则是允许 <code>commitizen</code> 使用 <code>commitlint</code> 的规则进行 <code>commit</code> 信息的创建。</p><p>这样，当使用 <code>commitizen</code> 进行 <code>commit</code> 时，就会遵守 <code>commitlint</code> 的规则，如果不遵守，<code>commit</code> 就会被阻止，除非修改为符合规则的信息。这可以保证项目中的 <code>git commit</code> 样式的一致性。</p><p>总结：<code>commitizen</code> 负责引导创建 <code>commit</code>，而 <code>@commitlint/cz-commitlint</code> 则负责设定创建 <code>commit</code> 的规则。</p></div><div class="hint-container tip"><p class="hint-container-title">`commitizen` 和 `@commitlint/prompt-cli` 的区别</p><p><code>@commitlint/prompt-cli</code> 和 <code>commitizen</code> 的功能类似，它们都提供命令行的交互式界面来引导创建符合规范的 <code>commit message</code>。</p><p>区别主要在于：</p><ul><li><code>@commitlint/prompt-cli</code> 是 <code>commitlint</code> 的一部分，用于捕获 <code>commit message</code> 进行校验。</li><li><code>commitizen</code> 是一个独立的第三方库，它没有自己的校验规范，但可以非常好的与 <code>commitlint</code> 以及其他规范配合使用。</li></ul><p>总的来说，这两者可以一起使用或分开使用，选择使用哪一个主要取决于希望从哪个工具中获取需要的特性或者个人的使用习惯。</p></div><h3 id="changelog" tabindex="-1"><a class="header-anchor" href="#changelog"><span>CHANGELOG</span></a></h3><p>CHANGELOG 记录项目所有的 <code>commit</code> 信息并归类版本，可以快速跳转到该条 <code>commit</code> 记录，方便知道项目哪个版本做了哪些功能有哪些 bug 等信息。也方便排查 bug，对于提交记录一目了然，不用一个一个去翻去查。</p>',10)),s("blockquote",null,[s("p",null,[s("a",b,[n[9]||(n[9]=a("https://juejin.cn/post/7136009620979449893")),t(e)])])]),n[15]||(n[15]=o(`<p>首先安装 <code>standard-version</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> standard-version <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在 <code>package.json</code> 的 <code>scripts</code> 中添加命令：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token property">&quot;standard-version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;standard-version&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 <code>commit type</code> 是 <code>feat</code> 和 <code>fix</code> 的时候执行 <code>npm run standard-version</code>，它会自增版本号。</p><p><code>standard-version</code> 提供自定义配置不同类型对应显示文案，在根目录新建 <code>.versionrc.js</code> 文件：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;feat&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;✨ Features | 新功能&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;fix&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;🐛 Bug Fixes | Bug 修复&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;init&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;🎉 Init | 初始化&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;docs&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;✏️ Documentation | 文档&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;💄 Styles | 风格&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;refactor&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;♻️ Code Refactoring | 代码重构&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;perf&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;⚡ Performance Improvements | 性能优化&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;✅ Tests | 测试&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;revert&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;⏪ Revert | 回退&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;📦‍ Build System | 打包构建&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;chore&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;🚀 Chore | 构建/工程依赖/工具&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ci&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">&#39;👷 Continuous Integration | CI 配置&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7))])}const x=p(r,[["render",h],["__file","04-project-standards.html.vue"]]),q=JSON.parse('{"path":"/frontend/engineering/basic/04-project-standards.html","title":"项目规范","lang":"zh-CN","frontmatter":{"title":"项目规范","date":"2023-11-21T00:00:00.000Z","icon":"STARTUP","category":["工程化"],"tag":["frontend","代码规范"],"description":"代码规范 editorconfig EditorConfig 有助于跨不同编辑器和 IDE 为处理同一项目的多个开发人员维护一致的编码风格。 VSCode 需要安装 EditorConfig for VS Code 插件。 .editorconfig ESLint ESLint 是一个 Javascript Linter，帮助我们规范代码质量，提高团队...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/04-project-standards.html"}],["meta",{"property":"og:title","content":"项目规范"}],["meta",{"property":"og:description","content":"代码规范 editorconfig EditorConfig 有助于跨不同编辑器和 IDE 为处理同一项目的多个开发人员维护一致的编码风格。 VSCode 需要安装 EditorConfig for VS Code 插件。 .editorconfig ESLint ESLint 是一个 Javascript Linter，帮助我们规范代码质量，提高团队..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"frontend"}],["meta",{"property":"article:tag","content":"代码规范"}],["meta",{"property":"article:published_time","content":"2023-11-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"项目规范\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 代码规范","slug":"代码规范","link":"#代码规范","children":[{"level":3,"title":"1.1 editorconfig","slug":"editorconfig","link":"#editorconfig","children":[]},{"level":3,"title":"1.2 ESLint","slug":"eslint","link":"#eslint","children":[]},{"level":3,"title":"1.3 prettier","slug":"prettier","link":"#prettier","children":[]},{"level":3,"title":"1.4 StyleLint","slug":"stylelint","link":"#stylelint","children":[]}]},{"level":2,"title":"2 Git 规范","slug":"git-规范","link":"#git-规范","children":[{"level":3,"title":"2.1 husky","slug":"husky","link":"#husky","children":[]},{"level":3,"title":"2.2 lint-staged","slug":"lint-staged","link":"#lint-staged","children":[]},{"level":3,"title":"2.3 commitizen","slug":"commitizen","link":"#commitizen","children":[]},{"level":3,"title":"2.4 commitlint","slug":"commitlint","link":"#commitlint","children":[]},{"level":3,"title":"2.5 CHANGELOG","slug":"changelog","link":"#changelog","children":[]}]}],"git":{"createdTime":1730805009000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2}]},"readingTime":{"minutes":7.77,"words":2332},"filePathRelative":"frontend/engineering/basic/04-project-standards.md","localizedDate":"2023年11月21日","excerpt":"","autoDesc":true}');export{x as comp,q as data};
