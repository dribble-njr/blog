import{_ as o,c,a as s,e as t,d as a,b as e,r as l,o as i}from"./app-CMUwc0b2.js";const r={},u={href:"https://chromewebstore.google.com/detail/pixijs-devtools/aamddddknhcagpehecnhphigffljadon",target:"_blank",rel:"noopener noreferrer"},k={href:"https://pixijs.com/8.x/guides/advanced/render-groups",target:"_blank",rel:"noopener noreferrer"};function d(m,n){const p=l("ExternalLinkIcon");return i(),c("div",null,[n[6]||(n[6]=s("p",null,"每一帧，PixiJS 都会更新并渲染场景图。让我们来谈谈场景图中有哪些内容，以及它如何影响项目开发。",-1)),n[7]||(n[7]=s("h2",{id:"场景图是一棵树",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#场景图是一棵树"},[s("span",null,"场景图是一棵树")])],-1)),n[8]||(n[8]=s("p",null,[a("场景图的根节点是由应用程序维护的容器，用 "),s("code",null,"app.stage"),a(" 引用。将 sprite 或其他可渲染对象作为子对象添加到 stage 时，它就会被添加到场景图中，并进行渲染和交互。")],-1)),s("p",null,[n[1]||(n[1]=a("PixiJS 容器也可以有子对象，因此当你构建更复杂的场景时，最终会形成一棵父子关系树，stage 是整个场景树的根节点。Chrome 浏览器的 ",-1)),s("a",u,[n[0]||(n[0]=a("Pixi.js devtools",-1)),e(p)]),n[2]||(n[2]=a(" 插件是一个探索项目的有用工具，它允许你在项目运行时实时查看和操作场景图！）。",-1))]),n[9]||(n[9]=t(`<h2 id="parents-and-children" tabindex="-1"><a class="header-anchor" href="#parents-and-children"><span>Parents and Children</span></a></h2><p>父节点移动时，其子节点也会移动。旋转父节点时，其子节点也会旋转。隐藏父对象，子对象也会被隐藏。如果一个游戏对象由多个精灵组成，可以将它们收集到一个容器中，将它们视为世界中的一个对象，作为一个整体移动和旋转。</p><p>在每一帧中，PixiJS 都会运行场景图，从根开始向下穿过所有子对象，直到叶子，以计算每个对象的最终位置、旋转、可见性、透明度等。</p><p>如果父对象的 alpha 设置为 0.5（使其透明 50% ），那么它的所有子对象也将从 50% 开始透明。如果将一个子对象的 alpha 设置为 0.5，它就不会是 50% 透明，而是 0.5 x 0.5 = 0.25 alpha，即 75% 透明。同样，对象的位置是相对于父对象而言的，因此如果父对象的 x 位置设置为 50 像素，而子对象的 x 位置设置为 100 像素，那么它将在屏幕偏移 150 像素处绘制，即 50 + 100。</p><p>下面是一个示例。我们将创建三个精灵，每个都是上一个精灵的子精灵，并对它们的位置、旋转、缩放和 alpha 进行动画处理。尽管每个精灵的属性都设置为相同的值，但父子链会放大每个变化：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Create the application helper and add its render target to the page</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">360</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add a container to center our sprite stack on the page</span>
<span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span>app<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">y</span><span class="token operator">:</span>app<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// load the texture</span>
<span class="token keyword">await</span> Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;assets/images/sample.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create the 3 sprites, each a child of the last</span>
<span class="token keyword">const</span> sprites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> parent <span class="token operator">=</span> container<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> sprite <span class="token operator">=</span> Sprite<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;assets/images/sample.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sprite<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  wrapper<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span><span class="token punctuation">;</span>
  parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
  sprites<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
  parent <span class="token operator">=</span> wrapper<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Set all sprite&#39;s properties to the same value, animated over time</span>
<span class="token keyword">let</span> elapsed <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">delta</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  elapsed <span class="token operator">+=</span> delta<span class="token punctuation">.</span>deltaTime <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> amount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>elapsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> scale <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">+</span> <span class="token number">0.25</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span>
  <span class="token keyword">const</span> alpha <span class="token operator">=</span> <span class="token number">0.75</span> <span class="token operator">+</span> <span class="token number">0.25</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span>
  <span class="token keyword">const</span> angle <span class="token operator">=</span> <span class="token number">40</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span>
  <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">75</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sprites<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> sprite <span class="token operator">=</span> sprites<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    sprite<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>scale<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sprite<span class="token punctuation">.</span>alpha <span class="token operator">=</span> alpha<span class="token punctuation">;</span>
    sprite<span class="token punctuation">.</span>angle <span class="token operator">=</span> angle<span class="token punctuation">;</span>
    sprite<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景图中任何给定节点的累计平移、旋转、缩放和倾斜值都存储在对象的 <code>worldTransform</code> 属性中。 同样，累积的 alpha 值也存储在 <code>worldAlpha</code> 属性中。</p><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/Aug-08-2024 11-58-35.gif" alt="sample" tabindex="0" loading="lazy"><figcaption>sample</figcaption></figure><h2 id="渲染顺序" tabindex="-1"><a class="header-anchor" href="#渲染顺序"><span>渲染顺序</span></a></h2><p>因此，我们有一个树需要渲染，那么渲染顺序是什么？</p><p>PixiJS 会从树根开始向下渲染。在每一级，先渲染当前对象，然后按插入顺序渲染每个子对象。请看下面的示例：两个父对象 A 和 D，以及 A 下的两个子对象 B 和 C：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Create the application helper and add its render target to the page</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">360</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span>

<span class="token comment">// Label showing scene graph hierarchy</span>
<span class="token keyword">const</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;Scene Graph:\\n\\napp.stage\\n  ┗ A\\n     ┗ B\\n     ┗ C\\n  ┗ D&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fill</span><span class="token operator">:</span> <span class="token string">&#39;#ffffff&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span>

<span class="token comment">// Helper function to create a block of color with a letter</span>
<span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token parameter">letter<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> color<span class="token punctuation">,</span> pos</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> bg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>Texture<span class="token punctuation">.</span><span class="token constant">WHITE</span><span class="token punctuation">)</span>
  bg<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">100</span>
  bg<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">100</span>
  bg<span class="token punctuation">.</span>tint <span class="token operator">=</span> color

  <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span> letter<span class="token punctuation">,</span>
    <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fill</span><span class="token operator">:</span> <span class="token string">&#39;#ffffff&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  text<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
  text<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span>

  <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  container<span class="token punctuation">.</span>position <span class="token operator">=</span> pos
  container<span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">false</span>
  container<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>bg<span class="token punctuation">,</span> text<span class="token punctuation">)</span>
  parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>

  letters<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
  <span class="token keyword">return</span> container
<span class="token punctuation">}</span>

<span class="token comment">// Define 4 letters</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>stage<span class="token punctuation">,</span> <span class="token number">0xff0000</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0x00ff00</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0x0000ff</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>stage<span class="token punctuation">,</span> <span class="token number">0xff8800</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Display them over time, in order</span>
<span class="token keyword">let</span> elapsed <span class="token operator">=</span> <span class="token number">0.0</span>
app<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ticker</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  elapsed <span class="token operator">+=</span> ticker<span class="token punctuation">.</span>deltaTime <span class="token operator">/</span> <span class="token number">60.0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>elapsed <span class="token operator">&gt;=</span> letters<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    elapsed <span class="token operator">=</span> <span class="token number">0.0</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> letters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    letters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> elapsed <span class="token operator">&gt;=</span> i
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/Aug-08-2024 16-23-14.gif" alt="render order" tabindex="0" loading="lazy"><figcaption>render order</figcaption></figure><p>如果想对子对象重新排序，可以使用 <code>setChildIndex()</code>。 要在父对象列表的给定位置添加子对象，可以使用 <code>addChildAt()</code>。 最后，您可以使用 <code>sortableChildren</code> 选项，结合设置每个子对象的 <code>zIndex</code> 属性，对对象的子对象进行自动排序。</p><h2 id="渲染组" tabindex="-1"><a class="header-anchor" href="#渲染组"><span>渲染组</span></a></h2>`,15)),s("p",null,[n[4]||(n[4]=a("当你深入研究 PixiJS 时，你会遇到一个强大的功能，即渲染组。 将渲染组视为场景图中的专门容器，其本身就像迷你场景图。 以下是在项目中有效使用渲染组的必要知识。 更多信息，请查看 ",-1)),s("a",k,[n[3]||(n[3]=a("渲染组概述",-1)),e(p)]),n[5]||(n[5]=a("。",-1))]),n[10]||(n[10]=t(`<h2 id="剔除" tabindex="-1"><a class="header-anchor" href="#剔除"><span>剔除</span></a></h2><p>如果您正在构建的项目中，大部分场景对象都不在屏幕上（例如，一个横版游戏），那么您就需要对这些对象进行剔除。</p><p>剔除是一个评估对象（或其子代！）是否在屏幕上的过程，如果不在屏幕上，则关闭对其的渲染。</p><p>如果不对屏幕外的对象进行剔除，即使它们的像素最终都不在屏幕上，渲染器仍会绘制它们。</p><p>PixiJS 并不提供视口剔除的内置支持，但你可以找到第三方插件来满足你的需求。另外，如果你想建立自己的剔除系统，只需在每个 tick 期间运行对象，并将任何不需要绘制的对象的 <code>renderable</code> 设置为 false 即可。</p><h2 id="局部坐标-vs-全局坐标" tabindex="-1"><a class="header-anchor" href="#局部坐标-vs-全局坐标"><span>局部坐标 vs 全局坐标</span></a></h2><p>如果在舞台上添加一个精灵，默认情况下它会显示在屏幕的左上角。这是 PixiJS 使用的全局坐标空间的原点。</p><p>如果你的所有对象都是舞台的子对象，那么你只需要担心这个坐标。但是一旦引入容器和子对象，事情就变得复杂了。</p><p>位于 [50, 100] 处的子对象距离父对象向右 50 像素，向下 100 像素。我们称这两个坐标系为「全局坐标」和「局部坐标」。当你在一个对象上使用 <code>position.set(x, y)</code> 时，你总是在局部坐标系下工作，相对于对象的父对象。</p><p>问题是，很多时候你都想知道某个对象的全局位置。例如，如果您想剔除屏幕外的对象以节省渲染时间，您需要知道给定的子对象是否在视图矩形之外。</p><p>要将本地坐标转换为全局坐标，您需要使用 <code>toGlobal()</code> 函数。下面是一个使用示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Get the global position of an object, relative to the top-left of the screen</span>
<span class="token keyword">let</span> globalPos <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">toGlobal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码会将 <code>globalPos</code> 设置为子对象的全局坐标，相对于全局坐标系中的 [0, 0]。</p><h2 id="全局坐标-vs-屏幕坐标" tabindex="-1"><a class="header-anchor" href="#全局坐标-vs-屏幕坐标"><span>全局坐标 vs 屏幕坐标</span></a></h2><p>当您的项目与主机操作系统或浏览器协同工作时，还有第三个坐标系——「屏幕坐标」（又称「视口坐标」）会发挥作用。屏幕坐标表示相对于 PixiJS 正在呈现的画布元素左上角的位置。DOM 和本地鼠标点击事件等都在屏幕空间中工作。</p><p>现在，在很多情况下，屏幕空间等同于世界空间。如果画布的大小与创建应用程序时指定的呈现视图大小相同，就属于这种情况。 默认情况下就是这样——例如，您将创建一个 800x600 的应用程序窗口并将其添加到 HTML 页面，它就会保持这个大小。世界坐标中的 100 像素等于屏幕空间中的 100 像素。</p><p>但是！常见的情况是拉伸呈现视图，使其充满整个屏幕，或者以较低分辨率呈现，然后放大以提高速度。在这种情况下，画布元素的屏幕尺寸会发生变化（例如通过 CSS），但底层呈现视图不会，从而导致世界坐标和屏幕坐标不匹配。</p>`,17))])}const b=o(r,[["render",d],["__file","04-scene-graph.html.vue"]]),g=JSON.parse('{"path":"/frontend/framework/pixi/04-scene-graph.html","title":"场景图像","lang":"zh-CN","frontmatter":{"title":"场景图像","date":"2024-08-08T00:00:00.000Z","icon":"scene","category":["Pixi"],"tag":["basic-knowledge"],"description":"每一帧，PixiJS 都会更新并渲染场景图。让我们来谈谈场景图中有哪些内容，以及它如何影响项目开发。 场景图是一棵树 场景图的根节点是由应用程序维护的容器，用 app.stage 引用。将 sprite 或其他可渲染对象作为子对象添加到 stage 时，它就会被添加到场景图中，并进行渲染和交互。 PixiJS 容器也可以有子对象，因此当你构建更复杂的场...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/04-scene-graph.html"}],["meta",{"property":"og:title","content":"场景图像"}],["meta",{"property":"og:description","content":"每一帧，PixiJS 都会更新并渲染场景图。让我们来谈谈场景图中有哪些内容，以及它如何影响项目开发。 场景图是一棵树 场景图的根节点是由应用程序维护的容器，用 app.stage 引用。将 sprite 或其他可渲染对象作为子对象添加到 stage 时，它就会被添加到场景图中，并进行渲染和交互。 PixiJS 容器也可以有子对象，因此当你构建更复杂的场..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/Aug-08-2024%2011-58-35.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"场景图像"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"basic-knowledge"}],["meta",{"property":"article:published_time","content":"2024-08-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"场景图像\\",\\"image\\":[\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/Aug-08-2024%2011-58-35.gif\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/Aug-08-2024%2016-23-14.gif\\"],\\"datePublished\\":\\"2024-08-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 场景图是一棵树","slug":"场景图是一棵树","link":"#场景图是一棵树","children":[]},{"level":2,"title":"2 Parents and Children","slug":"parents-and-children","link":"#parents-and-children","children":[]},{"level":2,"title":"3 渲染顺序","slug":"渲染顺序","link":"#渲染顺序","children":[]},{"level":2,"title":"4 渲染组","slug":"渲染组","link":"#渲染组","children":[]},{"level":2,"title":"5 剔除","slug":"剔除","link":"#剔除","children":[]},{"level":2,"title":"6 局部坐标 vs 全局坐标","slug":"局部坐标-vs-全局坐标","link":"#局部坐标-vs-全局坐标","children":[]},{"level":2,"title":"7 全局坐标 vs 屏幕坐标","slug":"全局坐标-vs-屏幕坐标","link":"#全局坐标-vs-屏幕坐标","children":[]}],"git":{"createdTime":1723106088000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2}]},"readingTime":{"minutes":6.94,"words":2081},"filePathRelative":"frontend/framework/pixi/04-scene-graph.md","localizedDate":"2024年8月8日","excerpt":"","autoDesc":true}');export{b as comp,g as data};
