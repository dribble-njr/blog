import{_ as n,c as a,e as s,o as e}from"./app-BFkZJg83.js";const p={};function o(c,t){return e(),a("div",null,t[0]||(t[0]=[s(`<p><code>useId</code> 钩子用于生成唯一且稳定的标识符（ID），可以用于 DOM 元素，传入给 <code>attribute</code>。</p><p>在可重用组件中，特别是在同一页面上多次使用时，这会变得具有挑战性。你不能硬编码一个 <code>id</code> 值，因为那样会有多个具有相同 <code>id</code> 的元素，这是无效的 HTML。你可以使用随机数或字符串，但那样你需要自己管理，并且它不会在渲染之间保持一致。如果你想要服务器渲染你的应用，你需要确保客户端生成的 ID 与服务器生成的 ID 匹配，以避免 bug，这很痛苦。</p><p>这就是 <code>useId</code> 钩子发挥作用的地方。</p><p><code>useId</code> 钩子生成一个唯一且稳定的标识符（ID），你可以用于 DOM 元素。</p><p>这是一个如何在表单组件中使用 <code>useId</code> 钩子的示例：</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">FormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">useId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">htmlFor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Name:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>useId</code> 生成一个唯一 ID，将标签与输入关联起来，确保屏幕阅读器和其他辅助技术可以正确识别表单字段关系。</p><p>与 <code>useState</code> 或 <code>useEffect</code> 不同，<code>useId</code> 不接受任何参数并返回一个单个字符串值。没有 setter 或 updater 函数，因为提供的 ID 应该在整个组件的生命周期中保持不变且唯一。</p><p>它在服务器端渲染（SSR）上下文中特别有用，因为它确保服务器生成的 ID 与客户端生成的 ID 之间的一致性，避免 hydration 不匹配。</p><p>记住，<code>useId</code> 的主要用途是用于可访问性和管理不同 DOM 元素之间的关系，如标签和输入。它帮助保持你的 UI 可预测且可访问，而无需自己管理唯一 ID。</p><p>一个重要的事情是，你不应该使用 <code>useId</code> 为非 DOM 元素生成 ID，如列表中的键或 React 元素的唯一键。这些 ID 应该来自你的数据，而不是 <code>useId</code>。</p>`,11)]))}const l=n(p,[["render",o],["__file","04-useId.html.vue"]]),d=JSON.parse('{"path":"/frontend/framework/react/04-useId.html","title":"useId","lang":"zh-CN","frontmatter":{"title":"useId","date":"2025-06-26T00:00:00.000Z","icon":"id","category":["react"],"tag":["react core","hooks"],"description":"useId 钩子用于生成唯一且稳定的标识符（ID），可以用于 DOM 元素，传入给 attribute。 在可重用组件中，特别是在同一页面上多次使用时，这会变得具有挑战性。你不能硬编码一个 id 值，因为那样会有多个具有相同 id 的元素，这是无效的 HTML。你可以使用随机数或字符串，但那样你需要自己管理，并且它不会在渲染之间保持一致。如果你想要服务...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/framework/react/04-useId.html"}],["meta",{"property":"og:title","content":"useId"}],["meta",{"property":"og:description","content":"useId 钩子用于生成唯一且稳定的标识符（ID），可以用于 DOM 元素，传入给 attribute。 在可重用组件中，特别是在同一页面上多次使用时，这会变得具有挑战性。你不能硬编码一个 id 值，因为那样会有多个具有相同 id 的元素，这是无效的 HTML。你可以使用随机数或字符串，但那样你需要自己管理，并且它不会在渲染之间保持一致。如果你想要服务..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-26T03:54:00.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"react core"}],["meta",{"property":"article:tag","content":"hooks"}],["meta",{"property":"article:published_time","content":"2025-06-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-26T03:54:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"useId\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-26T03:54:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[],"git":{"createdTime":1750910040000,"updatedTime":1750910040000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":1.77,"words":530},"filePathRelative":"frontend/framework/react/04-useId.md","localizedDate":"2025年6月26日","excerpt":"","autoDesc":true}');export{l as comp,d as data};
