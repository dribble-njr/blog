import{_ as o,c,e as s,a as n,d as a,b as i,r,o as l}from"./app-CMUwc0b2.js";const p={},d={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control",target:"_blank",rel:"noopener noreferrer"};function h(m,e){const t=r("ExternalLinkIcon");return l(),c("div",null,[e[5]||(e[5]=s(`<p>对于一些相同的请求，通过复用以前获取的资源，显著提高网页的性能。Web 缓存减少了等待时间和流量，因此减少了显示资源的渲染时间。</p><p>HTTP 缓存的实现有两种方式，分别是<strong>强制缓存</strong>和<strong>协商缓存</strong>。</p><h2 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存"><span>强缓存</span></a></h2><p>强缓存是指：只要浏览器判断缓存没有过期，则直接使用本地缓存，不会向服务器发送请求。</p><p>强缓存是利用下面这两个字段实现的，它们都用来表示资源在客户端缓存的有效期。</p><ul><li><code>Expires</code>：绝对时间；</li><li><code>Cache-Control</code>：缓存指令。</li></ul><h3 id="expires" tabindex="-1"><a class="header-anchor" href="#expires"><span>Expires</span></a></h3><p>响应头包含的日期时间，在这个时间前，浏览器都不会再发起请求，而是直接使用缓存资源。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">Expires</span><span class="token operator">:</span> Wed<span class="token punctuation">,</span> <span class="token number">21</span> Oct <span class="token number">2015</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">GMT</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="cache-control" tabindex="-1"><a class="header-anchor" href="#cache-control"><span>Cache-Control</span></a></h3><p>通用消息头字段，通过指定指令来实现缓存机制。缓存指令是单向的，这意味着在请求中设置的指令，不一定被包含在响应中。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Cache<span class="token operator">-</span>Control<span class="token operator">:</span> max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">20000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>max-age=&lt;seconds&gt;</code> 可以设置过期时间（单位秒），相对于请求的时间计算。</p><p>具体流程：</p><ol><li>当浏览器第一次向服务器发起请求时，服务器响应头会带上 <code>Cache-Control</code>，其中设置了过期时间 <code>max-age</code>；</li><li>浏览器再次向服务器发起请求后，会计算<strong>当前请求时间和过期时间</strong>差值，来判断是否过期，如果过期则重新请求服务器，否则使用本地缓存；</li><li>如果已经过期，服务器再次收到请求后，会更新响应头的 <code>Cache-Control</code>。</li></ol>`,15)),n("p",null,[e[1]||(e[1]=a("除了 ",-1)),e[2]||(e[2]=n("code",null,"max-age",-1)),e[3]||(e[3]=a(" 外，还有其他指令，详见 ",-1)),n("a",d,[e[0]||(e[0]=a("Cache-Control",-1)),i(t)]),e[4]||(e[4]=a("。",-1))]),e[6]||(e[6]=s(`<h3 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级"><span>优先级</span></a></h3><p>当同时有 <code>Expires</code> 和 <code>Cache-Control</code> 字段时，如果 <code>Cache-Control</code> 响应头设置了 <code>max-age</code> 或 <code>s-maxage</code> 指令，那么 <code>Expires</code> 会被忽略。</p><h2 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存"><span>协商缓存</span></a></h2><p>为了知道服务器有没有更新内容，必须和服务器沟通，然后根据服务器返回的信息判断是否使用本地缓存，这种方式称为<strong>协商缓存</strong>。</p><p>协商缓存通过两种头部实现：</p><ul><li>请求头部的 <code>If-Modified-Since</code> 和响应头部的 <code>Last-Modified</code>；</li><li>请求头部的 <code>If-None-Match</code> 和响应头部的 <code>ETag</code>。</li></ul><h3 id="if-modified-since-和-last-modified" tabindex="-1"><a class="header-anchor" href="#if-modified-since-和-last-modified"><span><code>If-Modified-Since</code> 和 <code>Last-Modified</code></span></a></h3><p>这种方式是基于时间实现的。</p><p>响应头 <code>Last-Modified</code> 存放的是资源最后修改时间：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Last<span class="token operator">-</span>Modified<span class="token operator">:</span> Wed<span class="token punctuation">,</span> <span class="token number">21</span> Oct <span class="token number">2015</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">GMT</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请求头中的 <code>If-Modified-Since</code> 含义为资源从 xxx 时间后是否有更新：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>If<span class="token operator">-</span>Modified<span class="token operator">-</span>Since<span class="token operator">:</span> Wed<span class="token punctuation">,</span> <span class="token number">21</span> Oct <span class="token number">2015</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">GMT</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当服务器收到浏览器这个请求头后，会跟当前版本的时间进行比较：</p><ol><li>当前版本的修改时间比这个晚，也就是内容发生变化了，那么会返回 200 和新的内容；</li><li>若当前版本的修改时间较早，也就是没有更新，那么会返回 304，浏览器会从缓存中读取内容。</li></ol><h3 id="etag-和-if-none-match" tabindex="-1"><a class="header-anchor" href="#etag-和-if-none-match"><span><code>ETag</code> 和 <code>If-None-Match</code></span></a></h3><p>这种方式是通过唯一标识实现。</p><p><code>ETag</code> 是资源的特定版本的标识符，响应头会根据返回内容返回一个标识符，具体返回值看服务器的计算策略，可能如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">ETag</span><span class="token operator">:</span> <span class="token string">&#39;33a64df551425fcc55e4d42a148795d9f25f89d4&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当客户端收到这个响应后，会将这个 <code>ETag</code> 保存起来，等下个请求时，会将它放到请求体的 <code>If-None-Match</code> 字段中：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>If<span class="token operator">-</span>None<span class="token operator">-</span>Match<span class="token operator">:</span> <span class="token string">&quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当服务器收到浏览器这个请求头后，会跟当前版本的 <code>ETag</code> 进行比较：</p><ol><li>如果标识符不一致，也就是内容发生变化了，那么会返回 200 和新的内容；</li><li>如果标识符一致，也就是没有更新，那么会返回 304，浏览器会从缓存中读取内容。</li></ol><h3 id="优先级-1" tabindex="-1"><a class="header-anchor" href="#优先级-1"><span>优先级</span></a></h3><p>协商缓存先检查上一次响应头中是否有 <code>ETag</code>，如果有，则发起请求中请求头带上 <code>If-None-Match</code> 字段；如果没有，则检查上一次响应头中是否有 <code>Last-Modified</code> 字段，发起请求中请求头带上 <code>If-Modified-Since</code> 字段。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>HTTP 缓存机制分为两种：强缓存和协商缓存。</p><p>浏览器会首先判断强缓存，如果强缓存生效，那么直接从缓存中获取资源；若没有生效，则会使用协商缓存，发送请求与服务器协商。</p>`,27))])}const g=o(p,[["render",h],["__file","05-http-cache.html.vue"]]),f=JSON.parse('{"path":"/computer-science/networking/05-http-cache.html","title":"HTTP 缓存","lang":"zh-CN","frontmatter":{"title":"HTTP 缓存","date":"2022-05-04T00:00:00.000Z","icon":"cache","category":["计算机网络"],"tag":["HTTP"],"description":"对于一些相同的请求，通过复用以前获取的资源，显著提高网页的性能。Web 缓存减少了等待时间和流量，因此减少了显示资源的渲染时间。 HTTP 缓存的实现有两种方式，分别是强制缓存和协商缓存。 强缓存 强缓存是指：只要浏览器判断缓存没有过期，则直接使用本地缓存，不会向服务器发送请求。 强缓存是利用下面这两个字段实现的，它们都用来表示资源在客户端缓存的有效期...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/computer-science/networking/05-http-cache.html"}],["meta",{"property":"og:title","content":"HTTP 缓存"}],["meta",{"property":"og:description","content":"对于一些相同的请求，通过复用以前获取的资源，显著提高网页的性能。Web 缓存减少了等待时间和流量，因此减少了显示资源的渲染时间。 HTTP 缓存的实现有两种方式，分别是强制缓存和协商缓存。 强缓存 强缓存是指：只要浏览器判断缓存没有过期，则直接使用本地缓存，不会向服务器发送请求。 强缓存是利用下面这两个字段实现的，它们都用来表示资源在客户端缓存的有效期..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T08:02:34.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"HTTP"}],["meta",{"property":"article:published_time","content":"2022-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-11T08:02:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP 缓存\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-11T08:02:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 强缓存","slug":"强缓存","link":"#强缓存","children":[{"level":3,"title":"1.1 Expires","slug":"expires","link":"#expires","children":[]},{"level":3,"title":"1.2 Cache-Control","slug":"cache-control","link":"#cache-control","children":[]},{"level":3,"title":"1.3 优先级","slug":"优先级","link":"#优先级","children":[]}]},{"level":2,"title":"2 协商缓存","slug":"协商缓存","link":"#协商缓存","children":[{"level":3,"title":"2.1 If-Modified-Since 和 Last-Modified","slug":"if-modified-since-和-last-modified","link":"#if-modified-since-和-last-modified","children":[]},{"level":3,"title":"2.2 ETag 和 If-None-Match","slug":"etag-和-if-none-match","link":"#etag-和-if-none-match","children":[]},{"level":3,"title":"2.3 优先级","slug":"优先级-1","link":"#优先级-1","children":[]}]},{"level":2,"title":"3 总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1739260954000,"updatedTime":1739260954000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":3.79,"words":1136},"filePathRelative":"computer-science/networking/05-http-cache.md","localizedDate":"2022年5月4日","excerpt":"","autoDesc":true}');export{g as comp,f as data};
