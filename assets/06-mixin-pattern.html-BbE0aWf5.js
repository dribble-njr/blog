import{_ as e,c as p,e as t,b as c,w as i,r as l,o as u,a as n,d as s}from"./app-CMUwc0b2.js";const r={};function k(d,a){const o=l("CodeDemo");return u(),p("div",null,[a[1]||(a[1]=t(`<h2 id="混入模式" tabindex="-1"><a class="header-anchor" href="#混入模式"><span>混入模式</span></a></h2><p><code>mixin</code> 是一种对象，我们可以使用它为另一个对象或类添加可重复使用的功能，而无需使用继承。我们不能单独使用 mixins：mixins 的唯一目的是在不使用继承的情况下为对象或类添加功能。</p><p>假设我们的应用程序需要创建多条狗。然而，我们创建的基本狗没有任何属性，只有一个名称属性。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>狗不应该只有名字。它应该会 <code>bark</code>、<code>wagTail</code> 和 <code>play</code>！ 我们可以创建一个 mixin，而不是直接将其添加到 <code>Dog</code> 中。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> dogFunctionality <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">bark</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Woof!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">wagTail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Wagging my tail!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">play</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Playing!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用 <code>Object.assign</code> 方法将 <code>dogFunctionality</code> 混合元素添加到 <code>Dog</code> 原型中。通过该方法，我们可以向目标对象添加属性：本例中为 <code>Dog.prototype</code>。<code>Dog</code> 的每个新实例都可以访问 <code>dogFunctionality</code> 的属性，因为它们都被添加到了 <code>Dog</code> 的原型中！</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dogFunctionality <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">bark</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Woof!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">wagTail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Wagging my tail!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">play</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Playing!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> dogFunctionality<span class="token punctuation">)</span>

<span class="token keyword">const</span> pet1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;Daisy&#39;</span><span class="token punctuation">)</span>

pet1<span class="token punctuation">.</span>name <span class="token comment">// Daisy</span>
pet1<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Woof!</span>
pet1<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Playing!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然我们可以在不使用继承的情况下使用 mixin 添加功能，但 mixin 本身也可以使用继承！大多数哺乳动物（除了海豚，也许还有其他动物）都会走路和睡觉。狗是哺乳动物，应该会走路和睡觉！</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> animalFunctionality <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">walk</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Walking!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sleep</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Sleeping!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用 <code>Object.assign</code> 将这些属性添加到 <code>dogFunctionality</code> 原型中。在本例中，目标对象是 <code>dogFunctionality</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> animalFunctionality <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">walk</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Walking!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sleep</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Sleeping!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dogFunctionality <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">bark</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Woof!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">wagTail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Wagging my tail!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">play</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Playing!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>dogFunctionality<span class="token punctuation">,</span> animalFunctionality<span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> dogFunctionality<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在现实世界中，浏览器环境中的 <code>Window</code> 就是一个 mixin 的例子。 <code>Window</code> 对象从 <code>WindowOrWorkerGlobalScope</code> 和 <code>WindowEventHandlers</code> mixins 中实现了许多属性，这使我们可以访问 <code>setTimeout</code> 和 <code>setInterval</code>、<code>indexedDB</code> 和 <code>isSecureContext</code> 等属性。</p><p>由于它是一个 mixin，因此只能用于为对象添加功能，您将无法创建 <code>WindowOrWorkerGlobalScope</code> 类型的对象。</p>`,14)),c(o,{id:"code-demo-32",type:"normal",title:"indexedDB",code:"eJyNkctOwzAQRX9lyMauhPIBlcoCwmOBxKKCbrJx40llcGcqP2ikKv+OY6hIIZW6sWXdmXPveA7Fuy/mxd6Q5n2ZTuxQV7cl75CkCFzxs/FBzGqq6adIaX3/iRQGAQmdFGts2WEky0qLa5A4yDNY3MChJoD8LHcu3xW2KtogE/GoOAzR0ZuyEWEBQtTUj/2YxvxU0UZqgmECOfs2aJg8Wywtb6R4zWWGNldD6n4AnegPjrewyug8xpMibdF52JrO0BxO7dI4kzFywHPcF7di94Hu0fJa2WWTPvNIN36JTXR4xxSwC7/4P8J//lRkEzzaNkEhps21hnAUeKLhHHUq8AXsibbkUPRf/yPcZA=="},{default:i(()=>a[0]||(a[0]=[n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("window"),n("span",{class:"token punctuation"},"."),s("indexedDB"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"open"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'toDoList'"),n("span",{class:"token punctuation"},")"),s(`

window`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addEventListener"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'beforeunload'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"event"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  event`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"preventDefault"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
  event`),n("span",{class:"token punctuation"},"."),s("returnValue "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"''"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`

window`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"onbeforeunload"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Unloading!'"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'From WindowEventHandlers mixin: onbeforeunload'"),n("span",{class:"token punctuation"},","),s(" window"),n("span",{class:"token punctuation"},"."),s("onbeforeunload"),n("span",{class:"token punctuation"},")"),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'From WindowOrWorkerGlobalScope mixin: isSecureContext'"),n("span",{class:"token punctuation"},","),s(" window"),n("span",{class:"token punctuation"},"."),s("isSecureContext"),n("span",{class:"token punctuation"},")"),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'WindowEventHandlers itself is undefined'"),n("span",{class:"token punctuation"},","),s(" window"),n("span",{class:"token punctuation"},"."),s("WindowEventHandlers"),n("span",{class:"token punctuation"},")"),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'WindowOrWorkerGlobalScope itself is undefined'"),n("span",{class:"token punctuation"},","),s(" window"),n("span",{class:"token punctuation"},"."),s("WindowOrWorkerGlobalScope"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1,__:[0]}),a[2]||(a[2]=t(`<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>在引入 ES6 类之前，mixins 通常用于为 React 组件添加功能。 React 团队不鼓励使用 mixins，因为它很容易给组件增加不必要的复杂性，使其难以维护和重用。React 团队鼓励使用高阶组件，现在这些组件通常可以被 Hooks 代替。</p><p>混入模式看起来和继承非常类似，但是有一点区别：</p><ul><li>继承：继承通常是在类定义时确定的，子类会继承父类的所有方法和属性，并且可以覆盖或扩展它们。</li><li>混入：混入是动态的、灵活的，你可以在对象或类实例创建后将某些行为混入，而不必在定义时就确定继承关系。混入只是通过组合而不是创建严格的继承链。</li></ul><p>因此上面的实现仍然是混入模式。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>虽然你修改了原型，但混入模式的本质是将多个功能组合到一个类或对象中，而不强制遵循严格的继承层次结构。因此，它依然可以被认为是混入模式。</p></div><p>如果不想直接修改原型，可以选择实例级别的混入：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dogFunctionality <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">bark</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Woof!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">wagTail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Wagging my tail!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">play</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Playing!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> pet1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;Daisy&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 仅将功能混入特定实例，而不是修改原型</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>pet1<span class="token punctuation">,</span> dogFunctionality<span class="token punctuation">)</span>

pet1<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Woof!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>通过向对象的原型注入功能，mixins 可以让我们在没有继承的情况下为对象轻松添加功能。修改对象的原型被认为是一种不好的做法，因为这会导致原型污染和函数来源的不确定性。</p></div>`,9))])}const m=e(r,[["render",k],["__file","06-mixin-pattern.html.vue"]]),g=JSON.parse('{"path":"/reading/patterns/vanilla/06-mixin-pattern.html","title":"混入模式","lang":"zh-CN","frontmatter":{"title":"混入模式","date":"2024-09-19T00:00:00.000Z","icon":"mixin","author":"patterns","category":["reading"],"tag":["design pattern","vanilla","mixin-pattern"],"description":"混入模式 mixin 是一种对象，我们可以使用它为另一个对象或类添加可重复使用的功能，而无需使用继承。我们不能单独使用 mixins：mixins 的唯一目的是在不使用继承的情况下为对象或类添加功能。 假设我们的应用程序需要创建多条狗。然而，我们创建的基本狗没有任何属性，只有一个名称属性。 狗不应该只有名字。它应该会 bark、wagTail 和 pl...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/06-mixin-pattern.html"}],["meta",{"property":"og:title","content":"混入模式"}],["meta",{"property":"og:description","content":"混入模式 mixin 是一种对象，我们可以使用它为另一个对象或类添加可重复使用的功能，而无需使用继承。我们不能单独使用 mixins：mixins 的唯一目的是在不使用继承的情况下为对象或类添加功能。 假设我们的应用程序需要创建多条狗。然而，我们创建的基本狗没有任何属性，只有一个名称属性。 狗不应该只有名字。它应该会 bark、wagTail 和 pl..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"patterns"}],["meta",{"property":"article:tag","content":"design pattern"}],["meta",{"property":"article:tag","content":"vanilla"}],["meta",{"property":"article:tag","content":"mixin-pattern"}],["meta",{"property":"article:published_time","content":"2024-09-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"混入模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"patterns\\"}]}"]]},"headers":[{"level":2,"title":"1 混入模式","slug":"混入模式","link":"#混入模式","children":[]},{"level":2,"title":"2 总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1726737710000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2}]},"readingTime":{"minutes":3.37,"words":1010},"filePathRelative":"reading/patterns/vanilla/06-mixin-pattern.md","localizedDate":"2024年9月19日","excerpt":"","autoDesc":true}');export{m as comp,g as data};
