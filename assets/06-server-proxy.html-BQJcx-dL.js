import{_ as l,c as r,e,a,d as s,b as i,r as o,o as p}from"./app-Bq0FCg7h.js";const c={},d={href:"https://github.com/Elegycloud/clash-for-linux-backup",target:"_blank",rel:"noopener noreferrer"},u={href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh",target:"_blank",rel:"noopener noreferrer"};function m(v,n){const t=o("ExternalLinkIcon");return p(),r("div",null,[n[7]||(n[7]=e(`<p>在许多开发和部署场景中，使用代理服务器能够帮助我们绕过网络限制，提升安全性，或者加速访问。在本篇文章中，我们将讨论如何在云服务器上设置代理，主要包括通过隧道技术与使用 Clash for Linux 两种方式。</p><h2 id="使用-ssh-隧道设置代理" tabindex="-1"><a class="header-anchor" href="#使用-ssh-隧道设置代理"><span>使用 SSH 隧道设置代理</span></a></h2><p>SSH 隧道是一种通过安全通道将本地端口转发到远程服务器的方法。使用 SSH 隧道可以通过云服务器作为中介，绕过局域网或区域性网络的限制，访问外部服务。下面是如何设置 SSH 隧道代理。</p><p>一般云服务器都支持 SSH 隧道，如果是基于 Ubuntu 的系统，可以通过以下命令来确认：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl status <span class="token function">ssh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果看到 <code>active (running)</code> 字样，说明 SSH 服务正在运行。</p><p>如果没有安装，可以使用以下命令安装：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openssh-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在本地电脑上，使用 SSH 连接到云服务器：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-R</span> <span class="token number">7890</span>:127.0.0.1:7890 root@<span class="token operator">&lt;</span>your-server-ip<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在云服务器上，设置环境变量，编辑 <code>~/.bashrc</code>（或 <code>~/.zshrc</code>，取决于你使用的 shell） 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">vi</span> ~/.bashrc
<span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span>http://127.0.0.1:7890
<span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://127.0.0.1:7890
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，云服务器上的所有请求，都会经过本地的 7890 端口。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>该方式优点在于简单，在一些简单的场景下可以满足需求。</p><p>缺点在于依赖 SSH 隧道，如果使用 GitHub Action 触发 CI，由于没有 SSH 隧道，所以会导致无法使用代理。</p><p>除非你能保证本地电脑一直处于连接状态，否则不建议使用该方式。</p></div><h2 id="使用-clash-for-linux-设置代理" tabindex="-1"><a class="header-anchor" href="#使用-clash-for-linux-设置代理"><span>使用 Clash for Linux 设置代理</span></a></h2>`,15)),a("p",null,[a("a",d,[n[0]||(n[0]=s("Clash for Linux")),i(t)]),n[1]||(n[1]=s(" 是一款功能强大的代理工具，支持多种协议，包括 HTTP、SOCKS5 等。通过 Clash for Linux，我们可以方便地在本地电脑上设置代理，并将其同步到云服务器上。"))]),n[8]||(n[8]=e(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> clone https://github.com/Elegycloud/clash-for-linux-backup.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入到项目目录，编辑 <code>.env</code> 文件，修改变量 <code>CLASH_URL</code> 的值。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> clash-for-linux-backup
$ <span class="token function">vi</span> .env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>CLASH_SECRET</code> 变量会用于登陆 dashboard。</p></div><p>启动代理：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">bash</span> start.sh
正在检测订阅地址<span class="token punctuation">..</span>.
Clash订阅地址可访问！                                      <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>

正在下载Clash配置文件<span class="token punctuation">..</span>.
配置文件config.yaml下载成功！                              <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>

正在启动Clash服务<span class="token punctuation">..</span>.
服务启动成功！                                             <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>

Clash Dashboard 访问地址：http://<span class="token operator">&lt;</span>ip<span class="token operator">&gt;</span>:9090/ui
Secret：xxxxxxxxxxxxx

请执行以下命令加载环境变量: <span class="token builtin class-name">source</span> /etc/profile.d/clash.sh

请执行以下命令开启系统代理: proxy_on

若要临时关闭系统代理，请执行: proxy_off
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加载环境变量并启动服务：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">source</span> /etc/profile.d/clash.sh
$ proxy_on
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>检查服务端口：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">netstat</span> <span class="token parameter variable">-tuln</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">7890</span>
$ <span class="token function">netstat</span> <span class="token parameter variable">-tln</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&#39;9090|789.&#39;</span>
tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::7892                 :::*                    LISTEN     
tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::7890                 :::*                    LISTEN     
tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::7891                 :::*                    LISTEN     
tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::9090                 :::*                    LISTEN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检查环境变量：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">env</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&#39;http_proxy|https_proxy&#39;</span>
<span class="token assign-left variable">http_proxy</span><span class="token operator">=</span>http://127.0.0.1:7890
<span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://127.0.0.1:7890
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),a("p",null,[n[3]||(n[3]=s("这样，云服务器上的代理即设置完成。若要查看 dashboard，可以使用 VS Code 插件 ")),a("a",u,[n[2]||(n[2]=s("Remote - SSH")),i(t)]),n[4]||(n[4]=s(" 连接到云服务器，设置端口转发，然后在浏览器中访问 ")),n[5]||(n[5]=a("code",null,"http://127.0.0.1:9090/ui",-1)),n[6]||(n[6]=s("。"))]),n[9]||(n[9]=e(`<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241204164400.png" alt="端口转发" tabindex="0" loading="lazy"><figcaption>端口转发</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><p>配置完成后，dashboard 会在关闭连接后停止，所以可以进行持久化。</p></div><p>编辑 <code>~/.bashrc</code> 文件，添加以下内容：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">vi</span> ~/.bashrc
<span class="token function">bash</span> /path/to/clash-for-linux-backup/start.sh
<span class="token builtin class-name">source</span> /etc/profile.d/clash.sh
proxy_on
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，每次连接到云服务器后，都会自动启动代理。</p>`,5))])}const h=l(c,[["render",m],["__file","06-server-proxy.html.vue"]]),g=JSON.parse('{"path":"/backend/linux/practice/06-server-proxy.html","title":"云服务器设置代理","lang":"zh-CN","frontmatter":{"title":"云服务器设置代理","date":"2024-12-04T00:00:00.000Z","icon":"clash","category":["linux"],"tag":["clash","proxy"],"description":"在许多开发和部署场景中，使用代理服务器能够帮助我们绕过网络限制，提升安全性，或者加速访问。在本篇文章中，我们将讨论如何在云服务器上设置代理，主要包括通过隧道技术与使用 Clash for Linux 两种方式。 使用 SSH 隧道设置代理 SSH 隧道是一种通过安全通道将本地端口转发到远程服务器的方法。使用 SSH 隧道可以通过云服务器作为中介，绕过局...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/backend/linux/practice/06-server-proxy.html"}],["meta",{"property":"og:title","content":"云服务器设置代理"}],["meta",{"property":"og:description","content":"在许多开发和部署场景中，使用代理服务器能够帮助我们绕过网络限制，提升安全性，或者加速访问。在本篇文章中，我们将讨论如何在云服务器上设置代理，主要包括通过隧道技术与使用 Clash for Linux 两种方式。 使用 SSH 隧道设置代理 SSH 隧道是一种通过安全通道将本地端口转发到远程服务器的方法。使用 SSH 隧道可以通过云服务器作为中介，绕过局..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241204164400.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-04T08:46:00.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"云服务器设置代理"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"clash"}],["meta",{"property":"article:tag","content":"proxy"}],["meta",{"property":"article:published_time","content":"2024-12-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-04T08:46:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"云服务器设置代理\\",\\"image\\":[\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241204164400.png\\"],\\"datePublished\\":\\"2024-12-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-04T08:46:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 使用 SSH 隧道设置代理","slug":"使用-ssh-隧道设置代理","link":"#使用-ssh-隧道设置代理","children":[]},{"level":2,"title":"2 使用 Clash for Linux 设置代理","slug":"使用-clash-for-linux-设置代理","link":"#使用-clash-for-linux-设置代理","children":[]}],"git":{"createdTime":1733301960000,"updatedTime":1733301960000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":2.97,"words":892},"filePathRelative":"backend/linux/practice/06-server-proxy.md","localizedDate":"2024年12月4日","excerpt":"","autoDesc":true}');export{h as comp,g as data};
