import{_ as p,c as o,e as c,a as s,d as a,b as e,r as l,o as u}from"./app-CMUwc0b2.js";const i={},r={href:"https://epicreact.dev/why-you-shouldnt-put-refs-in-a-dependency-array",target:"_blank",rel:"noopener noreferrer"},k={href:"https://tylermcginnis.com/imperative-vs-declarative-programming/",target:"_blank",rel:"noopener noreferrer"};function d(m,n){const t=l("ExternalLinkIcon");return u(),o("div",null,[n[3]||(n[3]=c(`<p>有时你需要暴露一个方法给父组件，让父组件可以主动与子组件交互。这可以通过 <code>ref</code> 来实现，<code>useRef</code> 钩子可以让你拥有一个与组件实例关联的对象，并且不会改变时触发组件重新渲染。</p><p>父组件可以传递一个 <code>ref</code> 给子组件，然后子组件可以在这个 <code>ref</code> 上挂载方法，父组件可以调用这些方法。</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">InputAPI</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function-variable function">focusInput</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">MyInput</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	ref<span class="token punctuation">,</span>
	<span class="token operator">...</span>props
<span class="token punctuation">}</span><span class="token operator">:</span> React<span class="token punctuation">.</span>InputHTMLAttributes<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
	ref<span class="token operator">:</span> React<span class="token punctuation">.</span>RefObject<span class="token operator">&lt;</span>InputAPI<span class="token operator">&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	ref<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token function-variable function">focusInput</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> myInputRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>InputAPI<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyInput</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>myInputRef<span class="token punctuation">}</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Enter your name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> myInputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focusInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
				Focus the input
			</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这实际上是可行的，但是当在 React 的 concurrent/suspense 特性中使用时，会出现一些边缘情况的问题（它也不支持回调 ref）。所以，我们使用 <code>useImperativeHandle</code> 钩子来实现这个功能：</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">InputAPI</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function-variable function">focusInput</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">MyInput</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	ref<span class="token punctuation">,</span>
	<span class="token operator">...</span>props
<span class="token punctuation">}</span><span class="token operator">:</span> React<span class="token punctuation">.</span>InputHTMLAttributes<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
	ref<span class="token operator">:</span> React<span class="token punctuation">.</span>RefObject<span class="token operator">&lt;</span>InputAPI<span class="token operator">&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>
		ref<span class="token punctuation">,</span>
		<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function-variable function">focusInput</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>useImperativeHandle</code> 接收三个参数：</p><ul><li><code>ref</code>：与组件实例关联的 <code>ref</code> 对象。</li><li><code>createHandle</code>：一个函数，返回一个对象，这个对象就是暴露给父组件的 API。</li><li><code>dependencies</code>：依赖数组，当依赖数组中的值发生变化时，<code>createHandle</code> 函数会重新执行。</li></ul>`,7)),s("p",null,[s("a",r,[n[0]||(n[0]=a("Why you shouldn't put refs in a dependency array",-1)),e(t)]),n[1]||(n[1]=a(".",-1))]),n[4]||(n[4]=s("p",null,[s("code",null,"useImperativeHandle"),a(" 允许我们暴露一些方法给父组件，这些方法可以被父组件调用。这在某些场景下非常有用，比如你有一个需要手动操作的组件，但是你又不想让父组件直接操作这个组件的内部状态。")],-1)),n[5]||(n[5]=s("p",null,"::: TIP",-1)),n[6]||(n[6]=s("p",null,[a("大多数情况下，你不需要 "),s("code",null,"useImperativeHandle"),a("。在决定使用它之前，问问自己是否还有其他方式可以实现你的目标。")],-1)),s("p",null,[s("a",k,[n[2]||(n[2]=a("Imperative vs Declarative Programming",-1)),e(t)])]),n[7]||(n[7]=s("p",null,":::",-1))])}const f=p(i,[["render",d],["__file","07-useImperativeHandle.html.vue"]]),g=JSON.parse('{"path":"/frontend/framework/react/07-useImperativeHandle.html","title":"useImperativeHandle","lang":"zh-CN","frontmatter":{"title":"useImperativeHandle","date":"2025-07-16T00:00:00.000Z","tags":["react"],"description":"有时你需要暴露一个方法给父组件，让父组件可以主动与子组件交互。这可以通过 ref 来实现，useRef 钩子可以让你拥有一个与组件实例关联的对象，并且不会改变时触发组件重新渲染。 父组件可以传递一个 ref 给子组件，然后子组件可以在这个 ref 上挂载方法，父组件可以调用这些方法。 这实际上是可行的，但是当在 React 的 concurrent/s...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/frontend/framework/react/07-useImperativeHandle.html"}],["meta",{"property":"og:title","content":"useImperativeHandle"}],["meta",{"property":"og:description","content":"有时你需要暴露一个方法给父组件，让父组件可以主动与子组件交互。这可以通过 ref 来实现，useRef 钩子可以让你拥有一个与组件实例关联的对象，并且不会改变时触发组件重新渲染。 父组件可以传递一个 ref 给子组件，然后子组件可以在这个 ref 上挂载方法，父组件可以调用这些方法。 这实际上是可行的，但是当在 React 的 concurrent/s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-22T06:35:28.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:published_time","content":"2025-07-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-22T06:35:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"useImperativeHandle\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-16T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-22T06:35:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[],"git":{"createdTime":1753166128000,"updatedTime":1753166128000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":1.58,"words":474},"filePathRelative":"frontend/framework/react/07-useImperativeHandle.md","localizedDate":"2025年7月16日","excerpt":"","autoDesc":true}');export{f as comp,g as data};
