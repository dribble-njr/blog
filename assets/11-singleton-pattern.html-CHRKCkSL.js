import{_ as p,c as o,e as t,a as s,d as a,b as i,w as l,r as c,o as r}from"./app-DjBUyNfp.js";const u={};function d(k,n){const e=c("RouteLink");return r(),o("div",null,[n[9]||(n[9]=t(`<p>单例是指只需实例化一次就可以全局访问的类。单例可以在整个应用程序中共享，这使得单例非常适合管理应用程序中的全局状态。</p><p>比如一个邮件应用，可以使用单例模式来共享一个 <code>EmailClient</code> 对象。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">EmailClient</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> transporter<span class="token operator">:</span> Transporter
  <span class="token keyword">private</span> <span class="token keyword">static</span> instance<span class="token operator">:</span> Mailer

  <span class="token comment">// 使用 nodemailer 配置，发送邮件</span>
  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> smtpConfig<span class="token operator">:</span> SMTPTransport<span class="token punctuation">.</span>Options <span class="token operator">=</span> <span class="token punctuation">{</span>
      host<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token constant">NODEMAILER_HOST</span><span class="token punctuation">,</span>
      port<span class="token operator">:</span> <span class="token number">465</span><span class="token punctuation">,</span>
      secure<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      auth<span class="token operator">:</span> <span class="token punctuation">{</span>
        user<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token constant">NODEMAILER_AUTH_USER</span><span class="token punctuation">,</span>
        pass<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token constant">NODEMAILER_AUTH_PASS</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      socketTimeout<span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>
      connectionTimeout<span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>
      logger<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      debug<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>transporter <span class="token operator">=</span> <span class="token function">createTransport</span><span class="token punctuation">(</span>smtpConfig<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mailer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里构造函数为 <code>private</code>，因此无法在外部创建 <code>EmailClient</code> 对象，但可以通过 <code>getInstance</code> 方法获取单例对象。</p>`,4)),s("p",null,[n[1]||(n[1]=a("如果使用 js 创建对象，由于 js 无 ")),n[2]||(n[2]=s("code",null,"private",-1)),n[3]||(n[3]=a(" 修饰符，可以在 ")),n[4]||(n[4]=s("code",null,"constructor",-1)),n[5]||(n[5]=a(" 中使用 ")),i(e,{to:"/frontend/basic/javascript/013-class.html#%E6%8A%BD%E8%B1%A1%E5%9F%BA%E7%B1%BB"},{default:l(()=>n[0]||(n[0]=[s("code",null,"new.target",-1)])),_:1,__:[0]}),n[6]||(n[6]=a(" 判断是否为 ")),n[7]||(n[7]=s("code",null,"EmailClient",-1)),n[8]||(n[8]=a(" 类，如果是则抛出错误。"))]),n[10]||(n[10]=t(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">EmailClient</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">===</span> EmailClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Cannot instantiate EmailClient directly&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，一个 <code>EmailClient</code> 对象只能通过 <code>getInstance</code> 方法获取，而且只会在初始化时创建一次，不会大量地创建多个 <code>EmailClient</code> 对象，防止大量连接邮件服务造成性能问题。</p>`,2))])}const v=p(u,[["render",d],["__file","11-singleton-pattern.html.vue"]]),b=JSON.parse('{"path":"/reading/patterns/vanilla/11-singleton-pattern.html","title":"单例模式","lang":"zh-CN","frontmatter":{"title":"单例模式","date":"2024-10-28T00:00:00.000Z","icon":"singleton","author":"patterns","category":["reading"],"tag":["design pattern","vanilla","singleton-pattern"],"description":"单例是指只需实例化一次就可以全局访问的类。单例可以在整个应用程序中共享，这使得单例非常适合管理应用程序中的全局状态。 比如一个邮件应用，可以使用单例模式来共享一个 EmailClient 对象。 这里构造函数为 private，因此无法在外部创建 EmailClient 对象，但可以通过 getInstance 方法获取单例对象。 如果使用 js 创建...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/11-singleton-pattern.html"}],["meta",{"property":"og:title","content":"单例模式"}],["meta",{"property":"og:description","content":"单例是指只需实例化一次就可以全局访问的类。单例可以在整个应用程序中共享，这使得单例非常适合管理应用程序中的全局状态。 比如一个邮件应用，可以使用单例模式来共享一个 EmailClient 对象。 这里构造函数为 private，因此无法在外部创建 EmailClient 对象，但可以通过 getInstance 方法获取单例对象。 如果使用 js 创建..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"patterns"}],["meta",{"property":"article:tag","content":"design pattern"}],["meta",{"property":"article:tag","content":"vanilla"}],["meta",{"property":"article:tag","content":"singleton-pattern"}],["meta",{"property":"article:published_time","content":"2024-10-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单例模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"patterns\\"}]}"]]},"headers":[],"git":{"createdTime":1730086672000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":2}]},"readingTime":{"minutes":1.02,"words":307},"filePathRelative":"reading/patterns/vanilla/11-singleton-pattern.md","localizedDate":"2024年10月28日","excerpt":"","autoDesc":true}');export{v as comp,b as data};
