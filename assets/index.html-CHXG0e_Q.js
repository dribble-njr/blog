import{_ as e,c as o,a as s,e as i,d as t,b as p,r as u,o as c}from"./app-DjBUyNfp.js";const l={},r={href:"https://github.com/dribble-njr/github-auto-commit",target:"_blank",rel:"noopener noreferrer"};function d(m,n){const a=u("ExternalLinkIcon");return c(),o("div",null,[n[3]||(n[3]=s("p",null,"灵感来源：某天在 GitHub 上看到一个用户的热点图，发现他每天都有提交记录，非常帅！",-1)),n[4]||(n[4]=s("p",null,"于是先搜搜有没有自动提交的工具，但是找到的结果有些需要在本地运行；有些则没有检查当天是否有提交记录，如果有提交当然不希望有一个虚拟的提交。",-1)),n[5]||(n[5]=s("p",null,"于是就有了这个项目，使用 GitHub Actions 自动提交代码，保持 GitHub 热点图常绿。",-1)),s("p",null,[n[1]||(n[1]=t("项目地址：")),s("a",r,[n[0]||(n[0]=t("github-auto-commit")),p(a)]),n[2]||(n[2]=t("。"))]),n[6]||(n[6]=i(`<h2 id="功能特点" tabindex="-1"><a class="header-anchor" href="#功能特点"><span>功能特点</span></a></h2><ul><li><strong>自动提交与推送</strong>: 如果所有代码仓库今天没有任何提交，工作流程将自动提交一个虚拟的提交，并将其推送到代码仓库。</li><li><strong>支持配置</strong>: 可以根据自己的需求进行配置，包括调整定时任务时间、更改 Git 设置信息以及自定义提交信息等。</li></ul><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h2><ol><li><strong>Fork 本仓库</strong>: 首先，将本仓库 Fork 到你自己的 GitHub 账号下。</li><li><strong>生成个人访问令牌（PAT）</strong>: 在 GitHub 设置中生成一个具有 <code>repo</code> 权限范围的个人访问令牌。</li><li><strong>设置仓库 Secrets</strong>: 在仓库的设置中，添加一个名为 <code>TOKEN</code> 的 Secrets，将在步骤 2 中生成的 PAT 值作为其值。</li></ol><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p>可以根据自己的需求对工作流程进行以下配置：</p><ol><li><strong>调整定时任务时间</strong>: 可以在工作流程文件中修改 <code>schedule</code> 部分的 cron 表达式，以更改工作流程的触发时间。</li><li><strong>更改 Git 设置信息</strong>: 在工作流程文件中的 <code>Set up Git</code> 步骤中，更改 Git 的用户邮箱和用户名。</li><li><strong>自定义提交信息</strong>: 在工作流程文件的最后一步中，根据需要修改 <code>date_today</code>、<code>time_start</code>、<code>time_end</code>、<code>repo</code> 和 <code>commit_message</code> 等变量，以调整自动提交的内容和提交信息。</li></ol><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><p>整体工作原理是使用 GitHub Actions 实现定时触发任务。</p><p>使用 GitHub 提供的 API 来获取用户所有的代码仓库，并获取取每个仓库的提交信息。</p><p>如果在所有仓库中都没有找到今天的提交记录，工作流程会自动创建一个虚拟的提交并推送到代码仓库中。</p><p>完整代码如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Auto Commit

<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">schedule</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">cron</span><span class="token punctuation">:</span> <span class="token string">&#39;50 15 * * *&#39;</span> <span class="token comment"># run at 23:50 in China time</span>
  <span class="token key atrule">workflow_dispatch</span><span class="token punctuation">:</span>

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">check_commits</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout this repository
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up Git
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          # You should set your email and name here.</span>

          git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global user.email &quot;wzw15292257101@163.com&quot;
          git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global user.name &quot;dribble<span class="token punctuation">-</span>njr&quot;

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Get all repositories
        <span class="token key atrule">id</span><span class="token punctuation">:</span> get<span class="token punctuation">-</span>repos
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          echo &quot;Fetching all repositories...&quot;
          response=$(curl -s -w &quot;\\n%{http_code}&quot; -H &quot;Authorization: token \${{ secrets.TOKEN }}&quot; &quot;https://api.github.com/user/repos?type=all&quot;)
          http_code=$(echo &quot;$response&quot; | tail -n1)
          response_body=$(echo &quot;$response&quot; | sed &#39;$d&#39;)</span>

          echo &quot;<span class="token punctuation">[</span>HTTP status code<span class="token punctuation">]</span><span class="token punctuation">:</span> $http_code&quot;

          contained_repos=$(echo &quot;$response_body&quot; <span class="token punctuation">|</span> jq <span class="token punctuation">-</span>r &#39;.<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">|</span> .full_name&#39;)
          <span class="token key atrule">echo &quot;Contained repositories</span><span class="token punctuation">:</span> $contained_repos&quot;

          echo &quot;<span class="token punctuation">:</span><span class="token punctuation">:</span>set<span class="token punctuation">-</span>output name=repos<span class="token punctuation">:</span><span class="token punctuation">:</span>$(echo &quot;$contained_repos&quot; <span class="token punctuation">|</span> tr &#39;\\n&#39; &#39;<span class="token punctuation">,</span>&#39;)&quot; <span class="token comment"># output repos</span>

      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Read repositories list and check commits
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          # Set custom timezone and other config by yourself.</span>

          date_today=$(TZ=&#39;Asia/Shanghai&#39; date <span class="token punctuation">-</span>I) <span class="token comment"># Date part</span>
          time_start=&quot;$<span class="token punctuation">{</span>date_today<span class="token punctuation">}</span>T00<span class="token punctuation">:</span>00<span class="token punctuation">:</span>00&quot;
          time_end=&quot;$<span class="token punctuation">{</span>date_today<span class="token punctuation">}</span>T23<span class="token punctuation">:</span>55<span class="token punctuation">:</span>00&quot;
          repo=&quot;https<span class="token punctuation">:</span>//github.com/dribble<span class="token punctuation">-</span>njr/github<span class="token punctuation">-</span>auto<span class="token punctuation">-</span>commit.git&quot;
          commit_message=&quot;Auto commit on $(TZ=&#39;Asia/Shanghai&#39; date &#39;+%Y<span class="token punctuation">-</span>%m<span class="token punctuation">-</span>%d %H<span class="token punctuation">:</span>%M<span class="token punctuation">:</span>%S&#39;)&quot;

          commits_exist=false
          echo &quot;Checking commits between $time_start and $time_end&quot;

          IFS=&#39;<span class="token punctuation">,</span> &#39; read <span class="token punctuation">-</span>r <span class="token punctuation">-</span>a repos &lt;&lt;&lt; &quot;$<span class="token punctuation">{</span><span class="token punctuation">{</span> steps.get<span class="token punctuation">-</span>repos.outputs.repos <span class="token punctuation">}</span><span class="token punctuation">}</span>&quot;
          for repo in &quot;$<span class="token punctuation">{</span>repos<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token punctuation">}</span>&quot;; do
            echo &quot;Checking commits for $repo&quot;
            <span class="token key atrule">commit_today=$(curl -H &quot;Authorization</span><span class="token punctuation">:</span> token $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>&quot; <span class="token punctuation">-</span>s &quot;https<span class="token punctuation">:</span>//api.github.com/repos/$repo/commits<span class="token punctuation">?</span>since=$time_start<span class="token important">&amp;until=$time_end&quot;)</span>
            if echo &quot;$commit_today&quot; <span class="token punctuation">|</span> jq <span class="token punctuation">-</span>e &#39;.<span class="token punctuation">[</span><span class="token punctuation">]</span>&#39; <span class="token punctuation">&gt;</span> /dev/null; then
                echo &quot;Commits today in $repo<span class="token punctuation">:</span>&quot;
                echo &quot;$commit_today&quot;
                commits_exist=true
                break
            fi
          done

          if <span class="token punctuation">[</span><span class="token punctuation">[</span> &quot;$commits_exist&quot; == &quot;false&quot; <span class="token punctuation">]</span><span class="token punctuation">]</span>; then
            echo &quot;No commits found today across all repositories. Creating a dummy commit<span class="token punctuation">...</span>&quot;
            git clone $repo
            cd github<span class="token punctuation">-</span>auto<span class="token punctuation">-</span>commit
            echo &quot;$date_today No commits found today<span class="token punctuation">,</span> auto commited.&quot; <span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span> dummy.txt
            git add dummy.txt
            git commit <span class="token punctuation">-</span>m &quot;$commit_message&quot;
            git push https<span class="token punctuation">:</span>//$<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>@github.com/$<span class="token punctuation">{</span><span class="token punctuation">{</span> github.repository <span class="token punctuation">}</span><span class="token punctuation">}</span>.git
          else
            echo &quot;Commits found today.&quot;
          fi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13))])}const v=e(l,[["render",d],["__file","index.html.vue"]]),b=JSON.parse('{"path":"/project/github-auto-commit/","title":"自动点亮 GitHub 热点图","lang":"zh-CN","frontmatter":{"title":"自动点亮 GitHub 热点图","date":"2024-02-10T00:00:00.000Z","icon":"play","category":["Project"],"tag":["github auto commit","github","commit"],"description":"灵感来源：某天在 GitHub 上看到一个用户的热点图，发现他每天都有提交记录，非常帅！ 于是先搜搜有没有自动提交的工具，但是找到的结果有些需要在本地运行；有些则没有检查当天是否有提交记录，如果有提交当然不希望有一个虚拟的提交。 于是就有了这个项目，使用 GitHub Actions 自动提交代码，保持 GitHub 热点图常绿。 项目地址：githu...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/project/github-auto-commit/"}],["meta",{"property":"og:title","content":"自动点亮 GitHub 热点图"}],["meta",{"property":"og:description","content":"灵感来源：某天在 GitHub 上看到一个用户的热点图，发现他每天都有提交记录，非常帅！ 于是先搜搜有没有自动提交的工具，但是找到的结果有些需要在本地运行；有些则没有检查当天是否有提交记录，如果有提交当然不希望有一个虚拟的提交。 于是就有了这个项目，使用 GitHub Actions 自动提交代码，保持 GitHub 热点图常绿。 项目地址：githu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T15:43:46.000Z"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"github auto commit"}],["meta",{"property":"article:tag","content":"github"}],["meta",{"property":"article:tag","content":"commit"}],["meta",{"property":"article:published_time","content":"2024-02-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-06T15:43:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自动点亮 GitHub 热点图\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-06T15:43:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 功能特点","slug":"功能特点","link":"#功能特点","children":[]},{"level":2,"title":"2 使用方法","slug":"使用方法","link":"#使用方法","children":[]},{"level":2,"title":"3 配置","slug":"配置","link":"#配置","children":[]},{"level":2,"title":"4 实现","slug":"实现","link":"#实现","children":[]}],"git":{"createdTime":1707555660000,"updatedTime":1730907826000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":3}]},"readingTime":{"minutes":2.96,"words":888},"filePathRelative":"project/github-auto-commit/README.md","localizedDate":"2024年2月10日","excerpt":"","autoDesc":true}');export{v as comp,b as data};
