import{_ as p,c as o,e,a as s,d as a,b as i,r as l,o as r}from"./app-DeAcFSYJ.js";const c={},d={href:"https://www.prisma.io/docs/orm/prisma-schema",target:"_blank",rel:"noopener noreferrer"},u={class:"hint-container note"},m={href:"https://www.prisma.io/docs/orm/prisma-client",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/custom-model-and-field-names",target:"_blank",rel:"noopener noreferrer"};function v(g,n){const t=l("ExternalLinkIcon");return r(),o("div",null,[n[12]||(n[12]=e(`<p>Prisma ORM 是一套用于与数据库进行交互的下一代 ORM（对象关系映射，Object-Relational Mapping）工具，包括以下组件：</p><ul><li>Prisma Client: 自动生成且类型安全的查询构建器，用于 Node.js 和 TypeScript</li><li>Prisma Migrate: 声明式数据建模和迁移系统</li><li>Prisma Studio: 用于查看和编辑数据库中数据的 GUI</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Prisma Studio 是 Prisma ORM 中唯一不是开源的部分。你只能在本地运行 Prisma Studio。</p></div><h2 id="为什么使用-prisma-orm" tabindex="-1"><a class="header-anchor" href="#为什么使用-prisma-orm"><span>为什么使用 Prisma ORM</span></a></h2><p>Prisma ORM 不仅提供了现代化的开发体验，还显著提高了与数据库交互的效率和安全性。以下是 Prisma ORM 的主要优势，并与原始 SQL 进行对比。</p><h3 id="类型安全-vs-sql-静态查询" tabindex="-1"><a class="header-anchor" href="#类型安全-vs-sql-静态查询"><span>类型安全 vs SQL 静态查询</span></a></h3><p>Prisma Client 提供了强大的类型安全功能，每个查询都与 Prisma schema 紧密结合，使得查询语法和返回值均受到 TypeScript 的静态类型检查支持：</p><p>Prisma 查询：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  where<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token punctuation">{</span> contains<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SQL 查询：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;%Alice%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Prisma 查询中，错误可以在开发阶段被捕获，而 SQL 查询需要额外的测试或运行时调试，容易引入拼写或逻辑错误。</p><h3 id="开发效率-vs-手动编写-sql" tabindex="-1"><a class="header-anchor" href="#开发效率-vs-手动编写-sql"><span>开发效率 vs 手动编写 SQL</span></a></h3><p>使用 Prisma ORM，可以通过高层抽象简化常见的数据库操作，而不需要重复编写大量 SQL 查询。</p><p>创建一个用户和关联帖子：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span>
    email<span class="token operator">:</span> <span class="token string">&#39;alice@example.com&#39;</span><span class="token punctuation">,</span>
    posts<span class="token operator">:</span> <span class="token punctuation">{</span>
      create<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Prisma is amazing!&#39;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">&quot;User&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;alice@example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">&quot;Post&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;authorId&quot;</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;Prisma is amazing!&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Prisma 的高层 API 不仅易读，还避免了处理 SQL 中外键关系和手动关联数据的复杂性。</p><h3 id="声明式数据建模-vs-手动设计数据库" tabindex="-1"><a class="header-anchor" href="#声明式数据建模-vs-手动设计数据库"><span>声明式数据建模 vs 手动设计数据库</span></a></h3><p>Prisma schema 提供了直观的声明式语法来定义数据模型，与数据库结构直接同步，而 SQL 通常需要手动设计表结构并维护复杂的迁移脚本。</p><p>Prisma schema：</p><div class="language-prisma line-numbers-mode" data-ext="prisma" data-title="prisma"><pre class="language-prisma"><code>model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  posts Post[]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SQL：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">&quot;User&quot;</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;id&quot;</span> <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
  <span class="token string">&quot;email&quot;</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">&quot;Post&quot;</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;id&quot;</span> <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
  <span class="token string">&quot;title&quot;</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">&quot;authorId&quot;</span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">&quot;authorId&quot;</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Prisma schema 自动生成相关的迁移脚本，而 SQL 的表定义需要开发者手动编写，容易出错。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Prisma ORM 通过提供类型安全、自动迁移、高层抽象和声明式数据建模，显著提高了与数据库交互的效率和安全性。</p><table><thead><tr><th>特性</th><th>Prisma ORM</th><th>原始 SQL</th></tr></thead><tbody><tr><td><strong>类型安全</strong></td><td>是</td><td>否</td></tr><tr><td><strong>开发效率</strong></td><td>高</td><td>低，需要手动编写 SQL</td></tr><tr><td><strong>工具集成</strong></td><td>Prisma Client + Migrate + Studio</td><td>多种分散工具组合</td></tr><tr><td><strong>数据建模方式</strong></td><td>声明式，紧密结合业务逻辑</td><td>手动设计，偏技术导向</td></tr><tr><td><strong>迁移脚本生成</strong></td><td>自动生成</td><td>手动编写</td></tr><tr><td><strong>复杂查询处理</strong></td><td>高层抽象，易读</td><td>复杂拼接，易出错</td></tr></tbody></table><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h2><h3 id="prisma-schema" tabindex="-1"><a class="header-anchor" href="#prisma-schema"><span>Prisma schema</span></a></h3><p>每一个使用 Prisma ORM 工具的项目都以一个 <code>prisma/schema.prisma</code> 文件开始。</p>`,32)),s("p",null,[s("a",d,[n[0]||(n[0]=a("Prisma schema")),i(t)]),n[1]||(n[1]=a(" 是 Prisma ORM 的配置文件，用于定义数据库的结构和关系。可以包含如下内容："))]),n[13]||(n[13]=e(`<ul><li>数据源（datasource）：定义数据库的连接</li><li>生成器（generator）：定义 Prisma Client 的生成器</li><li>模型（model）：定义数据库中的表和字段</li></ul><div class="language-prisma line-numbers-mode" data-ext="prisma" data-title="prisma"><pre class="language-prisma"><code>datasource db {
  provider = &quot;postgresql&quot;
  url      = env(&quot;DATABASE_URL&quot;)
}

generator client {
  provider = &quot;prisma-client-js&quot;
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>Prisma 模式具有强大的数据建模功能。 例如，它允许你定义「Prisma 级」关系字段，这将使你更容易在 Prisma 客户端 API 中处理关系。</p><p>在上述案例中，用户的 <code>posts</code> 字段仅定义在「Prisma 级」，这意味着它在底层数据库中并不显示为外键。</p></div><h3 id="数据模型-model" tabindex="-1"><a class="header-anchor" href="#数据模型-model"><span>数据模型 model</span></a></h3><p>模型有两个主要功能：</p><ul><li>在关系数据库中表示表，在 MongoDB 中表示集合</li><li>为 Prisma 客户端 API 中的查询提供基础</li></ul><p>Prisma schema 中维护 model 有两个主要工作流程：</p><ul><li>使用 Prisma Migrate 手动编写 model 并将其映射到数据库</li><li>通过内省数据库生成 model</li></ul><p>一旦定义了数据模型，就可以生成 Prisma Client，该客户端将为已定义的模型提供 CRUD 和更多查询。如果使用的是 TypeScript，那么所有查询都将获得完全的类型安全。</p><h3 id="使用-prisma-client-访问数据库" tabindex="-1"><a class="header-anchor" href="#使用-prisma-client-访问数据库"><span>使用 Prisma Client 访问数据库</span></a></h3><p>首先安装 Prisma Client 包：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @prisma/client
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该包会提供一个 <code>prisma generate</code> 命令，该命令会读取 Prisma schema 并生成 Prisma Client 代码。默认情况下，代码生成在 <code>node_modules/.prisma/client</code> 文件夹中。</p><p>在你更改了 Prisma schema 后，需要重新运行 <code>prisma generate</code> 命令，以确保 Prisma Client 代码是最新的。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma generate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一旦 Prisma Client 代码生成后，就可以在代码中使用它来访问数据库。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@prisma/client&#39;</span>

<span class="token keyword">const</span> prisma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrismaClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 查询所有用户</span>
<span class="token keyword">const</span> allUsers <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 查询所有包含 &quot;prisma&quot; 的帖子</span>
<span class="token keyword">const</span> filteredPosts <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>post<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  where<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token constant">OR</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token punctuation">{</span> contains<span class="token operator">:</span> <span class="token string">&#39;prisma&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token punctuation">{</span> contains<span class="token operator">:</span> <span class="token string">&#39;prisma&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 创建一个用户</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span>
    email<span class="token operator">:</span> <span class="token string">&#39;alice@prisma.io&#39;</span><span class="token punctuation">,</span>
    posts<span class="token operator">:</span> <span class="token punctuation">{</span>
      create<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">&#39;Join us for Prisma Day 2020&#39;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 更新一个帖子</span>
<span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>post<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  where<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span> <span class="token punctuation">{</span> published<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17)),s("div",u,[n[5]||(n[5]=s("p",{class:"hint-container-title"},"注",-1)),s("p",null,[n[3]||(n[3]=a("更多 Prisma Client 的使用方法，请参考 ")),s("a",m,[n[2]||(n[2]=a("Prisma Client 文档")),i(t)]),n[4]||(n[4]=a("。"))])]),n[14]||(n[14]=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>在开发环境中，建议开启 Prisma Client 的调试模式，以便查看实际生成的 SQL 查询：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> prisma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrismaClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  log<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;query&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;warn&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="工作流" tabindex="-1"><a class="header-anchor" href="#工作流"><span>工作流</span></a></h2><p>如上所述，有两种方法可将数据模型「获取」到 Prisma schema 中。根据选择的方法，Prisma ORM 工作流程可能会有所不同。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>一般而言，使用 Prisma Migrate 是更好的选择，因为它提供了更强大的功能和更好的可维护性。</p></div><h3 id="prisma-migrate" tabindex="-1"><a class="header-anchor" href="#prisma-migrate"><span>Prisma Migrate</span></a></h3><p>使用 Prisma ORM 的集成数据库迁移工具 Prisma Migrate，工作流程如下：</p><ol><li>手动调整 Prisma schema 数据模型</li><li>使用 <code>prisma migrate dev --name &lt;migration-name&gt;</code> CLI 命令迁移开发数据库</li><li>在应用程序代码中使用 Prisma Client 访问数据库</li></ol><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241220174057.png" alt="Prisma Migrate" tabindex="0" loading="lazy"><figcaption>Prisma Migrate</figcaption></figure><h3 id="sql-migrations-and-introspection" tabindex="-1"><a class="header-anchor" href="#sql-migrations-and-introspection"><span>SQL migrations and introspection</span></a></h3><p>如果由于某种原因不能或不想使用 Prisma Migrate，仍可使用 introspection 功能从数据库模式更新 Prisma schema。使用 SQL 迁移和自省时的典型工作流程略有不同：</p>`,10)),s("ol",null,[n[8]||(n[8]=s("li",null,"手动调整数据库 schema 使用 SQL 或第三方迁移工具",-1)),n[9]||(n[9]=s("li",null,"（重新）审视您的数据库",-1)),s("li",null,[n[7]||(n[7]=a("可选择")),s("a",k,[n[6]||(n[6]=a("（重新）配置 Prisma Client API")),i(t)])]),n[10]||(n[10]=s("li",null,[a("使用 "),s("code",null,"prisma generate"),a(" CLI 命令生成 Prisma Client")],-1)),n[11]||(n[11]=s("li",null,"在应用程序代码中使用 Prisma Client 访问数据库",-1))]),n[15]||(n[15]=s("figure",null,[s("img",{src:"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241220174256.png",alt:"SQL migrations and introspection",tabindex:"0",loading:"lazy"}),s("figcaption",null,"SQL migrations and introspection")],-1))])}const h=p(c,[["render",v],["__file","index.html.vue"]]),P=JSON.parse('{"path":"/backend/node/prisma/","title":"Prisma","lang":"zh-CN","frontmatter":{"title":"Prisma","date":"2024-12-20T00:00:00.000Z","icon":"creative","category":["backend","node"],"tag":["ORM"],"description":"Prisma ORM 是一套用于与数据库进行交互的下一代 ORM（对象关系映射，Object-Relational Mapping）工具，包括以下组件： Prisma Client: 自动生成且类型安全的查询构建器，用于 Node.js 和 TypeScript Prisma Migrate: 声明式数据建模和迁移系统 Prisma Studio: 用...","head":[["meta",{"property":"og:url","content":"https://dribble-njr.github.io/blog/blog/backend/node/prisma/"}],["meta",{"property":"og:title","content":"Prisma"}],["meta",{"property":"og:description","content":"Prisma ORM 是一套用于与数据库进行交互的下一代 ORM（对象关系映射，Object-Relational Mapping）工具，包括以下组件： Prisma Client: 自动生成且类型安全的查询构建器，用于 Node.js 和 TypeScript Prisma Migrate: 声明式数据建模和迁移系统 Prisma Studio: 用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241220174057.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T03:21:07.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Prisma"}],["meta",{"property":"article:author","content":"njr"}],["meta",{"property":"article:tag","content":"ORM"}],["meta",{"property":"article:published_time","content":"2024-12-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T03:21:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Prisma\\",\\"image\\":[\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241220174057.png\\",\\"https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241220174256.png\\"],\\"datePublished\\":\\"2024-12-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-23T03:21:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"njr\\",\\"url\\":\\"https://github.com/dribble-njr/blog\\",\\"email\\":\\"wzw15292257101@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1 为什么使用 Prisma ORM","slug":"为什么使用-prisma-orm","link":"#为什么使用-prisma-orm","children":[{"level":3,"title":"1.1 类型安全 vs SQL 静态查询","slug":"类型安全-vs-sql-静态查询","link":"#类型安全-vs-sql-静态查询","children":[]},{"level":3,"title":"1.2 开发效率 vs 手动编写 SQL","slug":"开发效率-vs-手动编写-sql","link":"#开发效率-vs-手动编写-sql","children":[]},{"level":3,"title":"1.3 声明式数据建模 vs 手动设计数据库","slug":"声明式数据建模-vs-手动设计数据库","link":"#声明式数据建模-vs-手动设计数据库","children":[]},{"level":3,"title":"1.4 总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"2 工作原理","slug":"工作原理","link":"#工作原理","children":[{"level":3,"title":"2.1 Prisma schema","slug":"prisma-schema","link":"#prisma-schema","children":[]},{"level":3,"title":"2.2 数据模型 model","slug":"数据模型-model","link":"#数据模型-model","children":[]},{"level":3,"title":"2.3 使用 Prisma Client 访问数据库","slug":"使用-prisma-client-访问数据库","link":"#使用-prisma-client-访问数据库","children":[]}]},{"level":2,"title":"3 工作流","slug":"工作流","link":"#工作流","children":[{"level":3,"title":"3.1 Prisma Migrate","slug":"prisma-migrate","link":"#prisma-migrate","children":[]},{"level":3,"title":"3.2 SQL migrations and introspection","slug":"sql-migrations-and-introspection","link":"#sql-migrations-and-introspection","children":[]}]}],"git":{"createdTime":1734924067000,"updatedTime":1734924067000,"contributors":[{"name":"dribble-njr","email":"wzw15292257101@163.com","commits":1}]},"readingTime":{"minutes":5.63,"words":1689},"filePathRelative":"backend/node/prisma/README.md","localizedDate":"2024年12月20日","excerpt":"","autoDesc":true}');export{h as comp,P as data};
