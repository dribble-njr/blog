<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://dribble-njr.github.io/blog/blog/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://dribble-njr.github.io/blog/blog/</id>
  <title/>
  <subtitle>Personal frontend knowledge base</subtitle>
  <icon>https://dribble-njr.github.io/blog/blog/favicon.ico</icon>
  <updated>2025-06-10T09:12:28.654Z</updated>
  <generator>@vuepress/plugin-feed</generator>
  <link rel="self" href="https://dribble-njr.github.io/blog/blog/atom.xml"/>
  <link rel="alternate" href="https://dribble-njr.github.io/blog/blog/"/>
  <category term="react"/>
  <category term="计算机网络"/>
  <category term="expo"/>
  <category term="news"/>
  <category term="backend"/>
  <category term="node"/>
  <category term="Project"/>
  <category term="linux"/>
  <category term="database"/>
  <category term="操作系统"/>
  <category term="operating-system"/>
  <category term="工程化"/>
  <category term="reading"/>
  <category term="practice"/>
  <category term="CSS"/>
  <category term="Pixi"/>
  <category term="READING"/>
  <category term="JavaScript"/>
  <category term="browser"/>
  <category term="HTML"/>
  <category term="chakra"/>
  <category term="next"/>
  <contributor>
    <name>patterns</name>
  </contributor>
  <entry>
    <title type="text">react fundamentals</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/react/00-fundaments.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/react/00-fundaments.html"/>
    <updated>2025-06-10T09:10:35.000Z</updated>
    <summary type="html"><![CDATA[<h2>Hello Word</h2>
<h3>In JS</h3>
<p>在使用 react 之前，我们通常会使用原生 js 来写一些简单的页面。</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>Hello Word</h2>
<h3>In JS</h3>
<p>在使用 react 之前，我们通常会使用原生 js 来写一些简单的页面。</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>

element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'container'</span>
element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'Hello Word'</span>

rootElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
</code></pre></div><h3>In React</h3>
<p>React 按照原生 DOM 的操作逻辑，使用 <code>createElement</code> 方法来创建元素，并使用 <code>render</code> 方法来渲染元素。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createRoot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span>

<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">'container'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'Hello Word'</span><span class="token punctuation">)</span>

<span class="token function">createRoot</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>React 是一个跨平台的框架，用于描述 UI 结构和状态逻辑。而 React DOM 是 React 的 DOM 渲染器，用于在浏览器中渲染 React 组件。类似的还有 React Native，用于在移动端渲染 React 组件。</p>
</div>
<p><code>createElement</code> 方法的第一个参数是标签名，第二个参数是属性 <code>props</code>，第三个参数（以及后续参数）会被收集起来，作为子元素 <code>children</code>。</p>
<h3>嵌套</h3>
<p>若要实现一个深度嵌套的组件，需要一层一层的嵌套，这样代码会变得非常臃肿，类似下面这样：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// &lt;div class="container"&gt;</span>
<span class="token comment">// 	&lt;p&gt;Nested list&lt;/p&gt;</span>
<span class="token comment">// 	&lt;ul class="content"&gt;</span>
<span class="token comment">// 		&lt;li&gt;This is a nested list item&lt;/li&gt;</span>
<span class="token comment">// 		&lt;li&gt;This is a nested list item&lt;/li&gt;</span>
<span class="token comment">// 	&lt;/ul&gt;</span>
<span class="token comment">// &lt;/div&gt;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> createElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createRoot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span>

<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>
  <span class="token string">'div'</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">'container'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'Nested list'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">createElement</span><span class="token punctuation">(</span>
    <span class="token string">'ul'</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">'content'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'This is a nested list item'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'This is a nested list item'</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token function">createRoot</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
</code></pre></div><p>因此 React 提供了 JSX 语法，让我们可以更方便地编写组件。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在 JSX 中，<code>className</code> 表示类名，而不是 HTML 中的 <code>class</code>，因为在 JavaScript 中，<code>class</code> 是保留字，且 DOM 的类名属性是 <code>className</code>。</p>
</div>
<h2>JSX</h2>
<p>JSX 是 React 的语法扩展，允许我们在 JavaScript 中使用类似于 HTML 的语法来描述 UI 结构。在生产环境中，打包工具（如 <a href="https://webpack.js.org/" target="_blank" rel="noopener noreferrer">Webpack</a>、<a href="https://vite.dev/" target="_blank" rel="noopener noreferrer">Vite</a>）会使用 <a href="https://babeljs.io/" target="_blank" rel="noopener noreferrer">babel</a> 自动将 JSX 转换为 <code>createElement</code> 方法调用。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20250610120118.png" alt="babel" tabindex="0" loading="lazy"><figcaption>babel</figcaption></figure>
<p>上面复杂嵌套结构在 JSX 中可以简化为：</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Nested list</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">This is a nested list item</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">This is a nested list item</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">)</span>

<span class="token function">createRoot</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
</code></pre></div><h3>插值</h3>
<p>类似模板字符串，JSX 中也可以使用插值。你可以在里面写 JavaScript 表达式。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token string">'World'</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, </span><span class="token punctuation">{</span>world<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>Spread</h3>
<p>Spread 允许你将一个对象的所有属性复制到另一个对象。因此，如果有一个对象 <code>props</code>，你可以将它展开，然后传递给 <code>createElement</code> 方法。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token string">'Hello World'</span>
<span class="token keyword">const</span> className <span class="token operator">=</span> <span class="token string">'container'</span>
<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span> children<span class="token punctuation">,</span> className <span class="token punctuation">}</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>在 JSX 中，也可以使用该特性，将 <code>props</code> 展开。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token string">'Hello World'</span>
<span class="token keyword">const</span> className <span class="token operator">=</span> <span class="token string">'container'</span>
<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span> children<span class="token punctuation">,</span> className <span class="token punctuation">}</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><h3>Fragment</h3>
<p>React Fragments 允许你将多个元素组合在一起，而不会添加额外的 DOM 节点。这让你可以在组件中返回多个元素，而无需使用额外的 <code>div</code> 包装。这在避免不必要的标记影响样式或布局时非常有用。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">This is a paragraph.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Fragment</span></span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">)</span>
</code></pre></div><p>也可以使用空标签 <code>&lt;&gt;&lt;/&gt;</code> 来代替 <code>Fragment</code>。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello, World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">This is a paragraph.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">)</span>
</code></pre></div><h2>组件</h2>
<p>如果我们需要生成以下的 DOM 结构：</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Goodbye World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>我们可以使用组件来生成这个结构。到目前为止，<code>createElement</code> 的第一个参数都只传入了一个字符串，表示标签名。但是，它还可以接受一个函数，这个函数会返回需要渲染的结构。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">createElement</span><span class="token punctuation">(</span>
	someFunction<span class="token punctuation">,</span>
	<span class="token punctuation">{</span> <span class="token literal-property property">prop1</span><span class="token operator">:</span> <span class="token string">'value1'</span><span class="token punctuation">,</span> <span class="token literal-property property">prop2</span><span class="token operator">:</span> <span class="token string">'value2'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token string">'child1'</span><span class="token punctuation">,</span>
	<span class="token string">'child2'</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre></div><p><code>someFunction</code> 会以 <code>props</code> 对象作为第一个参数，而 <code>children</code> 会作为 <code>props</code> 对象的 <code>children</code> 属性。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">someFunction</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	props<span class="token punctuation">.</span>children <span class="token comment">// ['child1', 'child2']</span>
	props<span class="token punctuation">.</span>prop1 <span class="token comment">// 'value1'</span>
	props<span class="token punctuation">.</span>prop2 <span class="token comment">// 'value2'</span>
	<span class="token keyword">return</span> <span class="token comment">// some jsx</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这样即可实现组件的复用。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">&gt;</span>
    <span class="token punctuation">{</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">'Hello World'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">'Goodbye World'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
</code></pre></div><p>我们想在 JSX 中像 <code>div</code> 一样使用这个组件：</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><code>Babel</code> 负责将 JSX 组件编译成 <code>createElement</code> 调用。如果我们尝试 <code>&lt;message&gt;Hello World&lt;/message&gt;</code>，<code>Babel</code> 会这样做：</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// the desired output</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">'Hello World'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// the actual output</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">'Hello World'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>因此，我们只需要告诉 <code>Babel</code> 如何编译我们的 JSX，让它通过函数名而不是字符串来传递函数。下面是一些 <code>Babel</code> 输出的 JSX 示例：</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code>element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Capitalized</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement(Capitalized)</span>
element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property.access</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement(property.access)</span>
element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Property.Access</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement(Property.Access)</span>
element <span class="token operator">=</span> <span class="token operator">&lt;</span>Property<span class="token punctuation">[</span><span class="token string">'Access'</span><span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token comment">// SyntaxError</span>
element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lowercase</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement('lowercase')</span>
element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kebab-case</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement('kebab-case')</span>
element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Upper-Kebab-Case</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement('Upper-Kebab-Case')</span>
element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Upper_Snake_Case</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement(Upper_Snake_Case)</span>
element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lower_snake_case</span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">// createElement('lower_snake_case')</span>
</code></pre></div><p>因此，最终需要将组件名首字母大写，这样 <code>Babel</code> 才会将它编译成 <code>createElement</code> 调用。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Message</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Goodbye World</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Message</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">)</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>Components are functions which accept an object called <code>props</code> and return something that is renderable.</p>
</div>
]]></content>
    <category term="react"/>
    <published>2025-06-10T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">网络模型</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/networking/01-network-model.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/networking/01-network-model.html"/>
    <updated>2025-02-11T08:02:34.000Z</updated>
    <summary type="html"><![CDATA[<h2>TCP/IP 网络体系</h2>
<p>TCP/IP 体系结构分为四层，是事实上的国际标准，各层如下所示：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>--- 应用层 ---
--- 运输层 ---
--- 网络层 ---
--- 网络接口层 ---
</code></pre></div><ul>
<li><strong>应用层</strong> 为用户提供应用功能，拥有不同的应用层协议，用来定义应用进程间的交互规则，以完成特定的网络应用，例如 HTTP（万维网）、SMTP（电子邮件）、DNS（域名查询）、FTP（文件传输） 等等；</li>
<li><strong>运输层</strong> 负责为 <strong>两台主机中的进程</strong> 提供通信服务，其中的两个重要协议是 TCP 和 UDP：
<ul>
<li>TCP 提供 <strong>面向连接的、可靠的</strong> 数据传输服务；</li>
<li>UDP 提供 <strong>无连接的、不可靠的</strong> 传输服务。</li>
</ul>
</li>
<li><strong>网络层</strong> 中负责为两台主机提供通信服务，选择合适的路由将数据传递到目标主机，它的核心协议是 IP 协议；</li>
<li><strong>网络接口层</strong> 并没有规定什么具体的内容，目的是可以互联全世界不同的网络接口。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>TCP/IP 网络体系</h2>
<p>TCP/IP 体系结构分为四层，是事实上的国际标准，各层如下所示：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code></code></pre></div>]]></content>
    <category term="计算机网络"/>
    <published>2022-05-06T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">HTTP 概述</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/networking/02-http-overview.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/networking/02-http-overview.html"/>
    <updated>2025-02-11T08:02:34.000Z</updated>
    <summary type="html"><![CDATA[<p>超文本传输协议（HyperText Transfer Protocol, HTTP）一般是用于浏览器和服务器之间传输文字、图片、音频视频等超文本数据的应用层协议。</p>
<h2>HTTP 协议特性</h2>
<ul>
<li>简单：HTTP 基本的报文格式就是 header + body，头部信息也是 key-value 的简单文本形式，易于理解，降低了学习和使用的门槛。</li>
<li>灵活易扩展：HTTP/1.0 出现的 HTTP headers 让协议扩展变得非常容易，只要服务端和客户端对新 headers 达成语义一致，新功能就可以被添加进来。</li>
<li>无连接：每次连接只处理一个请求。服务器处理完客户端的请求，并收到客户端的应答后，就会断开连接，HTTP 1.1 可以开启长连接。</li>
<li>无状态：对于事物处理没有记忆能力。因此浏览器无法保存用户的登录信息，每次进行需要登录才能执行的操作时，都需要输入用户名和密码。而 cookie 可以创建有状态的会话。好处在于服务器不会记忆 HTTP 的状态，能减轻服务器的压力。</li>
<li>明文传输：给调试带来便利性，但是用户毫无隐私可言，不安全。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>超文本传输协议（HyperText Transfer Protocol, HTTP）一般是用于浏览器和服务器之间传输文字、图片、音频视频等超文本数据的应用层协议。</p>
<h2>HTTP 协议特性</h2>
<ul>
<li>简单：HTTP 基本的报文格式就是 header + body，头部信息也是 key-value 的简单文本形式，易于理解，降低了学习和使用的门槛。</li>
<li>灵活易扩展：HTTP/1.0 出现的 HTTP headers 让协议扩展变得非常容易，只要服务端和客户端对新 headers 达成语义一致，新功能就可以被添加进来。</li>
<li>无连接：每次连接只处理一个请求。服务器处理完客户端的请求，并收到客户端的应答后，就会断开连接，HTTP 1.1 可以开启长连接。</li>
<li>无状态：对于事物处理没有记忆能力。因此浏览器无法保存用户的登录信息，每次进行需要登录才能执行的操作时，都需要输入用户名和密码。而 cookie 可以创建有状态的会话。好处在于服务器不会记忆 HTTP 的状态，能减轻服务器的压力。</li>
<li>明文传输：给调试带来便利性，但是用户毫无隐私可言，不安全。</li>
</ul>
<h2>HTTP 报文格式</h2>
<h3>请求报文格式</h3>
<p>客户端发送 HTTP 请求到服务器的请求消息：<strong>请求行、请求头、空行和请求体四个部分组成。</strong></p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>POST / HTTP1.1
Host:www.wrox.com
User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)
Content-Type:application/x-www-form-urlencoded
Content-Length:40
Connection: Keep-Alive

name=Professional%20Ajax&amp;publisher=Wiley
</code></pre></div><p>第一部分：请求行，请求方法 + URI + HTTP 版本。</p>
<p>第二部分：请求头部。</p>
<p>第三部分：空行。</p>
<p>第四部分：请求数据。</p>
<h3>响应报文格式</h3>
<p>服务器响应也由四个部分组成，分别是：<strong>响应行、响应头、空行和响应体</strong>。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>HTTP/1.1 200 OK
Date: Fri, 22 May 2009 06:07:21 GMT
Content-Type: text/html; charset=UTF-8

&lt;html&gt;
  &lt;head&gt;&lt;/head&gt;
  &lt;body&gt;
    &lt;!--body goes here--&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre></div><h2>HTTP 常见状态码</h2>
<ul>
<li>1xx：提示信息，表示目前是协议处理的中间状态，还需进一步操作；</li>
<li>2xx：成功，表示请求已被成功收到并正确处理；</li>
<li>3xx：重定向，资源位置发生变动，需要客户端重新发送请求；</li>
<li>4xx：客户端错误，请求报文有误，服务器无法处理；</li>
<li>5xx：服务器错误，服务器在处理请求时内部发生了错误。</li>
</ul>
<p>| 常见状态码                | 状态描述                                                         |<br>
|</p>
]]></content>
    <category term="计算机网络"/>
    <published>2022-04-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">GET 和 POST 的区别</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/networking/03-get-post-difference.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/networking/03-get-post-difference.html"/>
    <updated>2025-02-11T08:02:34.000Z</updated>
    <summary type="html"><![CDATA[<h2>概述</h2>
<p>GET 和 POST 是 HTTP 协议中发送请求的方法。</p>
<ul>
<li>GET：请求资源，从服务器获取数据；</li>
<li>POST：将数据提交到指定地址。</li>
</ul>
<p>二者本质上都是 TCP 链接，因此本质上<strong>没有区别</strong>，但由于 HTTP 规定和浏览器/服务器的限制，导致它们在实际操作中会有一定区别。</p>
<h2>区别</h2>
<ul>
<li>GET 在浏览器回退时是无害的，而 POST 会再次提交请求。</li>
<li>GET 产生的 URL 地址可以被 Bookmarked，而 POST 不可以。</li>
<li>GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。</li>
<li>GET 请求只能进行 url 编码，而 POST 支持多种编码方式。</li>
<li>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。</li>
<li>GET 请求在 URL 中传送的参数是有长度限制的，而 POST 没有。</li>
<li>对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制。</li>
<li>GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。</li>
<li>GET 参数通过 URL 传递，POST 放在 Request body 中。</li>
<li>GET 方法是安全且幂等的，POST 方法是<strong>不安全且不幂等</strong>的。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>概述</h2>
<p>GET 和 POST 是 HTTP 协议中发送请求的方法。</p>
<ul>
<li>GET：请求资源，从服务器获取数据；</li>
<li>POST：将数据提交到指定地址。</li>
</ul>
<p>二者本质上都是 TCP 链接，因此本质上<strong>没有区别</strong>，但由于 HTTP 规定和浏览器/服务器的限制，导致它们在实际操作中会有一定区别。</p>
<h2>区别</h2>
<ul>
<li>GET 在浏览器回退时是无害的，而 POST 会再次提交请求。</li>
<li>GET 产生的 URL 地址可以被 Bookmarked，而 POST 不可以。</li>
<li>GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。</li>
<li>GET 请求只能进行 url 编码，而 POST 支持多种编码方式。</li>
<li>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。</li>
<li>GET 请求在 URL 中传送的参数是有长度限制的，而 POST 没有。</li>
<li>对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制。</li>
<li>GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。</li>
<li>GET 参数通过 URL 传递，POST 放在 Request body 中。</li>
<li>GET 方法是安全且幂等的，POST 方法是<strong>不安全且不幂等</strong>的。</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<ul>
<li>安全：请求方法不会破坏服务器上的资源；</li>
<li>幂等：执行多次相同的操作，结果都是相同的。</li>
</ul>
</div>
<h2>误区</h2>
<h3>参数长度</h3>
<p>GET 参数有长度限制，但这是因为浏览器对 URL 的长度限制，而不是 HTTP 协议本身对参数长度的限制。HTTP 同样对 POST 参数长度没有限制，而是靠服务器的设置来限制大小的。</p>
<h3>安全性</h3>
<p>POST <strong>相对</strong>比 GET 安全性要高。</p>
<p>通过 GET 提交的请求都将显示到 URL 上，页面会被浏览器缓存，其他人查看历史记录会看到提交的数据。</p>
<p>这里的相对在于：<strong>HTTP 本身是明文传输的协议</strong>，无论使用 GET 还是 POST 都有可能受到中间人攻击而造成数据泄露。</p>
<p>如果 HTTP 链接使用 SSL/TLS，那么 GET 参数也会被加密，但是仍然会在某些地方出现，比如服务器日志、浏览器插件和其他应用。而 POST 数据会被加密并且不会被任何方式泄露。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>因此如果想要保证总是安全地传输数据，需要使用 HTTPS 上的 POST。</p>
</div>
<h3>Request Body</h3>
<p>GET 可以带 Request Body，但不能保证一定能被接收到。如果你用 GET 请求，在 Request Body 携带数据，不同服务器的处理方式也是不同的，有些服务器会帮你读出数据，有些服务器直接忽略。</p>
<h3>数据包</h3>
<p>对于 GET 请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）。</p>
<p>对于 POST，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok。</p>
<p>并不是所有浏览器都会在 POST 中发送两次包，Firefox 就只发送一次。</p>
<h2>参考链接</h2>
<ul>
<li><a href="https://stackoverflow.com/questions/3063530/what-is-the-difference-between-get-and-post-encryption" target="_blank" rel="noopener noreferrer">https - What is the difference between GET and POST encryption? - Stack Overflow</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;mid=100000054&amp;idx=1&amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd" target="_blank" rel="noopener noreferrer">99%的人都理解错了 HTTP 中 GET 与 POST 的区别 (qq.com)</a></li>
<li><a href="https://github.com/febobo/web-interview/issues/145" target="_blank" rel="noopener noreferrer">面试官：说一下 GET 和 POST 的区别？ · Issue #145 · febobo/web-interview (github.com)</a></li>
</ul>
]]></content>
    <category term="计算机网络"/>
    <published>2022-04-24T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">HTTP 性能演变</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/networking/04-http-development.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/networking/04-http-development.html"/>
    <updated>2025-02-11T08:02:34.000Z</updated>
    <summary type="html"><![CDATA[<p>整个 HTTP 的演变史就是一个在不断优化性能的过程。</p>
<h2>HTTP/0.9 - 单行协议</h2>
<p>最初版本的 HTTP 协议并没有版本号，后来它的版本号被定位在 0.9 以区分后来的版本。</p>
<p>HTTP/0.9 极其简单：请求由单行指令构成，以唯一可用方法 GET 开头，其后跟目标资源的路径（一旦连接到服务器，协议、服务器、端口号这些都不是必须的）。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>GET /mypage.html
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>整个 HTTP 的演变史就是一个在不断优化性能的过程。</p>
<h2>HTTP/0.9 - 单行协议</h2>
<p>最初版本的 HTTP 协议并没有版本号，后来它的版本号被定位在 0.9 以区分后来的版本。</p>
<p>HTTP/0.9 极其简单：请求由单行指令构成，以唯一可用方法 GET 开头，其后跟目标资源的路径（一旦连接到服务器，协议、服务器、端口号这些都不是必须的）。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>GET /mypage.html
</code></pre></div><p>HTTP/0.9 的响应内容不包含 HTTP 头，这意味着只有 HTML 文件可以传送，无法传送其他类型的文件；也没有状态码或错误代码；一旦出现问题，一个特殊的包含问题描述信息的 HTML 文件将会被返回。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;HTML&gt;
这是一个非常简单的HTML页面
&lt;/HTML&gt;
</code></pre></div><p><strong>总结：</strong></p>
<ul>
<li>请求只有一个请求行；</li>
<li>响应只有一个响应体，且只能返回 HTML 文件；</li>
</ul>
<h2>HTTP/1.0 - 构建可扩展性</h2>
<p>由于 HTTP/0.9 协议的应用十分有限，HTTP/1.0 在其基础上增加了很多新特性：</p>
<ul>
<li>协议版本信息现在会随着每个请求行发送。</li>
<li>状态码在响应开始时发送，使浏览器能了解请求执行成功或失败，并调整相应行为（如更新或使用本地缓存）。</li>
<li>引入了 HTTP 头的概念，使协议变得灵活易扩展。</li>
<li>Content-Type 头使传输除 HTML 文件以为其他类型文件的可能。</li>
</ul>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>// 请求
GET /mypage.html HTTP/1.0
User-Agent: NCSA_Mosaic/2.0 (Windows 3.1)

// 响应
200 OK
Date: Tue, 15 Nov 1994 08:12:31 GMT
Server: CERN/3.0 libwww/2.17
Content-Type: text/html
&lt;HTML&gt;
一个包含图片的页面
  &lt;IMG SRC="/myimage.gif"&gt;
&lt;/HTML&gt;
</code></pre></div><h2>HTTP/1.1</h2>
<p>HTTP/1.0 采用短连接方式，即每次请求一个文件都需要和浏览器建立 TCP 连接，当收到响应后就会立即关闭连接，这样会造成不必要的时间开销。</p>
<p>为了减少时延，浏览器通常会建立多个并行的 TCP 连接同时请求多个对象。但是这会占用大量服务器的资源。</p>
<p>HTTP/1.1 相比于 HTTP/1.0 性能上的改进：</p>
<ul>
<li>使用 TCP 长连接的方式改善了 HTTP/1.0 短连接造成的性能开销；</li>
<li>支持管道网络传输，只要第一个请求发出，不必等待响应，就可以直接发送第二个请求，减少整体的响应时间（流水线方式工作）。</li>
</ul>
<p>但是 HTTP/1.1 还是有性能瓶颈：</p>
<ul>
<li>只能压缩 body 部分，请求/响应头部未经压缩就发送，头部信息越多延迟越大；</li>
<li>发送冗长的首部，每次互相发送相同的首部造成的浪费比较多；</li>
<li>服务器是按请求顺序响应的，如果服务器响应过慢，会导致客户端一直请求不到后面的数据，也就是<strong>队头阻塞</strong>；</li>
<li>没有请求优先级控制；</li>
<li>请求只能从客户端开始，服务器只能被动响应。</li>
</ul>
<h2>HTTP/2.0</h2>
<p>HTTP/2.0 是基于 HTTPS 的，所以安全性有所保证。HTTP/2.0 相比 HTTP/1.1 性能上的改进：</p>
<ul>
<li>头部压缩：如果同时发出多个请求，他们的头是一样或相似的，那么协议会消除重复的部分；</li>
<li>采用二进制格式：头信息和数据体都是二进制，并统称为帧，头信息帧和数据帧，增加了数据传输的效率；</li>
<li>多路复用：可以在一个连接中并发多个请求或响应，而不用按照顺序一一对应，解决了队头阻塞的问题；</li>
<li>可以指定数据流的优先级；</li>
<li>服务器可以主动向客户端发送消息。</li>
</ul>
<p>缺陷在于：多个 HTTP 请求复用一个 TCP 连接，一旦发生丢包现象，就会触发 TCP 的重传机制，这样在一个 TCP 连接中的所有 HTTP 请求都必须等待这个丢了的包被重传回来。</p>
<h2>HTTP/3.0</h2>
<p>HTTP/2.0 基于 TCP 传输层，导致丢包下阻塞所有 HTTP 请求的问题，因此 HTTP/3.0 把 HTTP 下层的 TCP 协议改成了 UDP。</p>
<p>UDP 是不可靠传输，但是基于 UDP 的 QUIC 协议可以实现类似 TCP 的可靠传输。</p>
<h2>参考链接</h2>
<p><a href="https://xiaolincoding.com/network/2_http/http_interview.html#http-1-1%E3%80%81http-2%E3%80%81http-3-%E6%BC%94%E5%8F%98" target="_blank" rel="noopener noreferrer">3.1 HTTP 常见面试题 | 小林 coding (xiaolincoding.com)</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP#%E5%90%8Ehttp2%E8%BF%9B%E5%8C%96" target="_blank" rel="noopener noreferrer">HTTP 的发展 - HTTP | MDN (mozilla.org)</a></p>
<p><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=73" target="_blank" rel="noopener noreferrer">计算机网络微课堂（有字幕无背景音乐版）_哔哩哔哩_bilibili</a></p>
]]></content>
    <category term="计算机网络"/>
    <published>2022-04-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">HTTP 缓存</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/networking/05-http-cache.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/networking/05-http-cache.html"/>
    <updated>2025-02-11T08:02:34.000Z</updated>
    <summary type="html"><![CDATA[<p>对于一些相同的请求，通过复用以前获取的资源，显著提高网页的性能。Web 缓存减少了等待时间和流量，因此减少了显示资源的渲染时间。</p>
<p>HTTP 缓存的实现有两种方式，分别是<strong>强制缓存</strong>和<strong>协商缓存</strong>。</p>
<h2>强缓存</h2>
<p>强缓存是指：只要浏览器判断缓存没有过期，则直接使用本地缓存，不会向服务器发送请求。</p>
<p>强缓存是利用下面这两个字段实现的，它们都用来表示资源在客户端缓存的有效期。</p>
<ul>
<li><code>Expires</code>：绝对时间；</li>
<li><code>Cache-Control</code>：缓存指令。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>对于一些相同的请求，通过复用以前获取的资源，显著提高网页的性能。Web 缓存减少了等待时间和流量，因此减少了显示资源的渲染时间。</p>
<p>HTTP 缓存的实现有两种方式，分别是<strong>强制缓存</strong>和<strong>协商缓存</strong>。</p>
<h2>强缓存</h2>
<p>强缓存是指：只要浏览器判断缓存没有过期，则直接使用本地缓存，不会向服务器发送请求。</p>
<p>强缓存是利用下面这两个字段实现的，它们都用来表示资源在客户端缓存的有效期。</p>
<ul>
<li><code>Expires</code>：绝对时间；</li>
<li><code>Cache-Control</code>：缓存指令。</li>
</ul>
<h3>Expires</h3>
<p>响应头包含的日期时间，在这个时间前，浏览器都不会再发起请求，而是直接使用缓存资源。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">Expires</span><span class="token operator">:</span> Wed<span class="token punctuation">,</span> <span class="token number">21</span> Oct <span class="token number">2015</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">GMT</span>
</code></pre></div><h3>Cache-Control</h3>
<p>通用消息头字段，通过指定指令来实现缓存机制。缓存指令是单向的，这意味着在请求中设置的指令，不一定被包含在响应中。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>Cache<span class="token operator">-</span>Control<span class="token operator">:</span> max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">20000</span>
</code></pre></div><p><code>max-age=&lt;seconds&gt;</code> 可以设置过期时间（单位秒），相对于请求的时间计算。</p>
<p>具体流程：</p>
<ol>
<li>当浏览器第一次向服务器发起请求时，服务器响应头会带上 <code>Cache-Control</code>，其中设置了过期时间 <code>max-age</code>；</li>
<li>浏览器再次向服务器发起请求后，会计算<strong>当前请求时间和过期时间</strong>差值，来判断是否过期，如果过期则重新请求服务器，否则使用本地缓存；</li>
<li>如果已经过期，服务器再次收到请求后，会更新响应头的 <code>Cache-Control</code>。</li>
</ol>
<p>除了 <code>max-age</code> 外，还有其他指令，详见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noopener noreferrer">Cache-Control</a>。</p>
<h3>优先级</h3>
<p>当同时有 <code>Expires</code> 和 <code>Cache-Control</code> 字段时，如果 <code>Cache-Control</code> 响应头设置了 <code>max-age</code> 或 <code>s-maxage</code> 指令，那么 <code>Expires</code> 会被忽略。</p>
<h2>协商缓存</h2>
<p>为了知道服务器有没有更新内容，必须和服务器沟通，然后根据服务器返回的信息判断是否使用本地缓存，这种方式称为<strong>协商缓存</strong>。</p>
<p>协商缓存通过两种头部实现：</p>
<ul>
<li>请求头部的 <code>If-Modified-Since</code> 和响应头部的 <code>Last-Modified</code>；</li>
<li>请求头部的 <code>If-None-Match</code> 和响应头部的 <code>ETag</code>。</li>
</ul>
<h3><code>If-Modified-Since</code> 和 <code>Last-Modified</code></h3>
<p>这种方式是基于时间实现的。</p>
<p>响应头 <code>Last-Modified</code> 存放的是资源最后修改时间：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>Last<span class="token operator">-</span>Modified<span class="token operator">:</span> Wed<span class="token punctuation">,</span> <span class="token number">21</span> Oct <span class="token number">2015</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">GMT</span>
</code></pre></div><p>请求头中的 <code>If-Modified-Since</code> 含义为资源从 xxx 时间后是否有更新：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>If<span class="token operator">-</span>Modified<span class="token operator">-</span>Since<span class="token operator">:</span> Wed<span class="token punctuation">,</span> <span class="token number">21</span> Oct <span class="token number">2015</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">GMT</span>
</code></pre></div><p>当服务器收到浏览器这个请求头后，会跟当前版本的时间进行比较：</p>
<ol>
<li>当前版本的修改时间比这个晚，也就是内容发生变化了，那么会返回 200 和新的内容；</li>
<li>若当前版本的修改时间较早，也就是没有更新，那么会返回 304，浏览器会从缓存中读取内容。</li>
</ol>
<h3><code>ETag</code> 和 <code>If-None-Match</code></h3>
<p>这种方式是通过唯一标识实现。</p>
<p><code>ETag</code> 是资源的特定版本的标识符，响应头会根据返回内容返回一个标识符，具体返回值看服务器的计算策略，可能如下所示：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">ETag</span><span class="token operator">:</span> <span class="token string">'33a64df551425fcc55e4d42a148795d9f25f89d4'</span>
</code></pre></div><p>当客户端收到这个响应后，会将这个 <code>ETag</code> 保存起来，等下个请求时，会将它放到请求体的 <code>If-None-Match</code> 字段中：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>If<span class="token operator">-</span>None<span class="token operator">-</span>Match<span class="token operator">:</span> <span class="token string">"33a64df551425fcc55e4d42a148795d9f25f89d4"</span>
</code></pre></div><p>当服务器收到浏览器这个请求头后，会跟当前版本的 <code>ETag</code> 进行比较：</p>
<ol>
<li>如果标识符不一致，也就是内容发生变化了，那么会返回 200 和新的内容；</li>
<li>如果标识符一致，也就是没有更新，那么会返回 304，浏览器会从缓存中读取内容。</li>
</ol>
<h3>优先级</h3>
<p>协商缓存先检查上一次响应头中是否有 <code>ETag</code>，如果有，则发起请求中请求头带上 <code>If-None-Match</code> 字段；如果没有，则检查上一次响应头中是否有 <code>Last-Modified</code> 字段，发起请求中请求头带上 <code>If-Modified-Since</code> 字段。</p>
<h2>总结</h2>
<p>HTTP 缓存机制分为两种：强缓存和协商缓存。</p>
<p>浏览器会首先判断强缓存，如果强缓存生效，那么直接从缓存中获取资源；若没有生效，则会使用协商缓存，发送请求与服务器协商。</p>
]]></content>
    <category term="计算机网络"/>
    <published>2022-05-04T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">HTTPS 略解</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/networking/06-https-overview.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/networking/06-https-overview.html"/>
    <updated>2025-02-11T08:02:34.000Z</updated>
    <summary type="html"><![CDATA[<h2>HTTP 和 HTTPS</h2>
<h3>区别</h3>
<ul>
<li>HTTP 是明文传输，不安全，而 HTTPS 加入了 SSL/TLS 安全协议，使得报文能加密传输；</li>
<li>HTTP 建立连接只需 TCP 三次握手，而 HTTPS 在三次握手后，还需要进行 SSL/TLS 握手；</li>
<li>HTTP 端口号为 80，HTTPS 端口号为 443；</li>
<li>HTTPS 需要向 CA 申请数字证书。</li>
</ul>
<figure><img src="/assets/image/computer-science/networking/006/HTTP.png" alt="http" tabindex="0" loading="lazy"><figcaption>http</figcaption></figure>]]></summary>
    <content type="html"><![CDATA[<h2>HTTP 和 HTTPS</h2>
<h3>区别</h3>
<ul>
<li>HTTP 是明文传输，不安全，而 HTTPS 加入了 SSL/TLS 安全协议，使得报文能加密传输；</li>
<li>HTTP 建立连接只需 TCP 三次握手，而 HTTPS 在三次握手后，还需要进行 SSL/TLS 握手；</li>
<li>HTTP 端口号为 80，HTTPS 端口号为 443；</li>
<li>HTTPS 需要向 CA 申请数字证书。</li>
</ul>
<figure><img src="/assets/image/computer-science/networking/006/HTTP.png" alt="http" tabindex="0" loading="lazy"><figcaption>http</figcaption></figure>
<figure><img src="/assets/image/computer-science/networking/006/HTTPS.png" alt="https" tabindex="0" loading="lazy"><figcaption>https</figcaption></figure>
<h3>HTTPS 缺点</h3>
<ul>
<li>在相同网络环境中，HTTPS 相比 HTTP 无论是响应时间还是耗电量都有大幅度上升；</li>
<li>HTTPS 的安全是有范围的，在黑客攻击、服务器劫持等情况下几乎起不到作用；</li>
<li>在现有的证书机制下，中间人攻击依然有可能发生；</li>
<li>HTTPS 需要更多的服务器资源，也会导致成本的升高。</li>
</ul>
<h2>加密算法</h2>
<p>HTTPS 使用混合加密算法解决数据安全传输问题，即<strong>对称加密</strong>和<strong>非对称加密</strong>混合使用。</p>
<h3>对称加密</h3>
<p>加密和解密都是同一个密钥，优缺点如下：</p>
<p><strong>优点：</strong></p>
<ol>
<li>由于密钥相同，因此加密解密速度快，适合加密比较大的数据。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>交易双方在传输过程中需要使用相同的密钥，因此需要在<strong>首次</strong>传输过程中必然需要由一方将密钥传给另一方，这样就无法保证保证密钥的安全性，有可能会被截获；</li>
<li>不同用户访问的密钥需要不同，这会造成服务器管理密钥困难，成本高。</li>
</ol>
<h3>非对称加密</h3>
<p>加密和解密使用不同的密钥：公钥（public key）加密和私钥（private key）解密。流程如下：</p>
<ol>
<li>发送方向接收方请求一个公钥；</li>
<li>发送方使用公钥加密，公钥和加密的数据泄露并没有关系，因为只有私钥才能解密；</li>
<li>接收方用私钥解密消息。</li>
</ol>
<p><strong>优点：</strong></p>
<ol>
<li>加密和解密使用不同的密钥，私钥不需要通过网络传输，安全性高。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>计算量比较大，加密解密速度比对称加密慢；</li>
<li>中间人攻击：中间人进行拦截，无法保证公钥是接收方提供的。</li>
</ol>
<figure><img src="/assets/image/computer-science/networking/006/mid-attack.png" alt="中间人攻击" tabindex="0" loading="lazy"><figcaption>中间人攻击</figcaption></figure>
<h2>数字证书和数字签名</h2>
<p>中间人攻击使我们无法验证公钥的真假。因此引入<strong>数字证书</strong>，用它来证明身份是真实的，并且防止被中间人攻击。</p>
<p>由数字证书认证机构（Certificate Authority，简称 CA）负责给用户签发数字证书，证书中包括：签发者、使用者公钥、使用的 HASH 算法、证书到期时间等。</p>
<p>但是问题来了，如果中间人篡改了证书，如何保证身份证明是有效的？这时需要引进<strong>数字签名</strong>。</p>
<p>首先使用 CA 自带的 HASH 算法对证书的内容进行 HASH 得到一个信息摘要，再用 CA 的私钥进行加密，最终组成数字签名。当服务器将原始信息和数字签名发送过来时，客户端先使用 CA 的公钥对数字签名进行解密，得到 CA 创建的信息摘要，再使用同样的 HASH 算法生成原始信息的信息摘要，两者进行对比，就知道证书是否被篡改了。</p>
<p>通过数字签名的证书验证，能最大程度的保证数据传输安全。</p>
<h2>HTTPS 工作流程</h2>
<p>前面提到，HTTPS 使用了混合加密解决安全传输问题，整个工作过程分为三大步：证书验证、非对称加密和对称加密。</p>
<figure><img src="/assets/image/computer-science/networking/006/https-flow.png" alt="https工作流程" tabindex="0" loading="lazy"><figcaption>https工作流程</figcaption></figure>
<p><strong>证书验证：</strong></p>
<ol>
<li>Client 发起一个 HTTPS 的请求；</li>
<li>Server 把事先配置好的公钥证书返回给客户端；</li>
<li>Client 验证公钥证书：如果验证通过则继续，不通过则显示警告信息；</li>
</ol>
<p><strong>非对称加密：</strong></p>
<ol start="4">
<li>Client 生成加密所使用的会话密钥，然后用证书的公钥加密这个会话密钥，发给 Server。</li>
<li>Server 使用自己的私钥解密这个消息，得到会话密钥。至此，Client 和 Server 双方都持有了相同的会话密钥。</li>
</ol>
<p><strong>对称加密：</strong></p>
<ol start="6">
<li>Server 使用会话密钥加密“明文内容 A”，发送给 Client。</li>
<li>Client 使用会话密钥解密响应的密文，得到“明文内容 A”。</li>
<li>Client 再次发起 HTTPS 的请求，使用会话密钥加密请求的“明文内容 B”，然后 Server 使用会话密钥解密密文，得到“明文内容 B”。</li>
</ol>
<h2>参考链接</h2>
<p><a href="https://www.cnblogs.com/linianhui/p/security-based-toolbox.html" target="_blank" rel="noopener noreferrer">[信息安全] 1.密码工具箱 </a></p>
<p><a href="https://www.cnblogs.com/linianhui/p/security-complex-toolbox.html" target="_blank" rel="noopener noreferrer">[信息安全] 2.密码工具箱（续）</a></p>
<p><a href="https://www.cnblogs.com/linianhui/p/security-https-workflow.html" target="_blank" rel="noopener noreferrer">[信息安全] 3.HTTPS 工作流程</a></p>
<p><a href="https://segmentfault.com/a/1190000021494676" target="_blank" rel="noopener noreferrer">HTTPS 详解一：附带最精美详尽的 HTTPS 原理图</a></p>
]]></content>
    <category term="计算机网络"/>
    <published>2022-05-05T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">TCP 三次握手与四次挥手</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/networking/07-tcp-three-handshakes-and-four-waves.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/networking/07-tcp-three-handshakes-and-four-waves.html"/>
    <updated>2025-02-11T08:02:34.000Z</updated>
    <summary type="html"><![CDATA[<p>传输层控制协议（Transmission Control Protocol, TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p>
<h2>三次握手</h2>
<p>三报文握手具体过程（客户端和服务端交换三个报文段）：</p>
<figure><img src="/assets/image/computer-science/networking/007/three.png" alt="三次握手" tabindex="0" loading="lazy"><figcaption>三次握手</figcaption></figure>
<p><strong>第一次握手：</strong></p>]]></summary>
    <content type="html"><![CDATA[<p>传输层控制协议（Transmission Control Protocol, TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p>
<h2>三次握手</h2>
<p>三报文握手具体过程（客户端和服务端交换三个报文段）：</p>
<figure><img src="/assets/image/computer-science/networking/007/three.png" alt="三次握手" tabindex="0" loading="lazy"><figcaption>三次握手</figcaption></figure>
<p><strong>第一次握手：</strong></p>
<p>起初两端都处于 <code>CLOSED</code> 关闭状态。一开始，服务器就进入监听状态，被动等待客户端的连接请求。</p>
<p>在打算建立 TCP 连接时，客户端将同步请求标志 <code>SYN=1</code> 和随机初始序号 <code>seq=x</code> 发送给服务器，客户端进入 <code>SYN-SENT</code> （同步已发送）状态，等待服务器确认。</p>
<p><strong>第二次握手：</strong></p>
<p>服务器收到数据包后由同步位 <code>SYN=1</code> 得知客户端请求建立连接。</p>
<p>服务器发送同步请求标志 <code>SYN=1</code>、确认标志 <code>ACK=1</code>、随机初始序号 <code>seq=y</code> 以及确认号字段 <code>ack=x+1</code>，发送给客户端，并进入 <code>SYN-RCVD</code> （同步已接收）状态。</p>
<p><strong>第三次握手：</strong></p>
<p>客户端收到确认后，检查 <code>ack</code> 是否为 <code>x+1</code>，<code>ACK</code> 是否为 <code>1</code>，如果正确则发送确认标志 <code>ACK=1</code>、序号 <code>seq=x+1</code> 以及确认号 <code>ack=y+1</code>，并进入连接已建立状态 <code>ESTABLISHED</code>。</p>
<p>服务器收到消息后，检查 <code>ack</code> 是否为 <code>y+1</code>，<code>ACK</code> 是否为 <code>1</code>，如果成功则建立连接。 进入连接已建立状态 <code>ESTABLISHED</code>。</p>
<p><strong>能否采用两报文握手？</strong></p>
<p>如果客户端发出连接请求，但因网络延迟而未收到确认，于是客户端再次发送一个连接请求，服务端收到确认，由于是两次握手，此时就会建立连接，等数据传输完毕后，释放连接。</p>
<p>此时第一个请求报文经过一段时间到达服务端，于是服务端收到确认，由于采用两次握手，此时就已同意建立连接，客户端不需要对服务端的确认报文发出响应，也不继续发送数据，导致连接一直建立，浪费资源。</p>
<h2>四次挥手</h2>
<p>四报文挥手来释放连接（现二者均处于连接已建立状态，假设客户端主动关闭 TCP 连接）：</p>
<figure><img src="/assets/image/computer-science/networking/007/four.png" alt="四次挥手" tabindex="0" loading="lazy"><figcaption>四次挥手</figcaption></figure>
<p><strong>第一次挥手：</strong></p>
<p>客户端发送 TCP 连接释放报文段，并进入<strong>终止等待 1 状态</strong>。</p>
<p>该报文段首部种的终止位 FIN 和确认位 ACK 都设置为 1 ，表明这是一个 TCP 连接释放报文段，同时也对之前收到的报文段进行确认。</p>
<p>序号 seq = u，它等于之前客户端已经传送过的数据的最后一个字节的序号加 1 。确认号 ack 的值设置为 v ，它等于 TCP 客户进程之前已收到的数据的最后一个字节的序号加 1 。</p>
<p><strong>第二次挥手：</strong></p>
<p>服务端收到连接释放报文段后，会发送一个普通的 TCP 确认报文段并进入<strong>关闭等待状态</strong>。</p>
<p>该报文段首部中的确认位 ACK 被设置为 1；seq 设置为 v，它等于服务端之前已传送过的数据的最后一个字节的序号加 1 。确认号 ack 字段的值被设置为 u + 1，这是对连接释放报文的确认。</p>
<p>这个时候，客户端不能给服务端发送信息报文，只能接收。但是服务端要是还有信息要传给客户端，仍能传送。</p>
<p><strong>第三次挥手：</strong></p>
<p>客户端收到确认报文段后就进入<strong>终止等待 2 状态</strong>，当服务器数据发送完毕后，给客户端发送 TCP 连接释放报文段并进入<strong>最后确认状态</strong>。</p>
<p>该报文段首部中的终止位 FIN 和确认位 ACK 的值都设置为 1 ，seq = w ，ack = u + 1 。</p>
<p><strong>第四次挥手：</strong></p>
<p>客户端收到连接释放报文段后，需要向服务端发送 TCP 确认报文段，并进入<strong>时间等待状态</strong>。</p>
<p>首部中的确认位 ACK = 1 ，seq = u + 1 ，ack = w + 1 ，这是对 TCP 连接释放报文段的确认。</p>
<p>服务端 收到该报文后就进入<strong>关闭状态</strong>，而 客户端 还要经过 2MSL 后才能进入<strong>关闭状态</strong>。</p>
<blockquote>
<p>MSL，最长报文段寿命，一般为 2 分钟。</p>
</blockquote>
<p><strong>为什么最后还要等待两个时间周期呢？</strong></p>
<ul>
<li>客户端的最后一个 ACK 报文在传输的时候丢失，服务器并没有接收到这个报文。这个候时候服务器就会超时重传这个 FIN 消息，然后客户端就会重新返回最后一个 ACK 报文，等待两个时间周期，完成关闭。</li>
<li>如果不等待这两个时间周期，服务器重传的那条消息就不会收到。服务器就因为接收不到客户端的信息而无法正常关闭。</li>
</ul>
<h2>参考链接</h2>
<p><a href="https://www.bilibili.com/video/BV1c4411d7jb" target="_blank" rel="noopener noreferrer">计算机网络微课堂</a></p>
]]></content>
    <category term="计算机网络"/>
    <published>2022-05-06T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">TCP 与 UDP 的区别</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/networking/08-tcp-udp.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/networking/08-tcp-udp.html"/>
    <updated>2025-02-11T08:02:34.000Z</updated>
    <summary type="html"><![CDATA[<p>TCP 和 UDP 都是传输层协议，属于 TCP/IP 协议族。</p>
<h2>UDP</h2>
<p>用户数据报协议（User Datagram Protocol，UDP）用来处理数据包，是一种无连接的协议，它的特点如下：</p>
<p><strong>无连接</strong></p>
<p>不需要像 TCP 一样进行三次握手进行连接，并且也只是数据报文的搬运工，不会对报文进行任何的加工处理。</p>
<p><strong>单播、多播、广播</strong></p>
<p>UDP 支持一对一、一对多、多对多、多对一的传输方式。</p>
<p><strong>面向报文</strong></p>]]></summary>
    <content type="html"><![CDATA[<p>TCP 和 UDP 都是传输层协议，属于 TCP/IP 协议族。</p>
<h2>UDP</h2>
<p>用户数据报协议（User Datagram Protocol，UDP）用来处理数据包，是一种无连接的协议，它的特点如下：</p>
<p><strong>无连接</strong></p>
<p>不需要像 TCP 一样进行三次握手进行连接，并且也只是数据报文的搬运工，不会对报文进行任何的加工处理。</p>
<p><strong>单播、多播、广播</strong></p>
<p>UDP 支持一对一、一对多、多对多、多对一的传输方式。</p>
<p><strong>面向报文</strong></p>
<p>在发送端，应用层将数据传递给传输层，UDP 只会给数据增加一个 UDP 头标识这是一个 UDP 协议报文，然后就传给网络层，对应用层交付的报文既不合并也不拆分，保留报文的边界，一次发送一个报文。</p>
<p>在接收端，网络层将 UDP 数据报传输给 UDP，UDP 去除首部后就会将数据原封不动地传递给应用层，一次交付一个完整的报文。</p>
<p><strong>不可靠</strong></p>
<p>首先体现在无连接上，通信双方想发就发，必然不可靠。没有像 TCP 做重传机制、流量控制和拥塞控制。</p>
<p><strong>头部开销小</strong></p>
<p>UDP 头部只有 8 字节，相比 TCP 20 个字节少得多，传输数据时比较高效。</p>
<p><strong>应用场景</strong></p>
<p>UDP 应用于效率要求高，但可靠性要求相对较低的场景，例如：即时通讯，速度要求高，但是偶尔出现断续不是太大问题，完全可以不使用重传机制，场景有在线视频、网络语音通话、广播通信等。</p>
<h2>TCP</h2>
<p>传输控制协议（Transmission Control Protocol，TCP）是一种面向连接的、可靠的、基于字节流的传输层通讯协议，它的特点如下：</p>
<p><strong>面向连接</strong></p>
<p>在发送前必须进行 TCP 三次握手在两端建立连接。</p>
<p><strong>仅支持单播传输</strong></p>
<p>每个 TCP 只能进行一对一传输，不支持多播和广播的形式。</p>
<p><strong>面向字节流</strong></p>
<p>TCP 不像 UDP 那样一个一个报文独立传输，而是在不保留报文边界的情况下以字节流方式进行传输。</p>
<p><strong>可靠传输</strong></p>
<p>TCP 为了实现可靠传输，使用了重传机制、流量控制和拥塞控制。</p>
<p><strong>头部开销大</strong></p>
<p>TCP 头部最小 20 个字节，最大 60 个字节，传输效率慢。</p>
<p><strong>应用场景</strong></p>
<p>TCP 应用于效率要求相对低，但可靠性要求高的场景，例如：文件传输、邮件传输等。</p>
<h2>区别</h2>
<p>|              | UDP                   | TCP                                          |<br>
|</p>
]]></content>
    <category term="计算机网络"/>
    <published>2022-05-06T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">登陆失败 HTTP 状态码</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/networking/09-http-code-when-authorized-refused.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/networking/09-http-code-when-authorized-refused.html"/>
    <updated>2025-02-11T08:02:34.000Z</updated>
    <summary type="html"><![CDATA[<p>如果用户尝试登陆，但用户名或密码不正确，应该返回什么状态码？</p>
<p>这个问题在社区中有一定争议，有些人认为应该返回 <code>403 Forbidden</code>，有些人认为应该返回 <code>404 Not Found</code>，有些人认为应该返回 <code>400 Bad Request</code>，有些人认为应该返回 <code>401 Unauthorized</code>。</p>
<p><code>403 Forbidden</code> 表示拒绝访问，但是请求接口是可以访问的，因此该状态码肯定不正确。</p>
<p><code>404 Not Found</code> 表示请求的资源不存在，但是请求接口是存在的，因此该状态码也不正确。</p>]]></summary>
    <content type="html"><![CDATA[<p>如果用户尝试登陆，但用户名或密码不正确，应该返回什么状态码？</p>
<p>这个问题在社区中有一定争议，有些人认为应该返回 <code>403 Forbidden</code>，有些人认为应该返回 <code>404 Not Found</code>，有些人认为应该返回 <code>400 Bad Request</code>，有些人认为应该返回 <code>401 Unauthorized</code>。</p>
<p><code>403 Forbidden</code> 表示拒绝访问，但是请求接口是可以访问的，因此该状态码肯定不正确。</p>
<p><code>404 Not Found</code> 表示请求的资源不存在，但是请求接口是存在的，因此该状态码也不正确。</p>
<p><code>400 Bad Request</code> 表示请求参数错误，但是用户输入的数据格式也是完全正确的，因此也不应该用该状态码。</p>
<p>而根据 <a href="https://stackoverflow.com/questions/32752578/whats-the-appropriate-http-status-code-to-return-if-a-user-tries-logging-in-wit" target="_blank" rel="noopener noreferrer">What's the appropriate HTTP status code to return if a user tries logging in with an incorrect username / password, but correct format?</a> 讨论，应该返回 <code>401 Unauthorized</code>。</p>
<p>根据 <a href="https://www.rfc-editor.org/rfc/rfc7235#section-3.1" target="_blank" rel="noopener noreferrer">RFC7235</a>：如果请求中包含身份验证凭据，则 <code>401</code> 响应表示拒绝对这些凭据进行授权。</p>
]]></content>
    <category term="计算机网络"/>
    <published>2024-07-10T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">401 和 403 状态码</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/networking/10-401-403.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/networking/10-401-403.html"/>
    <updated>2025-02-11T08:02:34.000Z</updated>
    <summary type="html"><![CDATA[<h2>401 Unauthorized（未授权）</h2>
<ul>
<li><strong>含义</strong>：表示客户端请求的资源需要身份验证，但身份验证失败或未提供正确的认证信息。</li>
<li><strong>触发情况</strong>：当服务器要求用户提供凭据（例如用户名和密码），但用户未提供凭据，或提供的凭据无效时，服务器返回 401。</li>
<li><strong>处理方式</strong>：
<ul>
<li>客户端应该提供有效的凭据，如登录信息、API 密钥或 token。</li>
<li>一般情况下，服务器会在响应中包含一个 <code>WWW-Authenticate</code> 头，提示客户端应该如何提供凭证。</li>
</ul>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>401 Unauthorized（未授权）</h2>
<ul>
<li><strong>含义</strong>：表示客户端请求的资源需要身份验证，但身份验证失败或未提供正确的认证信息。</li>
<li><strong>触发情况</strong>：当服务器要求用户提供凭据（例如用户名和密码），但用户未提供凭据，或提供的凭据无效时，服务器返回 401。</li>
<li><strong>处理方式</strong>：
<ul>
<li>客户端应该提供有效的凭据，如登录信息、API 密钥或 token。</li>
<li>一般情况下，服务器会在响应中包含一个 <code>WWW-Authenticate</code> 头，提示客户端应该如何提供凭证。</li>
</ul>
</li>
</ul>
<p><strong>示例场景</strong>：</p>
<ul>
<li>用户访问一个需要登录才能查看的页面，但没有登录或登录信息无效。</li>
<li>API 请求缺少认证信息（如缺少 Authorization Header 或 token 错误）。</li>
</ul>
]]></content>
    <category term="计算机网络"/>
    <published>2025-02-11T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">从 React Native 到 Expo：快速实现跨平台开发</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/expo/</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/expo/"/>
    <updated>2025-01-24T09:10:50.000Z</updated>
    <summary type="html"><![CDATA[<p>随着移动开发的需求日益增长，跨平台开发框架成为开发者的首选。其中，<a href="https://reactnative.dev/" target="_blank" rel="noopener noreferrer">React Native</a> 和 <a href="https://expo.dev/" target="_blank" rel="noopener noreferrer">Expo</a> 是两种备受关注的技术路线。这篇文章将从 React Native 的基础出发，探讨 Expo 的优势，并介绍如何搭建 Expo 项目、CI/CD 流程及开发体验。</p>
<hr>]]></summary>
    <content type="html"><![CDATA[<p>随着移动开发的需求日益增长，跨平台开发框架成为开发者的首选。其中，<a href="https://reactnative.dev/" target="_blank" rel="noopener noreferrer">React Native</a> 和 <a href="https://expo.dev/" target="_blank" rel="noopener noreferrer">Expo</a> 是两种备受关注的技术路线。这篇文章将从 React Native 的基础出发，探讨 Expo 的优势，并介绍如何搭建 Expo 项目、CI/CD 流程及开发体验。</p>
]]></content>
    <category term="expo"/>
    <published>2025-01-24T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">2024 前端生态报告</title>
    <id>https://dribble-njr.github.io/blog/blog/news/2024/W52/state-of-fe-2024.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/news/2024/W52/state-of-fe-2024.html"/>
    <updated>2024-12-31T10:49:31.000Z</updated>
    <summary type="html"><![CDATA[<p>最近，<a href="http://tsh.io" target="_blank" rel="noopener noreferrer">tsh.io</a> 发布了一份关于 2024 年 <a href="https://tsh.io/state-of-frontend/" target="_blank" rel="noopener noreferrer">前端生态的报告</a>，其中包含了一些有趣的数据和趋势。</p>
<h2>框架</h2>
<h3>前端框架</h3>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241230124159.png" alt="过去一年使用的框架" tabindex="0" loading="lazy"><figcaption>过去一年使用的框架</figcaption></figure>]]></summary>
    <content type="html"><![CDATA[<p>最近，<a href="http://tsh.io" target="_blank" rel="noopener noreferrer">tsh.io</a> 发布了一份关于 2024 年 <a href="https://tsh.io/state-of-frontend/" target="_blank" rel="noopener noreferrer">前端生态的报告</a>，其中包含了一些有趣的数据和趋势。</p>
<h2>框架</h2>
<h3>前端框架</h3>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241230124159.png" alt="过去一年使用的框架" tabindex="0" loading="lazy"><figcaption>过去一年使用的框架</figcaption></figure>
<ol>
<li>React 和 Vue.js 在使用率和喜爱度上表现出色，仍是市场的主流选择。</li>
<li>Svelte 和 HTMX 展现出很高的学习兴趣，可能在未来成为更加流行的选择。</li>
<li>Angular 系列 虽然仍有稳定的用户基础，但学习兴趣较低。</li>
<li>新兴框架（如 Qwik、Lit）显示了潜在的增长空间，但需要更多的推广和生态完善。</li>
<li>边缘化框架（如 Ember、Phoenix）用户基础薄弱，未来可能逐渐退出主流市场。</li>
</ol>
<h3>渲染框架</h3>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241230124811.png" alt="过去一年使用的渲染框架" tabindex="0" loading="lazy"><figcaption>过去一年使用的渲染框架</figcaption></figure>
<ol>
<li>Next.js 依然是前端开发的首选工具，拥有极高的用户满意度和市场接受度。</li>
<li>Astro 和 SvelteKit 的学习意向很高，特别是 SvelteKit，未来可能成为新兴热点。</li>
<li>Nuxt 在 Vue.js 生态中表现稳定，但在整体市场上学习意向稍逊于 SvelteKit 和 Astro。</li>
<li>Remix 虽然用户群较小，但学习意向表明其潜在发展前景广阔。</li>
<li>Gatsby 的热度和满意度明显下降，可能难以保持市场竞争力。</li>
<li>Docusaurus 的关注度较低，但在特定领域（文档生成）仍有一席之地。</li>
</ol>
<h2>库</h2>
<h3>验证库</h3>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241230125532.png" alt="过去一年使用的验证库" tabindex="0" loading="lazy"><figcaption>过去一年使用的验证库</figcaption></figure>
<ol>
<li>Zod 是当前最受欢迎的工具，使用率高，评价好，并且对未来用户有较大吸引力。</li>
<li>传统工具如 Joi 和 Yup 依然有一定的用户基础，但 Yup 在学习意向上表现更强。</li>
<li>新兴工具如 Valibot 开始受到关注，但目前影响力有限。</li>
<li>特定生态的工具如 Ajv 和 class-validator 主要用于特殊场景，使用范围较小。</li>
</ol>
<h3>日期管理库</h3>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231172109.png" alt="过去一年使用的日期管理库" tabindex="0" loading="lazy"><figcaption>过去一年使用的日期管理库</figcaption></figure>
<p>总结</p>
<ol>
<li>最受欢迎：date-fns 是当前的主流选择，其功能全面且模块化设计深受开发者喜爱。</li>
<li>Moment 的余热：尽管官方不再推荐，但 Moment 依然有广泛的用户基础，但其负面评价也较多。</li>
<li>轻量替代品：Day.js 提供了类似 Moment 的 API，同时更加轻量，逐渐受到开发者青睐。</li>
<li>新兴工具：Luxon 功能强大，学习意愿高，但目前尚未被广泛采用。</li>
<li>关注度较低的工具：Date.js 和 Luxon 在无意见比例上排名靠前，说明它们的市场影响力较低。</li>
</ol>
<p>建议：</p>
<ol>
<li>如果项目需要模块化和高性能，可以选择 date-fns。</li>
<li>如果倾向于轻量级解决方案，Day.js 是不错的选择。</li>
<li>对于需要处理复杂国际化或时区功能的场景，可以考虑学习 Luxon。</li>
</ol>
<h3>状态管理库</h3>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231172832.png" alt="过去一年使用的状态管理库" tabindex="0" loading="lazy"><figcaption>过去一年使用的状态管理库</figcaption></figure>
<ol>
<li>流行趋势：React Context API 是目前最受欢迎的简单状态管理工具，Redux Toolkit 和 Zustand 是复杂场景中更现代化的选择。</li>
<li>工具定位：
<ul>
<li>Redux 和 Redux Toolkit 适合复杂场景，但 Toolkit 更适合现代开发。</li>
<li>React Context API 和 Zustand 是轻量场景的热门选择。</li>
<li>Vue 社区用户倾向于 Pinia。</li>
</ul>
</li>
<li>新兴工具：Zustand 和 Jotai 等轻量级库越来越受到关注，但 Jotai 目前的社区影响力较弱。</li>
</ol>
<h3>工具库</h3>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231173312.png" alt="过去一年使用的其他工具库" tabindex="0" loading="lazy"><figcaption>过去一年使用的其他工具库</figcaption></figure>
<ol>
<li>流行工具：Lodash 是最受欢迎的工具库，功能丰富且应用场景广泛。</li>
<li>过时工具：jQuery 和 Underscore 的使用率下降，更多用户转向现代工具。</li>
<li>新兴工具：Immer 和 Ramda 的用户群体较小，但对特定需求的开发者可能有吸引力。</li>
<li>特定领域工具：RxJS 在响应式编程中有较高认可度，但学习曲线限制了它的普及。</li>
</ol>
<h2>数据请求库</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231174531.png" alt="过去一年使用的数据请求库" tabindex="0" loading="lazy"><figcaption>过去一年使用的数据请求库</figcaption></figure>
<ol>
<li>主流工具：Axios 和 Native Fetch 是最受欢迎的工具，分别占据了 73.6% 和 72.4% 的「Used and liked」。</li>
<li>新兴趋势：tRPC 和 TanStack Query 逐渐受到关注，尤其是 tRPC 的未来学习兴趣高达 29.8%。</li>
<li>小众工具：ky 和 ApolloClient 虽然功能强大，但在用户中的使用率较低。</li>
<li>有潜力的工具：SWR 和 TanStack Query 在 React 生态中有较大潜力。</li>
</ol>
<h2>托管平台</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231174959.png" alt="过去一年使用的托管平台" tabindex="0" loading="lazy"><figcaption>过去一年使用的托管平台</figcaption></figure>
<p>Vercel, AWS and… Netlify 是目前最受欢迎的云托管平台。也有很大一部分人使用自己的服务器。</p>
<h2>CI（持续集成）</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231175544.png" alt="是否使用 CI 工具" tabindex="0" loading="lazy"><figcaption>是否使用 CI 工具</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231175156.png" alt="过去一年使用的 CI 工具" tabindex="0" loading="lazy"><figcaption>过去一年使用的 CI 工具</figcaption></figure>
<p>对于独立开发者来说，使用 GitHub Actions 是最佳选择。</p>
<p>若想要独立的 CI/CD 平台，可以选择使用 Jenkins 或者 GitLab CI 提供的自托管替代方案。</p>
<h2>微前端</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231175653.png" alt="是否使用微前端" tabindex="0" loading="lazy"><figcaption>是否使用微前端</figcaption></figure>
<p>采用率从 2022 年报告使用微前端的受访者中 75.4% 显著下降至 2024 年的 23.6%。这一急剧下降表明行业在前端架构方面的转变。</p>
<p>许多人意识到微前端不仅需要技术知识，还需要组织和文化的变革，而他们并未做好准备。另一个关键因素是对服务器端渲染（SSR）和静态网站生成（SSG）架构的投资不断增加，这些架构包含类似的概念。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231175714.png" alt="过去一年使用的微前端解决方案" tabindex="0" loading="lazy"><figcaption>过去一年使用的微前端解决方案</figcaption></figure>
<ol>
<li>主流工具：Webpack 5 Module Federation 和 Single SPA 是微前端领域的两大主流解决方案，分别占据了 51.8% 和 35.5% 的比例。</li>
<li>次主流工具：Open Components、SystemJS 和 Bit 在特定场景下有一定用户基础，但市场占比明显低于前两者。</li>
<li>小众工具：Qiankun、Luigi 和 Piral 等工具的使用比例较低，但在特定社区和应用场景中仍有价值。</li>
<li>创新空间："Other" 类别显示了开发者在微前端领域的多样化尝试，可能包括定制解决方案或尚未普及的新工具。</li>
</ol>
<h2>包管理器</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231180850.png" alt="过去一年使用的包管理器" tabindex="0" loading="lazy"><figcaption>过去一年使用的包管理器</figcaption></figure>
<h2>JavaScript 运行时</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231181012.png" alt="过去一年使用的 JavaScript 运行时" tabindex="0" loading="lazy"><figcaption>过去一年使用的 JavaScript 运行时</figcaption></figure>
<p>Node: 稳定、生态丰富、社区活跃。</p>
<p>然而，其他 JavaScript 运行时，如 Bun（10%）和 Deno（2.6%），开始开辟自己的市场。</p>
<p>Bun 作为领先替代品的地位值得注意。它专注于其惊人的速度和几乎完全的 Node.js 兼容性，尽管还未达到 100%。Bun 还引入了内置包管理器、原生 TypeScript 和 JSX 支持以及独特的 API。</p>
<p>Deno 由 Ryan Dahl（Node.js 的原始开发者）创建，走上了与 Bun 类似的道路。尽管其最初通过 URL 导入依赖项的方法可能减缓了采用速度，但 Deno 推出其包注册表 JSR（npm 的替代品）标志着战略转变。随着 Deno2 的到来，观察它如何发展以及社区的反应将会很有趣。</p>
<h2>TypeScript</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231182827.png" alt="过去一年使用的类型工具" tabindex="0" loading="lazy"><figcaption>过去一年使用的类型工具</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231182909.png" alt="2024 与 2022 年相比更多人使用 TypeScript" tabindex="0" loading="lazy"><figcaption>2024 与 2022 年相比更多人使用 TypeScript</figcaption></figure>
<h2>浏览器技术</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231183301.png" alt="过去一年使用的浏览器技术" tabindex="0" loading="lazy"><figcaption>过去一年使用的浏览器技术</figcaption></figure>
<h2>PWA（渐进式 Web 应用）</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231183531.png" alt="是否使用 PWA" tabindex="0" loading="lazy"><figcaption>是否使用 PWA</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231183453.png" alt="PWA 的未来" tabindex="0" loading="lazy"><figcaption>PWA 的未来</figcaption></figure>
<h2>设计系统</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231183550.png" alt="最喜欢的设计系统排名" tabindex="0" loading="lazy"><figcaption>最喜欢的设计系统排名</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231183659.png" alt="过去一年使用的设计交接工具" tabindex="0" loading="lazy"><figcaption>过去一年使用的设计交接工具</figcaption></figure>
<h2>Style 工具</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231183814.png" alt="过去一年使用的 Style 工具" tabindex="0" loading="lazy"><figcaption>过去一年使用的 Style 工具</figcaption></figure>
<h2>测试</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231183955.png" alt="团队中谁负责测试" tabindex="0" loading="lazy"><figcaption>团队中谁负责测试</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231184037.png" alt="软件测试类型" tabindex="0" loading="lazy"><figcaption>软件测试类型</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231184104.png" alt="过去一年使用的测试工具" tabindex="0" loading="lazy"><figcaption>过去一年使用的测试工具</figcaption></figure>
<h2>代码管理</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231184146.png" alt="最喜欢的代码编辑器" tabindex="0" loading="lazy"><figcaption>最喜欢的代码编辑器</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231184208.png" alt="最喜欢的浏览器代码编辑器" tabindex="0" loading="lazy"><figcaption>最喜欢的浏览器代码编辑器</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231184301.png" alt="版本控制" tabindex="0" loading="lazy"><figcaption>版本控制</figcaption></figure>
<h2>低代码/无代码</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231184344.png" alt="low-code 平台" tabindex="0" loading="lazy"><figcaption>low-code 平台</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231184409.png" alt="no-code 平台" tabindex="0" loading="lazy"><figcaption>no-code 平台</figcaption></figure>
<h2>构建工具</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231184501.png" alt="过去一年使用的构建工具" tabindex="0" loading="lazy"><figcaption>过去一年使用的构建工具</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231184537.png" alt="lint 工具" tabindex="0" loading="lazy"><figcaption>lint 工具</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231184607.png" alt="网页构建工具" tabindex="0" loading="lazy"><figcaption>网页构建工具</figcaption></figure>
<h2>操作系统</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231184634.png" alt="操作系统" tabindex="0" loading="lazy"><figcaption>操作系统</figcaption></figure>
<h2>AI 工具</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231184727.png" alt="AI 工具" tabindex="0" loading="lazy"><figcaption>AI 工具</figcaption></figure>
<h2>未来趋势</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241231184836.png" alt="未来趋势" tabindex="0" loading="lazy"><figcaption>未来趋势</figcaption></figure>
]]></content>
    <category term="news"/>
    <published>2024-12-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Prisma</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/node/prisma/</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/node/prisma/"/>
    <updated>2024-12-23T03:21:07.000Z</updated>
    <summary type="html"><![CDATA[<p>Prisma ORM 是一套用于与数据库进行交互的下一代 ORM（对象关系映射，Object-Relational Mapping）工具，包括以下组件：</p>
<ul>
<li>Prisma Client: 自动生成且类型安全的查询构建器，用于 Node.js 和 TypeScript</li>
<li>Prisma Migrate: 声明式数据建模和迁移系统</li>
<li>Prisma Studio: 用于查看和编辑数据库中数据的 GUI</li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>Prisma Studio 是 Prisma ORM 中唯一不是开源的部分。你只能在本地运行 Prisma Studio。</p>
</div>]]></summary>
    <content type="html"><![CDATA[<p>Prisma ORM 是一套用于与数据库进行交互的下一代 ORM（对象关系映射，Object-Relational Mapping）工具，包括以下组件：</p>
<ul>
<li>Prisma Client: 自动生成且类型安全的查询构建器，用于 Node.js 和 TypeScript</li>
<li>Prisma Migrate: 声明式数据建模和迁移系统</li>
<li>Prisma Studio: 用于查看和编辑数据库中数据的 GUI</li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>Prisma Studio 是 Prisma ORM 中唯一不是开源的部分。你只能在本地运行 Prisma Studio。</p>
</div>
<h2>为什么使用 Prisma ORM</h2>
<p>Prisma ORM 不仅提供了现代化的开发体验，还显著提高了与数据库交互的效率和安全性。以下是 Prisma ORM 的主要优势，并与原始 SQL 进行对比。</p>
<h3>类型安全 vs SQL 静态查询</h3>
<p>Prisma Client 提供了强大的类型安全功能，每个查询都与 Prisma schema 紧密结合，使得查询语法和返回值均受到 TypeScript 的静态类型检查支持：</p>
<p>Prisma 查询：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  where<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token punctuation">{</span> contains<span class="token operator">:</span> <span class="token string">'Alice'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>SQL 查询：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'%Alice%'</span><span class="token punctuation">;</span>
</code></pre></div><p>Prisma 查询中，错误可以在开发阶段被捕获，而 SQL 查询需要额外的测试或运行时调试，容易引入拼写或逻辑错误。</p>
<h3>开发效率 vs 手动编写 SQL</h3>
<p>使用 Prisma ORM，可以通过高层抽象简化常见的数据库操作，而不需要重复编写大量 SQL 查询。</p>
<p>创建一个用户和关联帖子：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span>
    email<span class="token operator">:</span> <span class="token string">'alice@example.com'</span><span class="token punctuation">,</span>
    posts<span class="token operator">:</span> <span class="token punctuation">{</span>
      create<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">'Prisma is amazing!'</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>SQL：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"User"</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"email"</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'alice@example.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"Post"</span> <span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"authorId"</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Prisma is amazing!'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Prisma 的高层 API 不仅易读，还避免了处理 SQL 中外键关系和手动关联数据的复杂性。</p>
<h3>声明式数据建模 vs 手动设计数据库</h3>
<p>Prisma schema 提供了直观的声明式语法来定义数据模型，与数据库结构直接同步，而 SQL 通常需要手动设计表结构并维护复杂的迁移脚本。</p>
<p>Prisma schema：</p>
<div class="language-prisma" data-ext="prisma" data-title="prisma"><pre class="language-prisma"><code>model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  posts Post[]
}
</code></pre></div><p>SQL：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">"User"</span> <span class="token punctuation">(</span>
  <span class="token string">"id"</span> <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
  <span class="token string">"email"</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">"Post"</span> <span class="token punctuation">(</span>
  <span class="token string">"id"</span> <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
  <span class="token string">"title"</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token string">"authorId"</span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token string">"authorId"</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token string">"User"</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Prisma schema 自动生成相关的迁移脚本，而 SQL 的表定义需要开发者手动编写，容易出错。</p>
<h3>总结</h3>
<p>Prisma ORM 通过提供类型安全、自动迁移、高层抽象和声明式数据建模，显著提高了与数据库交互的效率和安全性。</p>
<p>| 特性             | Prisma ORM                       | 原始 SQL             |<br>
|</p>
]]></content>
    <category term="backend"/>
    <category term="node"/>
    <published>2024-12-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Prisma 入门</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/node/prisma/01-quick-start.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/node/prisma/01-quick-start.html"/>
    <updated>2024-12-17T10:57:18.000Z</updated>
    <summary type="html"><![CDATA[<p>以关系型数据库 Mysql 为例，介绍 Prisma 在 Node.js 和 Typescript 项目中的安装和使用。</p>
<h2>前置条件</h2>
<ul>
<li>安装 <a href="https://nodejs.org/en" target="_blank" rel="noopener noreferrer">Node.js</a></li>
<li>运行 <a href="https://www.mysql.com/" target="_blank" rel="noopener noreferrer">Mysql</a></li>
</ul>
<div class="hint-container note">
<p class="hint-container-title">注</p>
<p>更多系统要求请参考 <a href="https://www.prisma.io/docs/orm/reference/system-requirements" target="_blank" rel="noopener noreferrer">Prisma 系统要求</a>。</p>
<p>确保拥有 <a href="https://www.prisma.io/docs/orm/reference/connection-urls" target="_blank" rel="noopener noreferrer">数据库连接 url</a>。</p>
</div>]]></summary>
    <content type="html"><![CDATA[<p>以关系型数据库 Mysql 为例，介绍 Prisma 在 Node.js 和 Typescript 项目中的安装和使用。</p>
<h2>前置条件</h2>
<ul>
<li>安装 <a href="https://nodejs.org/en" target="_blank" rel="noopener noreferrer">Node.js</a></li>
<li>运行 <a href="https://www.mysql.com/" target="_blank" rel="noopener noreferrer">Mysql</a></li>
</ul>
<div class="hint-container note">
<p class="hint-container-title">注</p>
<p>更多系统要求请参考 <a href="https://www.prisma.io/docs/orm/reference/system-requirements" target="_blank" rel="noopener noreferrer">Prisma 系统要求</a>。</p>
<p>确保拥有 <a href="https://www.prisma.io/docs/orm/reference/connection-urls" target="_blank" rel="noopener noreferrer">数据库连接 url</a>。</p>
</div>
<h2>安装项目</h2>
<p>创建项目目录：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> hello-prisma
<span class="token builtin class-name">cd</span> hello-prisma
</code></pre></div><p>初始化 Typescript 项目并安装 Prisma CLI：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> init <span class="token parameter variable">-y</span>
<span class="token function">npm</span> <span class="token function">install</span> prisma typescript tsx @types/node --save-dev
</code></pre></div><p>这会创建 <code>package.json</code> 文件，并创建一个 Typescript 项目。</p>
<p>接下来，初始化 Typescript：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx tsc <span class="token parameter variable">--init</span>
</code></pre></div><p>你现在可以通过 <code>npx</code> 运行 Prisma CLI：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma
</code></pre></div><p>接下来，你可以通过创建 <a href="https://www.prisma.io/docs/concepts/components/prisma-schema" target="_blank" rel="noopener noreferrer">Prisma Schema</a> 文件来创建 Prisma ORM 项目：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma init
</code></pre></div><p>这个命令做了两件事：</p>
<ul>
<li>创建一个名为 <code>prisma</code> 的目录，其中包含一个名为 <code>schema.prisma</code> 的文件，该文件包含数据库连接变量和 schema 模型。</li>
<li>在项目根目录中创建 <a href="https://www.prisma.io/docs/orm/more/development-environment/environment-variables/env-files" target="_blank" rel="noopener noreferrer"><code>.env</code></a> 文件，用于定义环境变量（例如数据库连接）。</li>
</ul>
<h2>连接数据库</h2>
<p>为了连接数据库，你需要在 <code>schema.prisma</code> 文件中定义数据源：</p>
<p><strong>prisma/schema.prisma</strong></p>
<div class="language-prisma" data-ext="prisma" data-title="prisma"><pre class="language-prisma"><code>datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
</code></pre></div><p><strong>.env</strong></p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>DATABASE_URL="mysql://johndoe:randompassword@localhost:3306/mydb"
</code></pre></div><p>URL 格式取决于你使用的数据库。对于 MySQL，它看起来如下（大写的部分是你的特定连接细节的占位符）：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>mysql://USER:PASSWORD@HOST:PORT/DATABASE
</code></pre></div><p>这里是对每个组件的简要解释：</p>
<ul>
<li>USER: 数据库用户名</li>
<li>PASSWORD: 数据库用户密码</li>
<li>PORT: 数据库服务器运行的端口（通常为 3306 用于 MySQL）</li>
<li>DATABASE: 数据库名称</li>
</ul>
<h2>Prisma Migrate</h2>
<p><a href="https://www.prisma.io/docs/orm/prisma-migrate" target="_blank" rel="noopener noreferrer">Prisma Migrate</a> 是 Prisma 的迁移工具，用于管理数据库 schema 的变更。</p>
<p><strong>prisma/schema.prisma</strong></p>
<div class="language-prisma" data-ext="prisma" data-title="prisma"><pre class="language-prisma"><code>model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
}
</code></pre></div><p>为了将 schema 转换为数据库，你需要运行 Prisma Migrate：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma migrate <span class="token parameter variable">--name</span> init
</code></pre></div><p>这个命令会做两件事：</p>
<ul>
<li>创建一个 SQL 迁移文件。</li>
<li>在数据库中执行对应的 SQL 迁移文件。</li>
</ul>
<div class="hint-container note">
<p class="hint-container-title">注</p>
<p>注意：默认情况下，运行 <code>prisma migrate dev</code> 后，会在引擎盖下调用 <code>generate</code>。 如果模式中定义了 <code>prisma-client-js</code> 生成器，它会检查 <code>@prisma/client</code> 是否已安装，如果缺少，则安装。</p>
</div>
<h2>安装 Prisma Client</h2>
<p>要开始使用 Prisma 客户端，需要安装 <code>@prisma/client</code> 软件包：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @prisma/client
</code></pre></div><p>安装命令会调用 <code>prisma generate</code>，读取 Prisma schema 并生成适合你模型的 Prisma 客户端版本。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241217183854.png" alt="workflow" tabindex="0" loading="lazy"><figcaption>workflow</figcaption></figure>
<p>无论何时更新 Prisma schema，都必须使用 <code>prisma migrate dev</code> 或 <code>prisma db push</code> 更新数据库模式。这将使数据库模式与 Prisma 模式保持同步。这些命令还将重新生成 Prisma 客户端。</p>
<blockquote>
<p>[!WARNING] &gt; <code>prisma db push</code> 不会生成迁移文件，只会在数据库中执行对应的 SQL 语句。</p>
<p>因此如果你需要对数据库进行版本控制，需要更好的迁移记录和管理，请使用 <code>prisma migrate dev</code>。</p>
</blockquote>
<h2>操作数据库</h2>
<h3>查询数据</h3>
<p>现在已经生成了 <a href="https://www.prisma.io/docs/orm/prisma-client" target="_blank" rel="noopener noreferrer">Prisma Client</a>，可以开始编写在数据库中读写数据的查询。</p>
<p>创建一个名为 <code>index.ts</code> 的新文件，并在其中添加以下代码：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@prisma/client'</span>

<span class="token keyword">const</span> prisma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrismaClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... you will write your Prisma Client queries here</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> prisma<span class="token punctuation">.</span><span class="token function">$disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token keyword">await</span> prisma<span class="token punctuation">.</span><span class="token function">$disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>以下是代码片段各部分的简要概述：</p>
<ul>
<li>从 <code>@prisma/client</code> 节点模块导入 <code>PrismaClient</code> 构造函数</li>
<li>实例化 <code>PrismaClient</code></li>
<li>定义名为 <code>main</code> 的异步函数，向数据库发送查询</li>
<li>调用 <code>main</code> 函数</li>
<li>脚本终止时关闭数据库连接</li>
</ul>
<p>在 <code>main</code> 函数中，添加以下查询，从数据库中读取所有用户记录并打印结果：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... you will write your Prisma Client queries here</span>
  <span class="token keyword">const</span> allUsers <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>allUsers<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>运行脚本：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx tsx index.ts
</code></pre></div><p>这将打印一个空数组，因为数据库中还没有用户记录：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre></div><h3>写入数据</h3>
<p><code>findMany</code> 查询只能从数据库中读取数据（尽管它仍然是空的）。接下来可以向 <code>Post</code> 表和 <code>User</code> 表中写入新记录。</p>
<p>调整 <code>main</code> 函数，向数据库发送创建查询：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span>
      email<span class="token operator">:</span> <span class="token string">'alice@prisma.io'</span><span class="token punctuation">,</span>
      posts<span class="token operator">:</span> <span class="token punctuation">{</span>
        create<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">'Hello World'</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      profile<span class="token operator">:</span> <span class="token punctuation">{</span>
        create<span class="token operator">:</span> <span class="token punctuation">{</span> bio<span class="token operator">:</span> <span class="token string">'I like turtles'</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> allUsers <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    include<span class="token operator">:</span> <span class="token punctuation">{</span>
      posts<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      profile<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>allUsers<span class="token punctuation">,</span> <span class="token punctuation">{</span> depth<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这段代码使用 <a href="https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#nested-writes" target="_blank" rel="noopener noreferrer">嵌套写查询</a> 创建了一条新的用户记录以及新的帖子和简介记录。用户记录分别通过 <code>Post.author ↔ User.posts</code> 和 <code>Profile.user ↔ User.profile</code> 关系字段与其他两条记录创建 <a href="https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relation-fields" target="_blank" rel="noopener noreferrer">关系</a>。</p>
<p>请注意，您向 <code>findMany</code> 传递了 <a href="https://www.prisma.io/docs/orm/prisma-client/queries/select-fields#return-nested-objects-by-selecting-relation-fields" target="_blank" rel="noopener noreferrer"><code>include</code></a> 选项，该选项告诉 Prisma 客户端在返回的用户对象中包含 <code>posts</code> 和 <code>profile</code> 关系。</p>
<p>运行脚本：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx tsx index.ts
</code></pre></div><p>这将打印一个包含新创建的用户的数组：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    email: <span class="token string">'alice@prisma.io'</span>,
    id: <span class="token number">1</span>,
    name: <span class="token string">'Alice'</span>,
    posts: <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        content: null,
        createdAt: <span class="token number">2020</span>-03-21T16:45:01.246Z,
        updatedAt: <span class="token number">2020</span>-03-21T16:45:01.246Z,
        id: <span class="token number">1</span>,
        published: false,
        title: <span class="token string">'Hello World'</span>,
        authorId: <span class="token number">1</span>,
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>,
    profile: <span class="token punctuation">{</span>
      bio: <span class="token string">'I like turtles'</span>,
      id: <span class="token number">1</span>,
      userId: <span class="token number">1</span>,
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre></div><p>这个 query 向 <code>User</code> 和 <code>Post</code> 表中写入了新记录：</p>
<p>User</p>
<p>| id  | email           | name  |<br>
|</p>
]]></content>
    <category term="node"/>
    <published>2024-12-17T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">国际化</title>
    <id>https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/04-i18n.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/04-i18n.html"/>
    <updated>2024-12-17T10:16:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>配置</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> workspace mobile <span class="token function">add</span> i18next react-i18next expo-localization
</code></pre></div><p>配置 app.json</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"expo"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"expo-localization"</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>配置</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> workspace mobile <span class="token function">add</span> i18next react-i18next expo-localization
</code></pre></div><p>配置 app.json</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"expo"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"expo-localization"</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>集成</h2>
<p><code>apps/mobile/locales/index.ts</code></p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> i18n <span class="token keyword">from</span> <span class="token string">'i18next'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> initReactI18next <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-i18next'</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Localization <span class="token keyword">from</span> <span class="token string">'expo-localization'</span>
<span class="token keyword">import</span> English <span class="token keyword">from</span> <span class="token string">'./en'</span>
<span class="token keyword">import</span> Chinese <span class="token keyword">from</span> <span class="token string">'./zh'</span>

<span class="token keyword">const</span> resources <span class="token operator">=</span> <span class="token punctuation">{</span>
  en<span class="token operator">:</span> <span class="token punctuation">{</span> translation<span class="token operator">:</span> English <span class="token punctuation">}</span><span class="token punctuation">,</span>
  zh<span class="token operator">:</span> <span class="token punctuation">{</span> translation<span class="token operator">:</span> Chinese <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getUserLanguage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> locales <span class="token operator">=</span> Localization<span class="token punctuation">.</span><span class="token function">getLocales</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>locales<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> locales<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>languageCode <span class="token operator">??</span> <span class="token string">'zh'</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">'zh'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.error('Error retrieving language preference:', error);</span>
    <span class="token keyword">return</span> <span class="token string">'zh'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> language <span class="token operator">=</span> <span class="token function">getUserLanguage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

i18n<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>initReactI18next<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  resources<span class="token punctuation">,</span>
  compatibilityJSON<span class="token operator">:</span> <span class="token string">'v3'</span><span class="token punctuation">,</span>
  lng<span class="token operator">:</span> language<span class="token punctuation">,</span>
  fallbackLng<span class="token operator">:</span> <span class="token string">'zh'</span><span class="token punctuation">,</span>
  interpolation<span class="token operator">:</span> <span class="token punctuation">{</span>
    escapeValue<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// react already safes from xss</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  react<span class="token operator">:</span> <span class="token punctuation">{</span>
    useSuspense<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// avoid suspense problem</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> i18n
</code></pre></div>]]></content>
    <category term="Project"/>
    <published>2024-09-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">云服务器设置代理</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/linux/practice/06-server-proxy.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/linux/practice/06-server-proxy.html"/>
    <updated>2024-12-04T08:46:00.000Z</updated>
    <summary type="html"><![CDATA[<p>在许多开发和部署场景中，使用代理服务器能够帮助我们绕过网络限制，提升安全性，或者加速访问。在本篇文章中，我们将讨论如何在云服务器上设置代理，主要包括通过隧道技术与使用 Clash for Linux 两种方式。</p>
<h2>使用 SSH 隧道设置代理</h2>
<p>SSH 隧道是一种通过安全通道将本地端口转发到远程服务器的方法。使用 SSH 隧道可以通过云服务器作为中介，绕过局域网或区域性网络的限制，访问外部服务。下面是如何设置 SSH 隧道代理。</p>
<p>一般云服务器都支持 SSH 隧道，如果是基于 Ubuntu 的系统，可以通过以下命令来确认：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl status <span class="token function">ssh</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>在许多开发和部署场景中，使用代理服务器能够帮助我们绕过网络限制，提升安全性，或者加速访问。在本篇文章中，我们将讨论如何在云服务器上设置代理，主要包括通过隧道技术与使用 Clash for Linux 两种方式。</p>
<h2>使用 SSH 隧道设置代理</h2>
<p>SSH 隧道是一种通过安全通道将本地端口转发到远程服务器的方法。使用 SSH 隧道可以通过云服务器作为中介，绕过局域网或区域性网络的限制，访问外部服务。下面是如何设置 SSH 隧道代理。</p>
<p>一般云服务器都支持 SSH 隧道，如果是基于 Ubuntu 的系统，可以通过以下命令来确认：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl status <span class="token function">ssh</span>
</code></pre></div><p>如果看到 <code>active (running)</code> 字样，说明 SSH 服务正在运行。</p>
<p>如果没有安装，可以使用以下命令安装：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openssh-server
</code></pre></div><p>在本地电脑上，使用 SSH 连接到云服务器：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-R</span> <span class="token number">7890</span>:127.0.0.1:7890 root@<span class="token operator">&lt;</span>your-server-ip<span class="token operator">&gt;</span>
</code></pre></div><p>然后在云服务器上，设置环境变量，编辑 <code>~/.bashrc</code>（或 <code>~/.zshrc</code>，取决于你使用的 shell） 文件：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">vi</span> ~/.bashrc
<span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span>http://127.0.0.1:7890
<span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://127.0.0.1:7890
</code></pre></div><p>这样，云服务器上的所有请求，都会经过本地的 7890 端口。</p>
<div class="hint-container note">
<p class="hint-container-title">注</p>
<p>该方式优点在于简单，在一些简单的场景下可以满足需求。</p>
<p>缺点在于依赖 SSH 隧道，如果使用 GitHub Action 触发 CI，由于没有 SSH 隧道，所以会导致无法使用代理。</p>
<p>除非你能保证本地电脑一直处于连接状态，否则不建议使用该方式。</p>
</div>
<h2>使用 Clash for Linux 设置代理</h2>
<p><a href="https://github.com/Elegycloud/clash-for-linux-backup" target="_blank" rel="noopener noreferrer">Clash for Linux</a> 是一款功能强大的代理工具，支持多种协议，包括 HTTP、SOCKS5 等。通过 Clash for Linux，我们可以方便地在本地电脑上设置代理，并将其同步到云服务器上。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> clone https://github.com/Elegycloud/clash-for-linux-backup.git
</code></pre></div><p>进入到项目目录，编辑 <code>.env</code> 文件，修改变量 <code>CLASH_URL</code> 的值。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> clash-for-linux-backup
$ <span class="token function">vi</span> .env
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>CLASH_SECRET</code> 变量会用于登陆 dashboard。</p>
</div>
<p>启动代理：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">bash</span> start.sh
正在检测订阅地址<span class="token punctuation">..</span>.
Clash订阅地址可访问！                                      <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>

正在下载Clash配置文件<span class="token punctuation">..</span>.
配置文件config.yaml下载成功！                              <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>

正在启动Clash服务<span class="token punctuation">..</span>.
服务启动成功！                                             <span class="token punctuation">[</span>  OK  <span class="token punctuation">]</span>

Clash Dashboard 访问地址：http://<span class="token operator">&lt;</span>ip<span class="token operator">&gt;</span>:9090/ui
Secret：xxxxxxxxxxxxx

请执行以下命令加载环境变量: <span class="token builtin class-name">source</span> /etc/profile.d/clash.sh

请执行以下命令开启系统代理: proxy_on

若要临时关闭系统代理，请执行: proxy_off
</code></pre></div><p>加载环境变量并启动服务：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">source</span> /etc/profile.d/clash.sh
$ proxy_on
</code></pre></div><p>检查服务端口：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">netstat</span> <span class="token parameter variable">-tuln</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">7890</span>
$ <span class="token function">netstat</span> <span class="token parameter variable">-tln</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">'9090|789.'</span>
tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::7892                 :::*                    LISTEN     
tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::7890                 :::*                    LISTEN     
tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::7891                 :::*                    LISTEN     
tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::9090                 :::*                    LISTEN
</code></pre></div><p>检查环境变量：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">env</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">'http_proxy|https_proxy'</span>
<span class="token assign-left variable">http_proxy</span><span class="token operator">=</span>http://127.0.0.1:7890
<span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://127.0.0.1:7890
</code></pre></div><p>这样，云服务器上的代理即设置完成。若要查看 dashboard，可以使用 VS Code 插件 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh" target="_blank" rel="noopener noreferrer">Remote - SSH</a> 连接到云服务器，设置端口转发，然后在浏览器中访问 <code>http://127.0.0.1:9090/ui</code>。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20241204164400.png" alt="端口转发" tabindex="0" loading="lazy"><figcaption>端口转发</figcaption></figure>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>配置完成后，dashboard 会在关闭连接后停止，所以可以进行持久化。</p>
</div>
<p>编辑 <code>~/.bashrc</code> 文件，添加以下内容：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">vi</span> ~/.bashrc
<span class="token function">bash</span> /path/to/clash-for-linux-backup/start.sh
<span class="token builtin class-name">source</span> /etc/profile.d/clash.sh
proxy_on
</code></pre></div><p>这样，每次连接到云服务器后，都会自动启动代理。</p>
]]></content>
    <category term="linux"/>
    <published>2024-12-04T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Docker 安装 MySQL</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/database/mysql/01-install-mysql.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/database/mysql/01-install-mysql.html"/>
    <updated>2024-12-04T08:03:38.000Z</updated>
    <summary type="html"><![CDATA[<p>使用 Docker 安装 MySQL。</p>
<h2>安装</h2>
<p>从 <a href="https://hub.docker.com/_/mysql/" target="_blank" rel="noopener noreferrer">docker-hub</a> 镜像源中找到想要安装的版本号。</p>
<p>这里直接安装最新版本。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull mysql
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>使用 Docker 安装 MySQL。</p>
<h2>安装</h2>
<p>从 <a href="https://hub.docker.com/_/mysql/" target="_blank" rel="noopener noreferrer">docker-hub</a> 镜像源中找到想要安装的版本号。</p>
<p>这里直接安装最新版本。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull mysql
</code></pre></div><p>等待一段时间安装完成后，启动 MySQL 容器：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> mysql-container <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>my-secret-pw <span class="token parameter variable">-v</span> /path/to/data:/var/lib/mysql <span class="token parameter variable">-e</span> <span class="token assign-left variable">TZ</span><span class="token operator">=</span>Asia/Shanghai <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 mysql
</code></pre></div><p>这个命令的参数解释如下：</p>
<ul>
<li><code>-d</code>: 后台运行容器。</li>
<li><code>--name mysql-container</code>: 给容器起一个名字。</li>
<li><code>-e MYSQL_ROOT_PASSWORD=my-secret-pw</code>: 设置 MySQL root 用户的密码。</li>
<li><code>-p 3306:3306</code>: 将容器的 MySQL 服务端口（默认为 3306）映射到主机的 3306 端口。</li>
<li><code>-v /path/to/data:/var/lib/mysql</code>: 将容器中的 MySQL 数据目录挂载到主机上的 <code>/path/to/data</code> 目录。</li>
<li><code>-e TZ=Asia/Shanghai</code>: 设置时区。</li>
</ul>
<p>启动容器后进入 MySQL 容器的命令行界面：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql-container <span class="token function">bash</span>
</code></pre></div><p>输入密码即可进入 MySQL 命令行界面。</p>
<h2>设置 MySQL</h2>
<p>进入到命令行界面后，设置一些基本的配置。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>MySQL 命令以 <code>;</code> 表示一行结束。</p>
</div>
<ol>
<li>登陆 MySQL</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>
</code></pre></div><ol start="2">
<li>创建数据库</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>create database your_data_base_name<span class="token punctuation">;</span>
</code></pre></div><ol start="3">
<li>创建用户</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>CREATE <span class="token environment constant">USER</span> <span class="token string">'your_username'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'your_password'</span><span class="token punctuation">;</span>
</code></pre></div><ol start="4">
<li>设置权限</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>GRANT ALL PRIVILEGES ON your_database_name.* TO <span class="token string">'your_username'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span>
</code></pre></div><ol start="5">
<li>刷新权限</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>FLUSH PRIVILEGES<span class="token punctuation">;</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>必要步骤，否则权限会不生效。</p>
</div>
<p>做完基本的配置之后，就可以使用下面命令退出命令行界面：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">exit</span><span class="token punctuation">;</span>
</code></pre></div><h2>服务器开放端口</h2>
<p>参考 。</p>
<p>接下来就可以使用 Navicat 连接数据库了。</p>
]]></content>
    <category term="database"/>
    <published>2024-01-14T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">服务器设置 ssh 密钥登录</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/linux/practice/01-set-the-ssh.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/linux/practice/01-set-the-ssh.html"/>
    <updated>2024-12-03T06:25:23.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>使用密码登录服务器并不安全，因此我们需要设置密钥登录。</p>
</div>
<h2>创建密钥对</h2>
<p>登录阿里云控制台 -&gt; 云服务 ECS -&gt; 网络与安全 -&gt; 密钥对 -&gt; 创建密钥对。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-create-ssh.png" alt="step1-create-ssh" tabindex="0" loading="lazy"><figcaption>step1-create-ssh</figcaption></figure>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>使用密码登录服务器并不安全，因此我们需要设置密钥登录。</p>
</div>
<h2>创建密钥对</h2>
<p>登录阿里云控制台 -&gt; 云服务 ECS -&gt; 网络与安全 -&gt; 密钥对 -&gt; 创建密钥对。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-create-ssh.png" alt="step1-create-ssh" tabindex="0" loading="lazy"><figcaption>step1-create-ssh</figcaption></figure>
<p>创建成功之后，浏览器会自动下载一个 <code>.pem</code> 私钥文件，记住这个文件的位置，之后要用。</p>
<h2>绑定密钥对</h2>
<p>选中刚才创建的密钥对，点击右侧<strong>绑定密钥对</strong>，将密钥对绑定到实例。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step2-bind-ssh.png" alt="step2-bind-ssh" tabindex="0" loading="lazy"><figcaption>step2-bind-ssh</figcaption></figure>
<h2>添加安全组规则</h2>
<p>云服务 ECS -&gt; 网络与安全 -&gt; 安全组 -&gt; 入方向 -&gt; 手动添加。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step3-add-port.png" alt="step3-add-port" tabindex="0" loading="lazy"><figcaption>step3-add-port</figcaption></figure>
<p>执行完后重启实例。</p>
<h2>密钥验证并禁用密码登录</h2>
<ol>
<li>
<p>安装 MobaXterm</p>
</li>
<li>
<p>在 MobaXterm 下输入命令（<a href="https://help.aliyun.com/document_detail/51798.html#title-7je-5ba-sm2" target="_blank" rel="noopener noreferrer">参考阿里云官网文档</a>）</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token number">400</span> <span class="token punctuation">[</span>.pem私钥文件在本地机上的存储路径<span class="token punctuation">]</span>
</code></pre></div><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-i</span> <span class="token punctuation">[</span>.pem私钥文件在本地机上的存储路径<span class="token punctuation">]</span> root@<span class="token punctuation">[</span>公网IP地址<span class="token punctuation">]</span>
</code></pre></div></li>
<li>
<p>输入以下命令修改 config 文件</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">vi</span> /etc/ssh/sshd_config
</code></pre></div></li>
<li>
<p>按 <code>i</code> 进入编辑模式</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#禁用密码验证</span>
PasswordAuthentication no
<span class="token comment">#启用密钥验证</span>
PubkeyAuthentication <span class="token function">yes</span>
</code></pre></div></li>
<li>
<p>重启 ssh 服务</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">service</span> sshd restart
</code></pre></div></li>
</ol>
<p>接下来在阿里云控制台使用 Workbench 远程连接，可以发现密码登录已经被禁用了，只能使用密钥登录。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step4-pw-fail.png" alt="step4-pw-fail" tabindex="0" loading="lazy"><figcaption>step4-pw-fail</figcaption></figure>
]]></content>
    <category term="linux"/>
    <published>2021-05-12T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">搭建 git 私服</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/linux/practice/02-build-git-server.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/linux/practice/02-build-git-server.html"/>
    <updated>2024-12-03T06:25:23.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><strong>git 私服作用：</strong></p>
<ul>
<li>自己电脑和公司（或者实验室）电脑随时同步资料</li>
<li>GitHub、Gitee 私有仓库都是限流的，文件一旦多了，或者有图片文件，<code>git pull</code> 的时候半天拉不下来</li>
<li>保存一些隐私文件</li>
</ul>
</div>
<h2>开始搭建</h2>
<ul>
<li>服务器：centos7.9</li>
<li>本地电脑: Windows10</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><strong>git 私服作用：</strong></p>
<ul>
<li>自己电脑和公司（或者实验室）电脑随时同步资料</li>
<li>GitHub、Gitee 私有仓库都是限流的，文件一旦多了，或者有图片文件，<code>git pull</code> 的时候半天拉不下来</li>
<li>保存一些隐私文件</li>
</ul>
</div>
<h2>开始搭建</h2>
<ul>
<li>服务器：centos7.9</li>
<li>本地电脑: Windows10</li>
</ul>
<p>如果服务器没装 git 可以使用以下命令安装：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token function">git</span>
</code></pre></div><h2>创建 git 用户</h2>
<p>创建一个 Git 的 Linux 账户，这个账户只做 Git 私服的操作，之后就要设置 Linux Git 账户的密码，但由于我之前已经 ，因此不用设置密码。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>adduser <span class="token function">git</span>
</code></pre></div><p><strong>后面所有的操作都在 git 用户下进行：</strong></p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@instance-5fcyjde7 ~<span class="token punctuation">]</span>su - <span class="token function">git</span>
</code></pre></div><p>看一下自己所在的目录，是不是在 git 目录下面：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>git@instance-5fcyjde7 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">pwd</span>
/home/git
</code></pre></div><h2>服务器端密钥管理</h2>
<p>创建 <code>.ssh</code> 目录，如果 <code>.ssh</code> 已经存在了，可以忽略这一项。方便每次操作 Git 仓库的时候不用再去输入密码。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/
<span class="token function">mkdir</span> .ssh
</code></pre></div><p>进入 <code>.ssh</code> 文件下，创建一个 <code>authorized_keys</code> 文件，并给 <code>authorized_keys</code> 文件设置权限。这个文件用来存放客户端的公钥。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/.ssh
<span class="token function">touch</span> authorized_keys
<span class="token function">chmod</span> <span class="token number">700</span> /home/git/.ssh
<span class="token function">chmod</span> <span class="token number">600</span> /home/git/.ssh/authorized_keys
</code></pre></div><p>接下来要把客户端的公钥放在 Git 服务器上，我们再回到客户端，创建一个公钥。</p>
<p>在我们自己的电脑上，有公钥和私钥。两个文件分别是：<code>id_rsa</code> 和 <code>id_rsa.pub</code>。</p>
<p>如果是 Windows 系统公钥私钥的目录在 <code>C:\Users\用户名.ssh</code> 下。</p>
<p>如果是 Mac 或者 Linux， 公钥和私钥的目录这里 <code>cd ~/.ssh/</code>， 如果发现自己的电脑上没有公钥私钥，那就自己创建一个。</p>
<p>创建密钥的命令：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa
</code></pre></div><p>创建密钥的过程中，一路点击回车就可以了，不需要填任何东西。把刚刚生成的 <code>id_rsa.pub</code>，拷贝到 Git 服务器的 <code>/home/git/.ssh/</code> 目录。</p>
<p>在 Git 服务器上，将公钥添加到 <code>authorized_keys</code> 文件中：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /home/git/.ssh/
<span class="token function">cat</span> id_rsa.pub <span class="token operator">&gt;&gt;</span> authorized_keys
</code></pre></div><p>在客户直接登录 Git 服务器，验证是否配置成功：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ssh</span> git@git 服务器 <span class="token function">ip</span>
<span class="token comment"># 例如：</span>
<span class="token function">ssh</span> git@127.0.0.1
</code></pre></div><p>如果可以免密登录，那就说明服务器端密钥配置成功了。</p>
<p>在这里我还出现了一个错误：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED<span class="token operator">!</span>     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY<span class="token operator">!</span>
Someone could be eavesdropping on you right now <span class="token punctuation">(</span>man-in-the-middle attack<span class="token punctuation">)</span><span class="token operator">!</span>
It is also possible that a <span class="token function">host</span> key has just been changed.
The fingerprint <span class="token keyword">for</span> the RSA key sent by the remote <span class="token function">host</span> is
<span class="token number">51</span>:82:00:1c:7e:6f:ac:ac:de:f1:53:08:1c:7d:55:68.
Please contact your system administrator.
Add correct <span class="token function">host</span> key <span class="token keyword">in</span> /Users/isaacalves/.ssh/known_hosts to get rid of this message.
Offending RSA key <span class="token keyword">in</span> /Users/isaacalves/.ssh/known_hosts:12
RSA <span class="token function">host</span> key <span class="token keyword">for</span> <span class="token number">104.131</span>.16.158 has changed and you have requested strict checking.
Host key verification failed.
</code></pre></div><p>出现这个错误的原因是因为我更新了 <code>ssh key</code>，使用以下命令删除无效的 key 即可：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-R</span> <span class="token string">"服务器 ip"</span>
</code></pre></div><h2>服务器端部署 Git 仓库</h2>
<p>接下来在服务器上部署 git 仓库。</p>
<p>登录到 Git 服务器端，切换为 Git 账户。如果是 root 账户切换成 Git 账户：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">su</span> - <span class="token function">git</span>
</code></pre></div><p>如果是其他账户切换为 Git 账户：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">su</span> - <span class="token function">git</span>
</code></pre></div><p>进入 git 目录下：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/git
</code></pre></div><p>创建一个文件夹名为 <code>world.git</code>，<code>.git</code> 后缀表明这是一个 git 仓库而不是别的什么文件。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>git@localhost git<span class="token punctuation">]</span><span class="token comment"># mkdir world.git</span>
<span class="token punctuation">[</span>git@localhost git<span class="token punctuation">]</span><span class="token comment"># cd word.git</span>
</code></pre></div><p>初始化 word 仓库：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> init <span class="token parameter variable">--bare</span>
</code></pre></div><p>如果想创建多个仓库，就在 <strong>git</strong> 用户下的 <code>~/git</code> 目录创建多个文件夹并<strong>初始化</strong>就可以了。</p>
<p>现在服务端的 Git 仓库就部署完了，接下来就能像平时使用 github 一样使用这个 Git 私服了。</p>
<h2>客户端连接远程仓库</h2>
<p>在自己的电脑上创建一个文件夹也叫做 <code>world</code>。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>其实这里命名是随意的，但是我们为了和 Git 服务端的仓库名称保持同步。这样更直观我们操作的是哪一个仓库。</p>
</div>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> world
<span class="token builtin class-name">cd</span> world
</code></pre></div><p>进入 <code>world</code> 文件，并初始化操作：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> world
<span class="token function">git</span> init
</code></pre></div><p>在 <code>world</code> 目录上创建一个测试文件，并且将其添加到 Git 私服中：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">touch</span> <span class="token builtin class-name">test</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">test</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"test git server"</span>
</code></pre></div><p>将本地仓库和远端仓库同步：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin git@服务器 ip:world.git
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre></div><p>此时这个 <code>test</code> 测试文件就已经提交到我们的 Git 远端私服上了。</p>
<h2>参考链接</h2>
<ul>
<li><a href="https://mp.weixin.qq.com/s/8m5zK29sX0D9NM_YB8KDNQ" target="_blank" rel="noopener noreferrer">手把手来搭建 Git 私服！</a></li>
<li><a href="https://www.digitalocean.com/community/questions/warning-remote-host-identification-has-changed" target="_blank" rel="noopener noreferrer">WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED</a></li>
</ul>
]]></content>
    <category term="linux"/>
    <published>2021-05-12T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">配置宝塔面板</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/linux/practice/03-configure-bt.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/linux/practice/03-configure-bt.html"/>
    <updated>2024-12-03T06:25:23.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>服务器系统：centos 7.9。</p>
<p>其他系统可以参照 <a href="https://www.bt.cn/bbs/thread-19376-1-1.html" target="_blank" rel="noopener noreferrer">官网</a> 进行搭建。</p>
<p>为了方便一键配置部署环境，因此选择宝塔面板。</p>
</div>
<h2>安装宝塔面板</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> install.sh
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>服务器系统：centos 7.9。</p>
<p>其他系统可以参照 <a href="https://www.bt.cn/bbs/thread-19376-1-1.html" target="_blank" rel="noopener noreferrer">官网</a> 进行搭建。</p>
<p>为了方便一键配置部署环境，因此选择宝塔面板。</p>
</div>
<h2>安装宝塔面板</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> install.sh
</code></pre></div><p>大概过两分钟即可安装成功，复制外网面板地址到浏览器打开，输入下面的 <code>username</code> 和 <code>password</code>。进去之后会弹出 <code>推荐安装套件</code>，因为只要部署 <code>vuepress</code>， 因此这里安装 <code>nginx</code> 就好。选择编译安装，更加稳定。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-install-bt.png" alt="step1-install-bt" tabindex="0" loading="lazy"><figcaption>step1-install-bt</figcaption></figure>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step2-install-nginx.png" alt="step2-install-nginx" tabindex="0" loading="lazy"><figcaption>step2-install-nginx</figcaption></figure>
<p>如果之后忘记用户名和密码，可以通过以下命令查找：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@xxxx ~<span class="token punctuation">]</span><span class="token comment"># bt</span>
<span class="token punctuation">[</span>root@xxxx ~<span class="token punctuation">]</span><span class="token comment"># 14</span>
</code></pre></div><h2>参考链接</h2>
<ul>
<li><a href="https://www.bt.cn/bbs/thread-19376-1-1.html" target="_blank" rel="noopener noreferrer">宝塔 Linux 面板安装教程</a></li>
<li><a href="https://www.bilibili.com/video/BV12T4y1N7T9?from=search&amp;seid=2220018938681661072&amp;spm_id_from=333.337.0.0" target="_blank" rel="noopener noreferrer">阿里云服务器 ECS 新手搭建网站视频教程（详细版）</a></li>
</ul>
]]></content>
    <category term="linux"/>
    <published>2021-05-12T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">自动部署 Vuepress 到服务器</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/linux/practice/04-automated-deployment.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/linux/practice/04-automated-deployment.html"/>
    <updated>2024-12-03T06:25:23.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>服务器：centos 7.9</p>
<p>本地电脑：Windows 10</p>
</div>
<h2>服务器端</h2>
<h3>配置 nginx</h3>
<p>登录宝塔面板，可以参考 。点击左侧网站 -&gt; 添加站点。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-add-site.png" alt="step1-add-site" tabindex="0" loading="lazy"><figcaption>step1-add-site</figcaption></figure>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>服务器：centos 7.9</p>
<p>本地电脑：Windows 10</p>
</div>
<h2>服务器端</h2>
<h3>配置 nginx</h3>
<p>登录宝塔面板，可以参考 。点击左侧网站 -&gt; 添加站点。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step1-add-site.png" alt="step1-add-site" tabindex="0" loading="lazy"><figcaption>step1-add-site</figcaption></figure>
<p>新增之后，点击设置 -&gt; 配置文件。这三项按自己的情况配置，在后面  中会将 dist 文件推送到 <code>root</code> 配置项设置的文件夹下。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step2-nginx-conf.png" alt="step2-nginx-conf" tabindex="0" loading="lazy"><figcaption>step2-nginx-conf</figcaption></figure>
<p>先测试下 nginx 有没有配置成功，本地打包文件：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> build
</code></pre></div><p>然后将生成的 <code>dist</code> 文件里的内容复制到刚才设置的项目根目录下。</p>
<p>接着输入 <code>http://xxx.xxx.xxx.xxx:端口号</code>，就能访问成功了。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>地址得用 http 协议，因为我们还没有配置 ssl 证书。</p>
</div>
<h3>配置 git 仓库</h3>
<p>在  中已经搭建好了 git 私服，因此只需要初始化 <code>vuepress.git</code> 仓库即可。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /home/git
<span class="token function">mkdir</span> vuepress.git
<span class="token builtin class-name">cd</span> vuepress.git
<span class="token function">git</span> init <span class="token parameter variable">--bare</span> vuepress.git
</code></pre></div><h3>配置 hooks</h3>
<p>先切换到 root 用户（<code>ctrl + d</code>），在 home 文件夹下创建一个临时存放 dist 文件夹的地方。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>我这里选择存放到 home 文件夹下，但是 git 用户是没有权限的，因此切换到 root 用户，也可以存放到其他文件夹。</p>
</div>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /home
<span class="token function">mkdir</span> tmp
<span class="token builtin class-name">cd</span> tmp
<span class="token function">mkdir</span> vuepress
</code></pre></div><p>接着将文件的所有权换成 git：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chown</span> git:git <span class="token parameter variable">-R</span> vuepress
</code></pre></div><p>然后，有一个关键的地方，要将 <code>/www/wwwroot</code> 的所有权换成 git：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chown</span> git:git /www/wwwroot
</code></pre></div><p>做好这些准备之后，就可以开始配置 <code>hooks</code> 了。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /home/git/vuepress.git/hooks
<span class="token comment"># 通过 copy 新建 post-update 文件</span>
<span class="token function">cp</span> post-update.sample post-update
<span class="token function">vim</span> post-update
</code></pre></div><p>接着将下面代码复制进去：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">"auto deploy start ==================================="</span>
<span class="token builtin class-name">unset</span> GIT_DIR

<span class="token comment"># 项目文件夹</span>
<span class="token assign-left variable">PUBLIC_WWW</span><span class="token operator">=</span>/www/wwwroot/vuepress
<span class="token comment"># git 仓库文件夹</span>
<span class="token assign-left variable">GIT_REPO</span><span class="token operator">=</span>/home/git/vuepress.git
<span class="token comment"># 临时文件夹</span>
<span class="token assign-left variable">TMP_GIT_CLONE</span><span class="token operator">=</span>/home/tmp/vuepress

<span class="token comment"># 移除临时文件夹</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable">${TMP_GIT_CLONE}</span>
<span class="token comment"># 克隆 git 仓库到临时文件夹</span>
<span class="token function">git</span> clone <span class="token variable">$GIT_REPO</span> <span class="token variable">$TMP_GIT_CLONE</span>
<span class="token comment"># 移除项目文件夹</span>
<span class="token comment"># 宝塔为了安全，为自动在项目文件夹下新增 .user.ini 文件</span>
<span class="token comment"># 需要先关闭这个文件的功能才能删除项目文件夹</span>
<span class="token builtin class-name">cd</span> <span class="token variable">${PUBLIC_WWW}</span>
chattr <span class="token parameter variable">-i</span> .user.ini
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable">${PUBLIC_WWW}</span>
<span class="token comment"># 将临时文件夹复制到项目文件夹</span>
<span class="token function">cp</span> <span class="token parameter variable">-rf</span> <span class="token variable">${TMP_GIT_CLONE}</span> <span class="token variable">${PUBLIC_WWW}</span>

<span class="token builtin class-name">echo</span> <span class="token string">"auto deploy end ===================================="</span>
</code></pre></div><p>现在服务器端的准备工作已经完成了，接下来看看本地电脑的配置。</p>
<h2>本地电脑</h2>
<p>在本地项目根目录下新建 <code>deploy.sh</code> 脚本文件，内容如下：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>

<span class="token comment"># 确保脚本抛出遇到的错误</span>
<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>

<span class="token comment"># 生成静态文件</span>
<span class="token function">yarn</span> build

<span class="token comment"># 进入生成的文件夹</span>
<span class="token builtin class-name">cd</span> docs/.vuepress/dist

<span class="token comment"># 初始化 git 仓库，并提交修改</span>
<span class="token function">git</span> init
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">'deploy'</span>

<span class="token comment"># 发布到 git 私服， -f 强制覆盖</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin git@119.23.65.118:/home/git/vuepress.git
<span class="token function">git</span> push <span class="token parameter variable">-f</span> git@119.23.65.118:/home/git/vuepress.git master

<span class="token builtin class-name">cd</span> -
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>了解更多 git 命令，可以查询<a href="https://git-scm.com/docs" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
</div>
<h2>测试</h2>
<p>vscode 终端中输入 <code>sh depoly.sh</code>，报错：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sh</span> <span class="token builtin class-name">:</span> 无法将“sh”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。
请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。
</code></pre></div><p>了解到 windows 上可以使用 git bash 执行 shell 脚本，但我可不想每次执行的时候都打开 git bash，当然得找如何在 vscode 中执行 shell 脚本的办法。</p>
<ol>
<li>首先得在 vscode 中安装 code runner，之前一直用它来调试力扣上的题，已经安装过了。</li>
<li>安装 git bash，这个不用说，安装 git 的时候就已经有了</li>
<li>配置 bash 环境，找到 bash.exe 的安装目录，将它的位置添加到系统的环境变量中。</li>
<li>配置 code runner：文件 -&gt; 首选项 -&gt; 设置 -&gt; 搜索 code runner</li>
<li>打开终端，输入 <code>bash</code> 切换到 bash 环境，点击右上角的三角形即可运行。</li>
</ol>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step3-code-runner.png" alt="step3-code-runner" tabindex="0" loading="lazy"><figcaption>step3-code-runner</figcaption></figure>
<p>现在随便更新点内容，并执行 <code>deploy.sh</code> 脚本：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/step4-complete.png" alt="step4-complete" tabindex="0" loading="lazy"><figcaption>step4-complete</figcaption></figure>
<p>再次访问 <code>http://xxx.xxx.xxx.xxx:端口号</code> 发现已经更新了。</p>
<h2>参考链接</h2>
<ul>
<li><a href="http://chanwingwah.info/article/604eb2273c8ec67668f6fd41" target="_blank" rel="noopener noreferrer">只需三步， 部署 Vuepress 并实现本地一行命令更新部署到服务器</a></li>
<li><a href="https://www.imqianduan.com/git-svn/335.html" target="_blank" rel="noopener noreferrer">使用 git hooks(post-receive)实现简单的远程自动部署</a></li>
<li><a href="https://hjxlog.com/posts/20191130a1.html#7-%E9%85%8D%E7%BD%AENginx" target="_blank" rel="noopener noreferrer">将 Hexo 部署到阿里云轻量服务器（保姆级教程）</a></li>
<li><a href="https://www.cnblogs.com/yongdaimi/p/15247771.html" target="_blank" rel="noopener noreferrer">VSCode: Windows 下配置 VSCode 运行 shell</a></li>
</ul>
]]></content>
    <category term="linux"/>
    <published>2021-05-12T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">centos 安装 docker</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/linux/practice/05-install-docker.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/linux/practice/05-install-docker.html"/>
    <updated>2024-12-03T06:25:23.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>需要保证 centos 版本：</p>
<ul>
<li>centos 7</li>
<li>centos 8</li>
<li>centos 9</li>
</ul>
</div>
<h2>卸载旧版本</h2>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>必须先完成这一步，否则会出现不可预见的错误。</p>
</div>
<p>运行下列命令：</p>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>需要保证 centos 版本：</p>
<ul>
<li>centos 7</li>
<li>centos 8</li>
<li>centos 9</li>
</ul>
</div>
<h2>卸载旧版本</h2>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>必须先完成这一步，否则会出现不可预见的错误。</p>
</div>
<p>运行下列命令：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>
                  docker-client <span class="token punctuation">\</span>
                  docker-client-latest <span class="token punctuation">\</span>
                  docker-common <span class="token punctuation">\</span>
                  docker-latest <span class="token punctuation">\</span>
                  docker-latest-logrotate <span class="token punctuation">\</span>
                  docker-logrotate <span class="token punctuation">\</span>
                  docker-engine
</code></pre></div><p>出现成功提示后即可。</p>
<h2>使用 rpm repository 安装</h2>
<h3>设置镜像</h3>
<p>安装 <code>yum-utils</code> 软件包（提供 <code>yum-config-manager</code> 实用工具）并设置软件源。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
<span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
</code></pre></div><h3>安装 docker engin</h3>
<ol>
<li>安装最新版：</li>
</ol>

<ol start="2">
<li>启动 docker</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
</code></pre></div><ol start="3">
<li>运行 <code>hello-world</code> 映像，验证 Docker Engine 安装是否成功。</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> run hello-world
</code></pre></div><p>这条命令会下载一个测试镜像，并在一个容器中运行。当容器运行时，它会打印一条确认信息并退出。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>可以不去执行，只要安装过程不报错就表明成功。</p>
</div>
]]></content>
    <category term="linux"/>
    <published>2024-01-12T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">美化 Windows 终端</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/operating-system/02-windows-terminal-beauty.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/operating-system/02-windows-terminal-beauty.html"/>
    <updated>2025-01-11T10:21:01.000Z</updated>
    <summary type="html"><![CDATA[<p>在 Windows 上的开发体验，特别是在终端方面，相较于 macOS，常常让人觉得差了一点「味道」。macOS 上的 iTerm2 配合 oh-my-zsh，颜值高、功能强大，让开发者得以拥有流畅且美观的工作体验。而 Windows 默认的命令提示符（cmd）和 PowerShell，外观简单，功能也不够灵活。</p>
<p>幸运的是，随着 <a href="https://github.com/microsoft/terminal" target="_blank" rel="noopener noreferrer">Windows Terminal</a> 的推出，我们终于可以在 Windows 上获得更现代的终端体验。Windows Terminal 拥有标签页支持、强大的配色和字体自定义功能，通过集成 <a href="https://github.com/JanDeDobbeleer/oh-my-posh" target="_blank" rel="noopener noreferrer">oh-my-posh</a> 进行美化、安装支持丰富符号的字体、以及配置一些常用的开发工具，我们可以让 Windows 终端焕然一新，达到高颜值和高效兼具的效果。</p>]]></summary>
    <content type="html"><![CDATA[<p>在 Windows 上的开发体验，特别是在终端方面，相较于 macOS，常常让人觉得差了一点「味道」。macOS 上的 iTerm2 配合 oh-my-zsh，颜值高、功能强大，让开发者得以拥有流畅且美观的工作体验。而 Windows 默认的命令提示符（cmd）和 PowerShell，外观简单，功能也不够灵活。</p>
<p>幸运的是，随着 <a href="https://github.com/microsoft/terminal" target="_blank" rel="noopener noreferrer">Windows Terminal</a> 的推出，我们终于可以在 Windows 上获得更现代的终端体验。Windows Terminal 拥有标签页支持、强大的配色和字体自定义功能，通过集成 <a href="https://github.com/JanDeDobbeleer/oh-my-posh" target="_blank" rel="noopener noreferrer">oh-my-posh</a> 进行美化、安装支持丰富符号的字体、以及配置一些常用的开发工具，我们可以让 Windows 终端焕然一新，达到高颜值和高效兼具的效果。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20250111181530.png" alt="最终效果" tabindex="0" loading="lazy"><figcaption>最终效果</figcaption></figure>
<p>接下来，让我们一步步将 Windows 终端打造成一个高效、好看且符合开发者习惯的环境，为平时的开发工作增添一份愉悦和舒适。</p>
<h2>安装 Windows Terminal</h2>
<p>Windows Terminal 是微软官方推出的现代终端工具，支持多标签页、GPU 加速、Unicode 和 Emoji 显示等特性，推荐直接在 <a href="https://apps.microsoft.com/detail/9n0dx20hk701?rtc=1&amp;hl=zh-cn&amp;gl=CN" target="_blank" rel="noopener noreferrer">微软商店</a> 直接安装 Windows Terminal。</p>
<p>然后设置一下透明度，这里我选择的是 80%，并打开亚克力效果，这会让终端跟随底色增加透明模糊效果。</p>
<h2>升级 PowerShell 7.x</h2>
<p>Windows 10 或 Windows 11 默认的 PowerShell 版本较低，无法使用更多新特性，推荐升级到 PowerShell 7.x，PowerShell 7.x 是跨平台的，并且修复了很多 PowerShell 5.1 中的兼容性问题。</p>
<p>安装方式：</p>
<ul>
<li>访问 <a href="https://github.com/PowerShell/PowerShell/releases" target="_blank" rel="noopener noreferrer">PowerShell GitHub Release 页面</a> 下载适合你系统的版本。</li>
<li>或者，可以直接通过 Windows 包管理器 安装（需要 Windows 10 1809 或更高版本）：<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>winget install <span class="token operator">--</span>id Microsoft<span class="token punctuation">.</span>Powershell <span class="token operator">--</span>source winget
</code></pre></div></li>
<li>如果你使用 Chocolatey 包管理器，也可以通过以下命令安装：<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>choco install powershell-core
</code></pre></div></li>
</ul>
<p>安装完后，重新启动 Windows Terminal 以使用 PowerShell 7。</p>
<h2>安装 oh-my-posh</h2>
<p><a href="https://ohmyposh.dev/docs/installation/windows" target="_blank" rel="noopener noreferrer">安装 oh-my-posh</a> 可以使用如下命令：</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>winget install JanDeDobbeleer<span class="token punctuation">.</span>OhMyPosh <span class="token operator">-</span>s winget
</code></pre></div><p>这会安装 <code>oh-my-posh.exe</code> 和 oh-my-posh 的所有最新 <a href="https://ohmyposh.dev/docs/themes" target="_blank" rel="noopener noreferrer">主题</a>。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>为了重新加载 PATH，建议重新启动终端。如果 oh-my-posh 未被识别为命令，可以重新运行安装程序，或手动将其添加到 PATH。 例如：</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token variable">$env</span>:PATH <span class="token operator">+=</span> <span class="token string">";C:\Users\&lt;username&gt;\AppData\Local\Programs\oh-my-posh\bin"</span>
</code></pre></div></div>
<p>为了在打开终端后自动加载 oh-my-posh，需要在 PowerShell 配置文件 <code>$PROFILE</code> 中添加以下内容：</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>oh-my-posh init pwsh <span class="token operator">--</span>config <span class="token string">"<span class="token variable">$env</span>:POSH_THEMES_PATH\jandedobbeleer.omp.json"</span> <span class="token punctuation">|</span> <span class="token function">Invoke-Expression</span>
</code></pre></div><p><code>--config</code> 参数指定主题配置文件路径，<code>$env:POSH_THEMES_PATH</code> 是 oh-my-posh 主题文件夹路径，可以通过 <code>Get-PoshThemes</code> 查看所有主题。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>$PROFILE</code> 文件类似 <code>~/.zshrc</code> 或 <code>~/.bashrc</code>，以下命令会使用系统默认的文本编辑器打开：</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>notepad <span class="token variable">$PROFILE</span>
</code></pre></div><p>编辑完成后，可以使用 <code>. $PROFILE</code> 重新加载配置。</p>
</div>
<h3>设置字体</h3>
<p>oh-my-posh 使用 <a href="https://www.nerdfonts.com/" target="_blank" rel="noopener noreferrer">Nerd Fonts</a> 做为设计字体，官方推荐安装 <a href="https://www.nerdfonts.com/font-downloads" target="_blank" rel="noopener noreferrer">Meslo Nerd Font</a>。这里我选择了 <a href="https://www.nerdfonts.com/font-downloads" target="_blank" rel="noopener noreferrer">BitstromWera Nerd Font</a>。</p>
<p>可以在 <a href="https://www.nerdfonts.com/font-downloads" target="_blank" rel="noopener noreferrer">Nerd Fonts</a> 页面下载和预览字体。也可以通过 oh-my-posh 提供的 CLI 安装：</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>oh-my-posh font install
</code></pre></div><p>安装完成后，需要在 Windows Terminal 中设置字体，按 <code>CTRL + SHIFT + ,</code> 打开配置文件，在 <code>defaults</code> 属性下添加：</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"profiles"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"defaults"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"font"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"face"</span><span class="token operator">:</span> <span class="token string">"MesloLGM Nerd Font"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果使用了 VSCode，可以在 <code>settings.json</code> 中添加：</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">"terminal.integrated.fontFamily"</span><span class="token operator">:</span> <span class="token string">"Bitstream Vera Sans Mono Nerd Font"</span>
</code></pre></div><h2>环境配置</h2>
<h3>Chocolatey</h3>
<p><a href="https://chocolatey.org/" target="_blank" rel="noopener noreferrer">Chocolatey</a> 是一个 Windows 下的包管理器，可以方便地安装和管理软件。</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Set-ExecutionPolicy</span> Bypass <span class="token operator">-</span>Scope <span class="token keyword">Process</span> <span class="token operator">-</span>Force<span class="token punctuation">;</span> <span class="token namespace">[System.Net.ServicePointManager]</span>::SecurityProtocol = <span class="token namespace">[System.Net.SecurityProtocolType]</span>::Tls12<span class="token punctuation">;</span> <span class="token function">iex</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">New-Object</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>WebClient<span class="token punctuation">)</span><span class="token punctuation">.</span>DownloadString<span class="token punctuation">(</span><span class="token string">'https://community.chocolatey.org/install.ps1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h3>vim</h3>
<p>PowerShell 默认不支持 vim，需要安装 <a href="https://github.com/vim/vim" target="_blank" rel="noopener noreferrer">vim</a> 或 <a href="https://github.com/neovim/neovim" target="_blank" rel="noopener noreferrer">neovim</a>。</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>choco install vim
</code></pre></div><p>安装完成后即可使用 <code>vim</code> 命令，再也不用使用 <code>notepad</code> 打开文件了。</p>
<h3>zoxide</h3>
<p><a href="https://github.com/ajeetdsouza/zoxide" target="_blank" rel="noopener noreferrer">zoxide</a> 是一个跨平台的命令行工具，可以快速跳转到指定目录。</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>choco install zoxide
</code></pre></div><p>安装完成后，配置 zoxide 到 PowerShell 中：</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>notepad <span class="token variable">$PROFILE</span>
</code></pre></div><p>在文件末尾添加：</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-Expression</span> <span class="token punctuation">(</span>&amp; <span class="token punctuation">{</span> <span class="token punctuation">(</span>zoxide init powershell <span class="token punctuation">|</span> <span class="token function">Out-String</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>重新加载 PowerShell 配置文件：</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token punctuation">.</span> <span class="token variable">$PROFILE</span>
</code></pre></div><h3>git</h3>
<p>使用 Chocolatey 安装 git：</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>choco install git
</code></pre></div><p>安装完成后，配置 git 用户信息：</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"Your Name"</span>
git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"your.email@example.com"</span>
</code></pre></div><h3>ssh</h3>
<p>PowerShell 默认自带 ssh 客户端，可以直接使用。</p>
<p>生成 ssh key：</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>ssh-keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"your_email@example.com"</span>
</code></pre></div><p>将生成的 ssh key 添加到 GitHub，在 <code>Settings</code> -&gt; <code>SSH and GPG keys</code> 页面添加。</p>
<p>然后使用 <code>ssh -T git@github.com</code> 测试连接。</p>
<p>如果出现以下报错，可以更改 ssh 客户端配置。</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>ssh: connect to host github<span class="token punctuation">.</span>com port 22: Connection refused
</code></pre></div><p>在 <code>C:\Users\&lt;username&gt;\.ssh\config</code> 文件（没有则创建）中添加以下内容：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Host github.com
  HostName ssh.github.com
  Port 443
</code></pre></div><p>这时再使用 <code>ssh -T git@github.com</code> 测试连接，应该就可以正常连接了。</p>
<div class="language-powershell" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>ssh <span class="token operator">-</span>T git@github<span class="token punctuation">.</span>com
</code></pre></div><h3>node</h3>
<p>推荐使用  安装 node。</p>
]]></content>
    <category term="操作系统"/>
    <published>2024-11-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">字符编码</title>
    <id>https://dribble-njr.github.io/blog/blog/computer-science/operating-system/01-character-encoding.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/computer-science/operating-system/01-character-encoding.html"/>
    <updated>2024-11-07T02:47:43.000Z</updated>
    <summary type="html"><![CDATA[<p>在计算机中，所有数据都是以二进制数的形式存储的，字符也不例外。为了表示字符，我们需要建立一套「字符集」，规定每个字符和二进制数之间的一一对应关系。有了字符集之后，计算机就可以通过查表完成二进制数到字符的转换。</p>
<p>Joel Spolsky</p>
<p>The Absolute<br>
Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and<br>
Character Sets (No Excuses!)</p>
<p>Mathias Bynens</p>
<p>JavaScript’s Internal Character Encoding:<br>
UCS-2 or UTF-16?</p>]]></summary>
    <content type="html"><![CDATA[<p>在计算机中，所有数据都是以二进制数的形式存储的，字符也不例外。为了表示字符，我们需要建立一套「字符集」，规定每个字符和二进制数之间的一一对应关系。有了字符集之后，计算机就可以通过查表完成二进制数到字符的转换。</p>
<p>Joel Spolsky</p>
<p>The Absolute<br>
Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and<br>
Character Sets (No Excuses!)</p>
<p>Mathias Bynens</p>
<p>JavaScript’s Internal Character Encoding:<br>
UCS-2 or UTF-16?</p>
]]></content>
    <category term="operating-system"/>
    <published>2024-01-24T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">模块化</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/01-modularization.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/01-modularization.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>早期 JavaScript 仅仅作为一个脚本语言，所需的代码通常不会很大。然而随着前端和 JavaScript 的发展，逐渐暴露出两个问题：</p>
<ul>
<li>全局污染：不同文件中的函数会相互污染；</li>
<li>依赖混乱：各文件中的函数依赖非常混乱。</li>
</ul>
<p>模块化就是为了解决上述问题，最终目的是为了将程序拆分为可按需导入的单独模块。在模块中编写属于自己的逻辑代码，拥有自己的作用域，能够导出希望暴露的变量、函数、对象等，并能通过某种方式，导入其他模块中的变量、函数或对象等。</p>
<p>JavaScript 本身直到 ES2015 才推出了自己的模块化方案 —— ES Module。在此之前，为了让 JavaScript 支持模块化，社区中涌现了不同的模块化规范：AMD、CMD、CommonJS 等。</p>]]></summary>
    <content type="html"><![CDATA[<p>早期 JavaScript 仅仅作为一个脚本语言，所需的代码通常不会很大。然而随着前端和 JavaScript 的发展，逐渐暴露出两个问题：</p>
<ul>
<li>全局污染：不同文件中的函数会相互污染；</li>
<li>依赖混乱：各文件中的函数依赖非常混乱。</li>
</ul>
<p>模块化就是为了解决上述问题，最终目的是为了将程序拆分为可按需导入的单独模块。在模块中编写属于自己的逻辑代码，拥有自己的作用域，能够导出希望暴露的变量、函数、对象等，并能通过某种方式，导入其他模块中的变量、函数或对象等。</p>
<p>JavaScript 本身直到 ES2015 才推出了自己的模块化方案 —— ES Module。在此之前，为了让 JavaScript 支持模块化，社区中涌现了不同的模块化规范：AMD、CMD、CommonJS 等。</p>
<h2>早期模块化方案</h2>
<h3>Window</h3>
<p>在最开始的前端时期，JavaScript 文件之间的通信通常会依靠 window 对象。</p>
<p><strong>utils.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">format</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong>time.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> curTime <span class="token operator">=</span> <span class="token string">'2022-08-10 15:05'</span>
<span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">curTime</span><span class="token operator">:</span> curTime
<span class="token punctuation">}</span>
</code></pre></div><p><strong>index.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>time<span class="token punctuation">.</span>curTime<span class="token punctuation">)</span> <span class="token comment">// '2022-08-10 15:05'</span>
</code></pre></div><p><strong>index.html</strong></p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 必须保证顺序正确 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./time.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./utils.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>然而这会带来命名冲突的问题，并且声明的全局变量会占用内存无法回收，代码可读性差。因此出现了立即调用表达式（IIFE）。</p>
<h2>IIFE</h2>
<p>使用立即调用表达式（Immediately Invoked Function Expression, IIFE）改造上述代码：</p>
<p><strong>utils.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> moduleUtils <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    format
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>time.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> moduleTime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> curTime <span class="token operator">=</span> <span class="token string">'2022-08-10 15:05'</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    curTime
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>index.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>moduleUtils<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>moduleTime<span class="token punctuation">.</span>curTime<span class="token punctuation">)</span>
</code></pre></div><p>现在因为函数具有作用域，就可以解决命名冲突的问题，然而这再次带来了新的问题：</p>
<ul>
<li>代码混乱不堪，每个文件的代码都需要包裹在一个立即调用函数表达式中编写；</li>
<li>在没有合适的规范的情况下，每个公司或个人都会出现任意命名导致模块名称相同的情况。</li>
</ul>
<p>因此需要用规范编写模块化代码，这个规范需要包括两个核心功能：<strong>模块本身可以导出暴露的属性，又可以导入需要的属性。</strong></p>
<h2>CommonJS</h2>
<p>CommonJS 是一个 JavaScript 规范，最初提出来是在浏览器以外的地方使用，并且当时被命名为 ServerJS，后来为了体现它的广泛性，修改为 CommonJS，平时我们也会简称为 CJS。</p>
<p>NodeJS 对 CommonJS 进行了支持和实现：</p>
<ul>
<li>在 Node 中每个 js 文件都是一个单独的模块；</li>
<li>这个模块包括 CommonJS 规范的核心变量：<code>exports</code> <code>module.exports</code> <code>require</code>。</li>
</ul>
<p>下面在 node 环境中执行以下代码。</p>
<p><strong>utils.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  format
<span class="token punctuation">}</span>
</code></pre></div><p><strong>time.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> curTime <span class="token operator">=</span> <span class="token string">'2022-08-10 15:05'</span>

exports<span class="token punctuation">.</span>curTime <span class="token operator">=</span> curTime
</code></pre></div><p><strong>index.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> curTime <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./time.js'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> format <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span>

<span class="token function">format</span><span class="token punctuation">(</span>curTime<span class="token punctuation">)</span> <span class="token comment">// "2022-08-10 15:05"</span>
</code></pre></div><h3><code>exports</code> 和 <code>module.exports</code></h3>
<p>可以看到，node 中实用 <code>exports</code> 和 <code>module.exports</code> 实现模块导出，使用 <code>require()</code> 实现模块导入。</p>
<p>那么为什么要有两个导出方式？</p>
<p>因为 CommonJS 规范中只定义了 <code>exports</code>，但是它存在一些问题，因此 node 使用 <code>module.exports = exports</code> 间接代替了 <code>exports</code>，他们两个指向同一个内存地址的对象。<code>require()</code> 会返回 <code>module.exports</code> 指向的对象。</p>
<p>可以在 index.js 中打印 <code>module</code> 对象：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>Module <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'.'</span><span class="token punctuation">,</span>                    <span class="token comment">// 模块 id</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/* ... */'</span><span class="token punctuation">,</span>          <span class="token comment">// 文件路径</span>
  <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">// 模块导出对象</span>
  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'/* ... */'</span><span class="token punctuation">,</span>      <span class="token comment">// 文件名</span>
  <span class="token literal-property property">loaded</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>              <span class="token comment">// 模块是否加载完成</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    Module <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 模块 utils</span>
    Module <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 模块 time</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">/* ... */</span> <span class="token punctuation">]</span>        <span class="token comment">// 搜索路径</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>require</h3>
<p><code>require()</code> 引入模块需要经历三个步骤：</p>
<ol>
<li>路径分析</li>
<li>文件定位</li>
<li>编译执行</li>
</ol>
<h4>核心模块和文件模块</h4>
<p>而在 Node 中，模块分为核心模块和文件模块：</p>
<ul>
<li>核心模块：在 Node 源代码的编译过程中，编译成了二进制执行文件。在 Node 进程启动时，核心模块就直接加载进了内存中，因此核心模块引入时，不需要进行文件定位和编译执行，并且在路径分析时会优先判断，因此它的加载速度是最快的。</li>
<li>文件模块：在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程，速度比核心模块慢。</li>
</ul>
<h4>优先从缓存中加载</h4>
<p>Node 会对引入过的模块进行缓存，以减少二次引入时的开销，对任何模块都会采取缓存优先的策略，<strong>缓存是第一优先级</strong>。</p>
<p>从缓存加载的优化策略使得二次引入时不需要路径分析、文件定位和编译执行的过程，提高了加载模块的效率。</p>
<h4>路径分析</h4>
<p>在判断缓存后，需要对模块进行路径分析和文件定位，<code>require(X)</code> 接收一个<strong>模块标识符</strong>，不同标识符有不同查找规则。</p>
<p><strong>情况一：X 是一个核心模块，如 path、http</strong></p>
<p><strong>核心模块</strong>会直接返回模块，并且停止查找。</p>
<p>试图加载一个与核心模块标识符相同的自定义模块是不会成功的，如果自己编写了一个 <code>http</code> 用户模块，想要加载成功，则必须选择一个不同的标识符或者换用路径方式。</p>
<p><strong>情况二：X 以 ./ 或 ../ 或 / （路径形式）开头</strong></p>
<p>以路径开始的标识符，会被当成<strong>文件模块</strong>，在分析路径时，<code>require(X)</code> 方法会将路径转换为真实路径，并以真实路径作为索引，将编译执行的过程中放到缓存中。由于文件模块给 Node 指明了确切的文件位置，因此在查找过程中可以节约大量时间，<strong>文件模块的加载速度慢于核心模块</strong>。</p>
<p><strong>情况三：直接是一个 X（没有路径），并且 X 不是一个核心模块</strong></p>
<p>这种情况下，X 是一个<strong>自定义模块</strong>，那么 Node 会从<strong>模块路径</strong> <code>moudle.paths</code> 中查找。</p>
<blockquote>
<p>模块路径：Node 在定位文件模块的具体文件时指定的查找策略，为多个路径组成的数组。</p>
</blockquote>
<p>在 Linux 下，打印这个可能输出：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span>
  <span class="token string">'/home/jackson/research/node_modules'</span><span class="token punctuation">,</span>
  <span class="token string">'/home/jackson/node_modules'</span><span class="token punctuation">,</span>
  <span class="token string">'/home/node_modules'</span><span class="token punctuation">,</span>
  <span class="token string">'/node_modules'</span>
<span class="token punctuation">]</span>
</code></pre></div><p>Windows 下，可能会输出：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">'c:\\nodejs\\node_modules'</span><span class="token punctuation">,</span> <span class="token string">'c:\\node_modules'</span><span class="token punctuation">]</span>
</code></pre></div><p>模块路径的生成规则如下：</p>
<ul>
<li>当前文件目录下的 <code>node_modules</code> 目录</li>
<li>父目录下的 <code>node_modules</code> 目录</li>
<li>父目录的父目录下的 <code>node_modules</code> 目录</li>
<li>沿路径向上逐级递归，直到根目录下的 <code>node_modules</code> 目录</li>
</ul>
<p>在加载过程中，Node 会逐个尝试模块路径中的路径，直到找到目标模块，因此速度在三个情况中最慢。</p>
<h4>文件定位</h4>
<p>文件定位主要包括文件扩展名分析、目录和包的处理。</p>
<p><strong>文件扩展名分析</strong></p>
<p><code>require(X)</code> 在分析标识符的过程中，会出现标识符不包含文件扩展名的情况。</p>
<ol>
<li>如果有文件扩展名，按照后缀名的格式查找对应的文件</li>
<li>如果没有文件扩展名，会按照如下顺序尝试：</li>
</ol>
<ul>
<li>直接查找文件 X</li>
<li>查找 <code>X.js</code> 文件</li>
<li>查找 <code>X.json</code> 文件</li>
<li>查找 <code>X.node</code> 文件</li>
</ul>
<p>在尝试的过程中，需要调用 <code>fs</code> 模块同步阻塞式地判断文件是否存在，所以会引起性能问题，因此，最好带上文件扩展名，会加快模块加载速度。</p>
<p><strong>目录分析和包</strong></p>
<p>在分析标识符的过程中，通过分析文件扩展名可能并没有得到对应文件，但却得到一个目录，此时 Node 会将目录当作一个包来处理。</p>
<ol>
<li>首先在当前目录下查找 <code>package.json</code> 文件，通过 <code>JSON.parse()</code> 解析出包描述对象，从中取出 <code>main</code> 属性指定的文件名进行定位，如果文件名缺少扩展名，则会进行文件扩展名分析</li>
<li>如果 <code>main</code> 属性指定的文件名错误，或者没有 <code>package.json</code> 文件，那么会一次查找目录下面的 <code>index</code> 文件</li>
</ol>
<ul>
<li>查找 <code>X/index.js</code> 文件</li>
<li>查找 <code>X/index.json</code> 文件</li>
<li>查找 <code>X/index.node</code> 文件</li>
</ul>
<ol start="3">
<li>如果目录分析的过程中没有成功定位，则自定义模块进入下一个模块路径中进行搜索；如果所有路径都遍历完毕，仍然没有找到目标文件，那么报错：<code>not found</code></li>
</ol>
<h3>模块编译</h3>
<p>Node 中对于模块的定义如下：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Module</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id
  <span class="token keyword">this</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent
  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>filename <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>当定位到目标文件时，Node 会新建一个模块对象，然后根据路径载入并编译，对于不同的文件扩展名，它的载入方法也不同：</p>
<ul>
<li><code>.js</code> 文件：通过 <code>fs</code> 模块同步读取文件后编译执行；</li>
<li><code>.node</code> 文件：这是用 <code>C/C++</code> 编写的扩展文件，通过 <code>dlopen()</code> 方法加载最后编译生成的文件；</li>
<li><code>.json</code> 文件：通过 <code>fs</code> 模块同步读取文件后，用 <code>JSON.parse()</code> 解析返回结果；</li>
<li>其余扩展名文件：都被当作 <code>.js</code> 文件载入。</li>
</ul>
<p>模块在第一次被引入时，模块中的代码会被执行一次；模块被多次引入，会缓存（<code>module.loaded</code> 设置为 <code>true</code>），最终只运行一次；如果有循环引入，会采用深度优先搜索加载模块。</p>
<p>每一个编译成功的模块都会讲其文件路径作为索引缓存在 <code>Module._cache</code> 对象上，以提高二次引入的性能。</p>
<h3>其他</h3>
<p>每个模块都存在 <code>require</code>、<code>exports</code>、<code>module</code> 等其它变量，这些变量从何而来？这是因为 Node 对获取的 JavaScript 文件内容进行了头尾包装。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> Math <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'math'</span><span class="token punctuation">)</span>
  exports<span class="token punctuation">.</span><span class="token function-variable function">area</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">raduis</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>这样每个模块文件都用函数进行了作用域隔离，包装之后的代码会通过 <code>vm</code> 原生模块的 <code>runInThisContext()</code> 方法执行（类似 <code>eval</code>，只是有明确作用域，不会污染全局），返回一个具体的 <code>function</code> 对象。最后,将当前模块的 <code>exports</code> 属性、<code>require()</code> 方法、<code>module</code> 以及在文件定位中得到的完整文件路径和文件目录作为参数传递给这个 <code>function</code> 执行。</p>
<p>那么为什么存在 <code>exports</code> 的情况下，还存在 <code>module.exports</code>？</p>
<p>先来看看包装之后的文件：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><p><code>exports</code> 是通过形参的方式传入，<strong>直接赋值形参会改变形参的引用</strong>，但并不能改变作用域外的值，因此在使用 <code>exports</code> 的时候不推荐直接赋值一个对象，而是通过赋值属性的方式导出变量。而如果想要达到 <code>require</code> 直接引入一个类的效果，应该赋值给 <code>module.exports</code> 对象，这种方案不会改变形参的引用。</p>
<h3>缺点</h3>
<p>CommonJS 加载模块是同步的：同步意味着只有等到对应的模块加载完毕，当前模块中的内容才能被运行。</p>
<p>这也是通常用作服务器模块化规范的原因，因为服务器加载的 js 文件都是本地文件，加载速度非常快。</p>
<p>如果将它应用于浏览器呢？浏览器加载 js 文件需要先从服务器将文件下载下来，之后在加载运行，会阻塞后续代码的执行。</p>
<p>所以早期在浏览器中，我们通常不使用 CommonJS 规范，而通常会采用 AMD 或 CMD 规范。</p>
<h2>AMD/CMD</h2>
<p>AMD 和 CMD 是用于浏览器端的模块化规范。</p>
<p>但是目前一方面现代的浏览器已经支持 ES Modules，另一方面借助于 webpack 等工具可以实现对 CommonJS 或者 ES Module 代码的转换。AMD 和 CMD 已经使用非常少了，所以这里我们进行简单的演练。</p>
<h3>AMD</h3>
<p>异步模块定义（Asynchronous Module Definition，AMD）采用异步加载模块，因此可以在浏览器中使用。比较常用的库是 <code>require.js</code>。</p>
<blockquote>
<p>先有 RequireJS，后有 AMD 规范，随着 RequireJS 的推广和普及，AMD 规范才被创建出来。</p>
</blockquote>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>AMD
├── index.html
├── index.js
├── lib
│   └── require.js
└── modules
    ├── time.js
    └── .js
</code></pre></div><p><strong>index.html</strong></p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 注意 data-main --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./lib/require.js<span class="token punctuation">"</span></span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><strong>index.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 配置</span>
  require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    <span class="token comment">// 模块映射关系</span>
    <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token string">'./modules/time'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">utils</span><span class="token operator">:</span> <span class="token string">'./modules/utils'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'utils'</span><span class="token punctuation">,</span> <span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">utils<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 逻辑代码</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span>format<span class="token punctuation">)</span> <span class="token comment">// Function</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>curTime<span class="token punctuation">)</span> <span class="token comment">// 2022-08-10 15:05</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>time.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义模块</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> curTime <span class="token operator">=</span> <span class="token string">'2022-08-10 15:05'</span>

  <span class="token comment">// 暴露属性</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    curTime
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>utils.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义模块，引入需要的模块</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>curTime<span class="token punctuation">)</span> <span class="token comment">// 2022-08-10 15:05</span>

  <span class="token comment">// 暴露属性</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    format
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3>CMD</h3>
<p>通用模块定义（Common Module Definition，CMD）采用异步加载模块，并且吸收 CommonJS 的优点，比较常用的库是 <code>SeaJS</code>。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>CMD
├── index.html
├── index.js
├── lib
│   └── sea.js
└── modules
    ├── time.js
    └── .js
</code></pre></div><p><strong>index.html</strong></p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./lib/sea.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      seajs<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'./index.js'</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><strong>index.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> curTime <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./modules/foo'</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> format <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./modules/utils'</span><span class="token punctuation">)</span>

  <span class="token function">format</span><span class="token punctuation">(</span>curTime<span class="token punctuation">)</span> <span class="token comment">// 2022-08-10 15:05</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>time.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> curTime <span class="token operator">=</span> <span class="token string">'2022-08-10 15:05'</span>

  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    curTime
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>utils.js</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    format
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2>ESM</h2>
<p>ES2015 后浏览器实现的模块化方案，长远来看，未来无论是基于 JS 的 WEB 端，还是基于 node 的服务器端或桌面应用，模块规范都会统一使用 ES6 module。</p>
<h3>兼容性</h3>
<p>并不是所有浏览器都对 ESM 实现完全支持，需要用到 webpack 等工具实现代码转换。</p>
<p>可见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81" target="_blank" rel="noopener noreferrer">浏览器支持</a>。</p>
<h3>导出</h3>
<h4>方式一：分别导出</h4>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> curTime <span class="token operator">=</span> <span class="token string">'2022-08-10 15:05'</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h4>方式二：统一导出</h4>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> curTime <span class="token operator">=</span> <span class="token string">'2022-08-10 15:05'</span>
<span class="token keyword">const</span> <span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> curTime<span class="token punctuation">,</span> format <span class="token punctuation">}</span>
</code></pre></div><h4>方式三：别名导出</h4>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> curTime <span class="token keyword">as</span> time<span class="token punctuation">,</span> format <span class="token punctuation">}</span>
</code></pre></div><p>注意这里 <code>{}</code> 并非对象。</p>
<h4>方式四：默认导出</h4>
<p>一个模块中只能有一个默认导出。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'format'</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>导入</h3>
<h4>方式一：统一导入</h4>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> curTime<span class="token punctuation">,</span> format <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./module.js'</span>
</code></pre></div><h4>方式二：整体导入</h4>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> module <span class="token keyword">from</span> <span class="token string">'./module.js'</span>
module<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>time<span class="token punctuation">)</span>
</code></pre></div><h4>方式三：别名导入</h4>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> curTime <span class="token keyword">as</span> time<span class="token punctuation">,</span> format <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./module.js'</span>
</code></pre></div><h4>方式四：默认导出的导入</h4>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> format <span class="token keyword">from</span> <span class="token string">'./module.js'</span>
</code></pre></div><h3><code>import()</code></h3>
<p>上述的导入都是用 import 关键字实现模块实现，<code>import()</code> 函数可以实现动态导入模块。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./foo.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 逻辑代码</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./bar.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">bar</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 逻辑代码</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>ESM VS CommonJS</h3>
<p>CommonJS 模块加载 js 文件的过程是 <strong>运行时</strong> 加载的，并且是同步的：</p>
<ul>
<li>运行时加载意味着是 js 引擎在执行 js 代码的过程中加载模块；</li>
<li>同步的就意味着一个文件没有加载结束之前，后面的代码都不会执行。</li>
</ul>
<p>ES Module 加载 js 文件的过程是 <strong>编译（解析）时</strong> 加载的，并且是异步的：</p>
<ul>
<li>编译时（解析）时加载，意味着 <code>import</code> 关键字不能和运行时相关的内容放在一起使用；</li>
<li>异步的意味着：JS 引擎在遇到 import 时会去获取这个 js 文件，但是这个获取的过程是异步的，并不会阻塞主线程继续执行。</li>
</ul>
<p>CommonJS 通过 <code>module.exports</code> 导出的是一个对象，导出和导入指向的是同一块内存空间，两边修改会同时影响导出对象。</p>
<p>ES Module 通过 <code>export</code> 导出的是变量本身的引用：JS 引擎会创建<strong>模块环境记录</strong>，会和导出的变量进行绑定。所以在导出的模块中修改变化，导入的地方可以通过模块环境记录获取最新的值；但是在导入的地方不允许修改变量（直接报错），因为导入它时相当于给一个常量赋值。</p>
<blockquote>
<p>如果 ESM 导出的是一个对象，那么导入的模块也能修改对象中的属性，因为他指向内存空间。</p>
</blockquote>
<h2>总结</h2>
<p>本文主要介绍了模块化发展的历程，介绍各种规范如 CommonJS、AMD、CMD、ESM 的使用和对比。</p>
]]></content>
    <category term="工程化"/>
    <published>2022-08-10T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">包管理工具</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/02-package-manager.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/02-package-manager.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>npm</h2>
<p><a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener noreferrer">https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally</a></p>
]]></summary>
    <content type="html"><![CDATA[<h2>npm</h2>
<p><a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener noreferrer">https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally</a></p>
]]></content>
    <category term="工程化"/>
    <published>2023-12-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">工具链</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/03-tool.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/03-tool.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>JavaScript</h2>
<p>问题：</p>
<ul>
<li>API 兼容，polyfill: core.js</li>
<li>语法增强（compiler），syntax transformer(regenerator)，jsx，tsc...</li>
</ul>
<p>babel 代码编译工具</p>
<ul>
<li>@babel/core</li>
<li>@babel/preset-env</li>
</ul>
<p>source code -- ast</p>
<p>swc(rust) 对标 babel</p>
<p><a href="https://github.com/estree/estree" target="_blank" rel="noopener noreferrer">https://github.com/estree/estree</a></p>]]></summary>
    <content type="html"><![CDATA[<h2>JavaScript</h2>
<p>问题：</p>
<ul>
<li>API 兼容，polyfill: core.js</li>
<li>语法增强（compiler），syntax transformer(regenerator)，jsx，tsc...</li>
</ul>
<p>babel 代码编译工具</p>
<ul>
<li>@babel/core</li>
<li>@babel/preset-env</li>
</ul>
<p>source code -- ast</p>
<p>swc(rust) 对标 babel</p>
<p><a href="https://github.com/estree/estree" target="_blank" rel="noopener noreferrer">https://github.com/estree/estree</a></p>
<p><a href="https://github.com/bramblex/jsjs" target="_blank" rel="noopener noreferrer">https://github.com/bramblex/jsjs</a></p>
<h2>CSS</h2>
<p>问题：</p>
<ul>
<li>语法缺失（循环、判断、拼接）</li>
<li>功能缺失（颜色函数、数学函数、自定义函数）</li>
</ul>
<p>sass/less/stylus --&gt; 预处理器 --&gt; css --&gt; postcss（后处理器） --&gt; polyfill、代码压缩、剪枝</p>
<p><a href="https://postcss.org/" target="_blank" rel="noopener noreferrer">https://postcss.org/</a></p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20231223162446.png" alt="20231223162446" tabindex="0" loading="lazy"><figcaption>20231223162446</figcaption></figure>
<h2>构建工具</h2>
<p>以 webpack 为例。</p>
<ol>
<li>入口：通过入口分析依赖关系；</li>
<li>开发服务器：webpack serve --&gt; webpack dev server --&gt; express --&gt; 源码变更 --&gt; 浏览器刷新（强制刷新、HMR）websocket</li>
<li>文件指纹（hash），涉及到缓存，类似 </li>
<li>sourcemap</li>
<li>...</li>
</ol>
<h2>脚手架</h2>
<p>提供界面与交互、提供工程模版</p>
<ul>
<li>cra：深度定制，配置需要 eject 或使用 react-rewired 和 customize-cra</li>
<li>vue-cli：支持配置覆盖，折中方案</li>
<li>...</li>
</ul>
]]></content>
    <category term="工程化"/>
    <published>2023-12-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">项目规范</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/04-project-standards.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/04-project-standards.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>代码规范</h2>
<h3>editorconfig</h3>
<p>EditorConfig 有助于跨不同编辑器和 IDE 为处理同一项目的多个开发人员维护一致的编码风格。</p>
<p>VSCode 需要安装 <code>EditorConfig for VS Code</code> 插件。</p>
<p><strong><code>.editorconfig</code></strong></p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># http://editorconfig.org</span>

root <span class="token operator">=</span> <span class="token boolean">true</span>

<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token comment"># 表示所有文件适用</span>
charset <span class="token operator">=</span> utf-8 <span class="token comment"># 设置文件字符集为 utf-8</span>
indent_style <span class="token operator">=</span> space <span class="token comment"># 缩进风格（tab | space）</span>
indent_size <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment"># 缩进大小</span>
end_of_line <span class="token operator">=</span> lf <span class="token comment"># 控制换行类型(lf | cr | crlf)</span>
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment"># 去除行首的任意空白字符</span>
insert_final_newline <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment"># 始终在文件末尾插入一个新行</span>

<span class="token punctuation">[</span>*.md<span class="token punctuation">]</span> <span class="token comment"># 表示仅 md 文件适用以下规则</span>
max_line_length <span class="token operator">=</span> off
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">false</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>代码规范</h2>
<h3>editorconfig</h3>
<p>EditorConfig 有助于跨不同编辑器和 IDE 为处理同一项目的多个开发人员维护一致的编码风格。</p>
<p>VSCode 需要安装 <code>EditorConfig for VS Code</code> 插件。</p>
<p><strong><code>.editorconfig</code></strong></p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># http://editorconfig.org</span>

root <span class="token operator">=</span> <span class="token boolean">true</span>

<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token comment"># 表示所有文件适用</span>
charset <span class="token operator">=</span> utf-8 <span class="token comment"># 设置文件字符集为 utf-8</span>
indent_style <span class="token operator">=</span> space <span class="token comment"># 缩进风格（tab | space）</span>
indent_size <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment"># 缩进大小</span>
end_of_line <span class="token operator">=</span> lf <span class="token comment"># 控制换行类型(lf | cr | crlf)</span>
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment"># 去除行首的任意空白字符</span>
insert_final_newline <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment"># 始终在文件末尾插入一个新行</span>

<span class="token punctuation">[</span>*.md<span class="token punctuation">]</span> <span class="token comment"># 表示仅 md 文件适用以下规则</span>
max_line_length <span class="token operator">=</span> off
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">false</span>
</code></pre></div><h3>ESLint</h3>
<p>ESLint 是一个 Javascript Linter，帮助我们规范代码质量，提高团队开发效率。</p>
<p>安装 <code>eslint</code> 并新建配置文件 <code>.eslintrc.js</code>。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> eslint <span class="token parameter variable">-D</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">es2021</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">'eslint:recommended'</span><span class="token punctuation">,</span>
    <span class="token string">'plugin:react/recommended'</span><span class="token punctuation">,</span>
    <span class="token string">'plugin:@typescript-eslint/recommended'</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token string">'latest'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">'module'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果想要在项目中安装 <code>jest</code>，则需要在配置文件中的 <code>env</code> 加上下面这一行：</p>
<div class="language-diff" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> env: {
</span><span class="token prefix unchanged"> </span><span class="token line">   browser: true,
</span><span class="token prefix unchanged"> </span><span class="token line">   es2021: true,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   jest: true
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> },
</span></span></code></pre></div><p>如果想和 <code>prettier</code> 一起使用则需要在 <code>extends</code> 中加入：</p>
<div class="language-diff" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> extends: [
</span><span class="token prefix unchanged"> </span><span class="token line">   'eslint:recommended',
</span><span class="token prefix unchanged"> </span><span class="token line">   'plugin:react/recommended',
</span><span class="token prefix unchanged"> </span><span class="token line">   'plugin:@typescript-eslint/recommended',
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   "prettier"
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ],
</span></span></code></pre></div><p>还需要在项目中安装与 <code>TypeScript</code> 相关的插件：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> eslint-plugin-import @typescript-eslint/parser eslint-import-resolver-typescript
</code></pre></div><p>最后在 <code>.eslintrc.js</code> 中添加 <code>settings</code>：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">"import/resolver"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">"typescript"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>prettier</h3>
<p><code>prettier</code> 是代码格式化工具，和 <code>eslint</code> 不同的是，它只关注代码格式，而不关注语法问题。</p>
<p>首先安装 <code>prettier</code> 及相关依赖插件：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> prettier eslint-config-prettier eslint-plugin-prettier eslint-plugin-react-hooks <span class="token parameter variable">-D</span>
</code></pre></div><p>为了使用刚才安装的插件，需要对 <code>.eslintrc.js</code> 中的 <code>plugins</code> 进行修改：</p>
<div class="language-diff" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> plugins: ["react", "@typescript-eslint"]
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> plugins: ["react", "react-hooks", "@typescript-eslint", "prettier"]
</span></span></code></pre></div><p><code>prettier</code> 基本的配置文件如下：</p>
<p><strong><code>.prettierrc</code></strong></p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"useTabs"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">"tabWidth"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"trailingComma"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>
  <span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong><code>.prettierignore</code></strong></p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>/dist/*
.local
.output.js
/node_modules/**

**/*.svg
**/*.sh

/public/*
</code></pre></div><p>最后可以在 <code>package.json</code> 中配置 <code>scripts</code>：</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint src/**/*.{js,jsx,ts,tsx,json}"</span><span class="token punctuation">,</span>
    <span class="token property">"lint:fix"</span><span class="token operator">:</span> <span class="token string">"eslint --fix 'src/**/*.{js,jsx,ts,tsx,json}'"</span><span class="token punctuation">,</span>
    <span class="token property">"format"</span><span class="token operator">:</span> <span class="token string">"prettier --write 'src/**/*.{js,jsx,ts,tsx,css,md,json}' --config ./.prettierrc"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>StyleLint</h3>
<p><code>Stylelint</code> 是一个强大、先进的 CSS 代码检查器（linter），可以帮助你规避 CSS 代码中的错误并保持一致的编码风格。</p>
<blockquote>
<p><a href="https://stylelint.io/" target="_blank" rel="noopener noreferrer">https://stylelint.io/</a></p>
</blockquote>
<p>安装依赖</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 如果项目中使用 scss</span>
<span class="token function">pnpm</span> <span class="token function">add</span> stylelint stylelint-config-standard-scss <span class="token parameter variable">-D</span>
<span class="token function">pnpm</span> <span class="token function">add</span> postcss-scss <span class="token parameter variable">-D</span>
</code></pre></div><p>配置文件 <code>.stylelintrc.js</code>：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token string">'stylelint-config-standard-scss'</span><span class="token punctuation">,</span>
  <span class="token comment">// rule覆盖（根据自己喜好来配置）</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">'string-quotes'</span><span class="token operator">:</span> <span class="token string">'single'</span><span class="token punctuation">,</span>
    <span class="token string-property property">'property-no-vendor-prefix'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'declaration-colon-newline-after'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'value-list-comma-newline-after'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'custom-property-pattern'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'color-hex-length'</span><span class="token operator">:</span> <span class="token string">'short'</span><span class="token punctuation">,</span>
    <span class="token string-property property">'color-function-notation'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'alpha-value-notation'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'value-no-vendor-prefix'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'selector-class-pattern'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'function-url-quotes'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'no-missing-end-of-source-newline'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">'no-descending-specificity'</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string-property property">'font-family-no-missing-generic-family-keyword'</span><span class="token operator">:</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">overrides</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 若项目中存在scss文件，添加以下配置</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token string">'**/*.scss'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">customSyntax</span><span class="token operator">:</span> <span class="token string">'postcss-scss'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>.stylelintignore</code> 忽略校验目录文件：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/dist/*
/public/*
public/*
node_modules
</code></pre></div><h2>Git 规范</h2>
<p><code>Git</code> 规范包括：</p>
<ul>
<li><code>pre-commit</code>：判断提交的代码是否符合规范</li>
<li><code>commit-message</code>：判断 <code>commit</code> 信息是否符合规范</li>
</ul>
<h3>husky</h3>
<p><code>husky</code> 可以管理 <code>git</code> 中的 <code>hooks</code>，初始化应该执行如下命令：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> dlx husky-init <span class="token operator">&amp;&amp;</span> <span class="token function">pnpm</span> <span class="token function">install</span> <span class="token comment"># pnpm</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>它将设置 <code>husky</code>，修改 <code>package.json</code> 并创建一个你可以编辑的预提交钩子样本。默认情况下，它将在你提交时运行 <code>npm test</code>。</p>
</div>
<p>然后修改 <code>pre-commit</code>：</p>
<div class="language-diff" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> npm test
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> npm run lint
</span></span></code></pre></div><p>这样在每次 <code>git commit</code> 之前，都会首先进行 <code>lint</code> 检查，通过之后才能提交代码。</p>
<h3>lint-staged</h3>
<p>然而思考几个问题：</p>
<ol>
<li>我们只修改了个别的文件，没有必要检测所有的文件代码格式</li>
<li>它只能给我们提示出对应的错误，我们还需要手动的进行代码修改</li>
<li>修改后需要手动 <code>git add .</code></li>
</ol>
<p>这时可以使用 <code>lint-staged</code> 解决这个问题，它只会检查在暂存区的代码。</p>
<p>安装：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> lint-staged <span class="token parameter variable">-D</span>
</code></pre></div><p>修改 <code>.husky</code> 中的 <code>pre-commit</code>：</p>
<div class="language-diff" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> npm test
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> npx --no-install lint-staged
</span></span></code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>--no-install</code> 强制使用本地模块，不下载远程模块，如果本地不存在该模块，就会报错。</p>
</div>
<p>在 <code>package.json</code> 中配置：</p>
<blockquote>
<p>参考资料</p>
<p><a href="https://github.com/ant-design/ant-design/blob/master/package.json" target="_blank" rel="noopener noreferrer">https://github.com/ant-design/ant-design/blob/master/package.json</a> &gt; <a href="https://www.npmjs.com/package/lint-staged" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/package/lint-staged</a> &gt; <a href="https://juejin.cn/post/7136009620979449893#heading-5" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7136009620979449893#heading-5</a></p>
</blockquote>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">"*.{json,md}"</span><span class="token operator">:</span> <span class="token string">"prettier --ignore-unknown --write"</span><span class="token punctuation">,</span>
  <span class="token property">"*.{js,jsx,ts,tsx}"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"eslint --fix"</span><span class="token punctuation">,</span>
    <span class="token string">"prettier --write"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"{!(package)*.json,*.code-snippets,.!(browserslist)*rc}"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"prettier --write--parser json"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"package.json"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"prettier --write"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"*.{scss,less,styl,html}"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"stylelint --fix"</span><span class="token punctuation">,</span>
    <span class="token string">"prettier --write"</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>commitizen</h3>
<p>在安装完上面两个依赖后，就已经能在 <code>pre-commit</code> 钩子判断<strong>暂存区代码</strong>是否符合规范，并且使用 <code>prettier</code> 修复它。</p>
<p>第二个问题是我们需要在 <code>commit-message</code> 中判断 <code>commit</code> 信息是否符合规范。可以使用 <code>commitizen</code>，它是一个撰写符合 <code>Commit Message</code> 标准的一款工具。通过它可以实现交互式撰写规范的 <code>Commit Message</code>。</p>
<blockquote>
<p><a href="http://commitizen.github.io/cz-cli/" target="_blank" rel="noopener noreferrer">http://commitizen.github.io/cz-cli/</a></p>
</blockquote>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> commitizen <span class="token parameter variable">-D</span>
</code></pre></div><p>安装完成后，一般我们都采用符合 Angular 的 <code>Commit message</code> 格式的提交规范，运行以下命令生成符合 Angular 提交规范格式的 <code>Commit message</code>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx --no-install commitizen init cz-conventional-changelog <span class="token parameter variable">--pnpm</span> --save-dev --save-exact
</code></pre></div><p><code>package.json</code> 中会自动生成以下配置：</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">"commitizen"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"./node_modules/cz-conventional-changelog"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>然后在 <code>package.json</code> 中的 <code>scripts</code> 添加命令：</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token property">"commit"</span><span class="token operator">:</span> <span class="token string">"git-cz"</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>commitlint</h3>
<p>虽然使用了 <code>commitizen</code> 交互式撰写规范的 <code>Commit Message</code>，但由于它不是强制使用，我们仍然可以通过 <code>git commit</code> 提交信息，因此不管是使用 <code>git commit</code> 或 <code>git cz</code>，我们都需要对 <code>commit message</code> 进行校验，不允许规范的情况下不能进行 <code>commit</code> 操作。</p>
<blockquote>
<p><a href="https://commitlint.js.org/#/guides-local-setup" target="_blank" rel="noopener noreferrer">https://commitlint.js.org/#/guides-local-setup</a></p>
</blockquote>
<p>首先安装相关依赖并且生成相关配置：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Install and configure if needed</span>
<span class="token function">npm</span> <span class="token function">install</span> --save-dev @commitlint/<span class="token punctuation">{</span>cli,config-conventional<span class="token punctuation">}</span>
<span class="token comment"># For Windows:</span>
<span class="token function">pnpm</span> <span class="token function">add</span> @commitlint/config-conventional @commitlint/cli <span class="token parameter variable">-D</span>

<span class="token comment"># Configure commitlint to use conventional config</span>
<span class="token builtin class-name">echo</span> <span class="token string">"module.exports = { ignores: [(commit) =&gt; commit.includes('init')], extends: ['@commitlint/config-conventional'] };"</span> <span class="token operator">&gt;</span> commitlint.config.js
</code></pre></div><p>在 <code>hushy</code> 中自动生成 <code>hook</code>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> .husky/commit-msg <span class="token string">"npx --no-install commitlint --edit <span class="token variable">$1</span>"</span>
</code></pre></div><p>除了 <code>cli</code> 和 <code>config-conventional</code> 外，<code>commitlint</code> 还提供了其他的工具包：</p>
<ul>
<li><code>@commitlint/cli</code>: 这是 <code>commitlint</code> 的命令行接口，用于在命令行中执行 <code>commitlint</code>。</li>
<li><code>@commitlint/config-conventional</code>: 这是 <code>commitlint</code> 的一个常规配置，它提供了一组常规的 <code>commit</code> 规则，这些规则来源于 <code>Angular</code> 团队的提交规范。</li>
<li><code>@commitlint/cz-commitlint</code>: 这个包是 <code>commitizen</code> 与 <code>commitlint</code> 的适配器，用于在命令行中启动交互式的 <code>commit</code> 提示器，来协助开发者完成符合规范的提交信息。</li>
<li><code>@commitlint/format</code>: 这个包提供了一种格式化 <code>commitlint</code> 返回的结果的方式，可以自定义输出结果的样式。</li>
<li><code>@commitlint/prompt-cli</code>: 这个包提供了一个命令行的交互式提示器，用于在命令行中启动交互式的 <code>commit</code> 提示器，来协助开发者完成符合规范的提交信息。</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">`commitizen` 和 `@commitlint/cz-commitlint` 的区别</p>
<p><code>commitizen</code> 和 <code>@commitlint/cz-commitlint</code> 的功能并不完全一样，但它们可以协同工作来帮助实现更好地 <code>git commit</code> 信息。</p>
<p><code>commitizen</code> 是一个帮助创建符合规范的 <code>git commit</code> 的工具。它在运行 <code>git cz</code> 时会提供一个命令行的交互式界面来引导你创建 <code>commit</code>，使 <code>commit message</code> 更为标准化。</p>
<p><code>@commitlint/cz-commitlint</code> 是一个为 <code>commitizen</code> 提供的 <code>@commitlint</code> 适配器。它让 <code>commitizen</code> 可以使用 <code>@commitlint</code> 的 <code>config</code> 配置（如 <code>@commitlint/config-conventional</code>）作为 <code>commit</code> 提示的规则。</p>
<p>所以，可以这么理解：<code>commitizen</code> 提供了一种方式来创建 <code>commit</code>，而 <code>@commitlint/cz-commitlint</code> 则是允许 <code>commitizen</code> 使用 <code>commitlint</code> 的规则进行 <code>commit</code> 信息的创建。</p>
<p>这样，当使用 <code>commitizen</code> 进行 <code>commit</code> 时，就会遵守 <code>commitlint</code> 的规则，如果不遵守，<code>commit</code> 就会被阻止，除非修改为符合规则的信息。这可以保证项目中的 <code>git commit</code> 样式的一致性。</p>
<p>总结：<code>commitizen</code> 负责引导创建 <code>commit</code>，而 <code>@commitlint/cz-commitlint</code> 则负责设定创建 <code>commit</code> 的规则。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">`commitizen` 和 `@commitlint/prompt-cli` 的区别</p>
<p><code>@commitlint/prompt-cli</code> 和 <code>commitizen</code> 的功能类似，它们都提供命令行的交互式界面来引导创建符合规范的 <code>commit message</code>。</p>
<p>区别主要在于：</p>
<ul>
<li><code>@commitlint/prompt-cli</code> 是 <code>commitlint</code> 的一部分，用于捕获 <code>commit message</code> 进行校验。</li>
<li><code>commitizen</code> 是一个独立的第三方库，它没有自己的校验规范，但可以非常好的与 <code>commitlint</code> 以及其他规范配合使用。</li>
</ul>
<p>总的来说，这两者可以一起使用或分开使用，选择使用哪一个主要取决于希望从哪个工具中获取需要的特性或者个人的使用习惯。</p>
</div>
<h3>CHANGELOG</h3>
<p>CHANGELOG 记录项目所有的 <code>commit</code> 信息并归类版本，可以快速跳转到该条 <code>commit</code> 记录，方便知道项目哪个版本做了哪些功能有哪些 bug 等信息。也方便排查 bug，对于提交记录一目了然，不用一个一个去翻去查。</p>
<blockquote>
<p><a href="https://juejin.cn/post/7136009620979449893" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7136009620979449893</a></p>
</blockquote>
<p>首先安装 <code>standard-version</code>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> standard-version <span class="token parameter variable">-D</span>
</code></pre></div><p>然后在 <code>package.json</code> 的 <code>scripts</code> 中添加命令：</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token property">"standard-version"</span><span class="token operator">:</span> <span class="token string">"standard-version"</span>
<span class="token punctuation">}</span>
</code></pre></div><p>当 <code>commit type</code> 是 <code>feat</code> 和 <code>fix</code> 的时候执行 <code>npm run standard-version</code>，它会自增版本号。</p>
<p><code>standard-version</code> 提供自定义配置不同类型对应显示文案，在根目录新建 <code>.versionrc.js</code> 文件：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'feat'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'✨ Features | 新功能'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'fix'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'🐛 Bug Fixes | Bug 修复'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'init'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'🎉 Init | 初始化'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'docs'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'✏️ Documentation | 文档'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'💄 Styles | 风格'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'refactor'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'♻️ Code Refactoring | 代码重构'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'perf'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'⚡ Performance Improvements | 性能优化'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'✅ Tests | 测试'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'revert'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'⏪ Revert | 回退'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'build'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'📦‍ Build System | 打包构建'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'chore'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'🚀 Chore | 构建/工程依赖/工具'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'ci'</span><span class="token punctuation">,</span> <span class="token literal-property property">section</span><span class="token operator">:</span> <span class="token string">'👷 Continuous Integration | CI 配置'</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content>
    <category term="工程化"/>
    <published>2023-11-21T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">yeoman 基础使用</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/05-yeoman.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/05-yeoman.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p><code>yo@5.0.0</code> 引入了一个破坏性的更新，会导致 <a href="https://github.com/yeoman/generator-generator/issues/258" target="_blank" rel="noopener noreferrer">instantiatedGenerator.run is not a function</a>，需要降级到 <code>@4.x</code>。</p>
<p>降级后仍有报错，可能是 <code>generator-node</code> 的问题，不再推荐使用。</p>
</div>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p><code>yo@5.0.0</code> 引入了一个破坏性的更新，会导致 <a href="https://github.com/yeoman/generator-generator/issues/258" target="_blank" rel="noopener noreferrer">instantiatedGenerator.run is not a function</a>，需要降级到 <code>@4.x</code>。</p>
<p>降级后仍有报错，可能是 <code>generator-node</code> 的问题，不再推荐使用。</p>
</div>
<p>Yeoman 是一个通用的脚手架系统，允许创建任何类型的应用程序。它可以快速启动新项目，并简化现有项目的维护工作。</p>
<p>Yeoman 与语言无关。它可以生成任何语言（Web、Java、Python、C# 等）的项目。</p>
<p>Yeoman 本身不做任何决定。所有决定都由生成器做出，而生成器基本上就是 Yeoman 环境中的插件。有很多公开可用的生成器，创建一个新的生成器来匹配任何工作流程也很容易。Yeoman 始终是满足脚手架需求的正确选择。</p>
<p>以下是一些常见的使用案例：</p>
<ul>
<li>快速创建新项目</li>
<li>创建项目的新部分，如带有单元测试的新控制器</li>
<li>创建模块或软件包</li>
<li>引导新服务</li>
<li>执行标准、最佳实践和风格指南</li>
<li>通过让用户使用示例应用程序来推广新项目</li>
<li>...</li>
</ul>
<h2>开始</h2>
<p><code>yo</code> 是一款 Yeoman 命令行实用程序，允许使用脚手架模板（简称为生成器）创建项目。使用 npm 安装 <code>yo</code> 和生成器：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> yo
</code></pre></div><p>然后可以安装一些生成器：</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>可以在 <a href="https://yeoman.io/generators/" target="_blank" rel="noopener noreferrer">生成器</a> 中搜索想要的生成器。</p>
</div>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> generator-node
</code></pre></div><h2>基本脚手架</h2>
<p>搭建基本脚手架，只需要去除生成器前缀 <code>generator-</code>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yo <span class="token function">node</span>
</code></pre></div><p>大多数生成器会提出一系列问题来定制新项目。要查看哪些选项可用，请使用 <code>help</code> 命令：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yo <span class="token function">node</span> <span class="token parameter variable">--help</span>
</code></pre></div><p>很多生成器都依赖于构建系统（如 Grunt 或 Gulp）和软件包管理器（如 npm 和 Bower）。请务必访问生成器的网站，了解运行和维护新应用程序的相关信息。运行以下命令即可轻松访问生成器的主页：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> home generator-node
</code></pre></div><p>为复杂框架搭建脚手架的生成器可能会提供额外的生成器，为项目的较小部分搭建脚手架。这些生成器通常被称为子生成器，访问方式为 <code>generator:sub-generator</code>。</p>
<p>以 <code>generator-node</code> 为例。一旦生成了完整的 node 应用程序，就可以添加其他功能。要在项目中添加新控制器，请运行控制器子生成器：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yo node:cli
</code></pre></div><h2>其他 yo 命令</h2>
<p>除了上一节介绍的基础知识，<code>yo</code> 还是一个完全交互式的工具。只需在终端键入 <code>yo</code>，就能看到一系列选项，用于管理与生成器有关的一切：运行、更新、安装、帮助和其他实用程序。</p>
<p><code>yo</code> 还提供以下命令。</p>
<ul>
<li><code>yo --help</code> 访问完整的帮助界面</li>
<li><code>yo --generators</code> 列出所有已安装的生成器</li>
<li><code>yo --version</code> 获取版本</li>
</ul>
<h2>故障排除</h2>
<p>大多数问题都可以通过运行：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>yo doctor
</code></pre></div><p><code>doctor</code> 命令将诊断并提供解决最常见问题的步骤。</p>
]]></content>
    <category term="工程化"/>
    <published>2024-01-09T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">fnm 和 nvm 对比</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/06-fnm-nvm.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/06-fnm-nvm.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>在管理多个 Node.js 项目（每个项目都可能需要不同的 Node 版本）时，可靠的版本管理器可以简化您的工作流程。 两种流行的选择是 <a href="https://github.com/Schniz/fnm" target="_blank" rel="noopener noreferrer">fnm（Fast Node Manager）</a> 和 <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener noreferrer">nvm（Node Version Manager）</a>。本文从性能、功能、安装简便性、使用和兼容性等方面对 <code>fnm</code> 和 <code>nvm</code> 进行了比较，帮助你选择最适合自己开发需求的版本管理器。</p>]]></summary>
    <content type="html"><![CDATA[<p>在管理多个 Node.js 项目（每个项目都可能需要不同的 Node 版本）时，可靠的版本管理器可以简化您的工作流程。 两种流行的选择是 <a href="https://github.com/Schniz/fnm" target="_blank" rel="noopener noreferrer">fnm（Fast Node Manager）</a> 和 <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener noreferrer">nvm（Node Version Manager）</a>。本文从性能、功能、安装简便性、使用和兼容性等方面对 <code>fnm</code> 和 <code>nvm</code> 进行了比较，帮助你选择最适合自己开发需求的版本管理器。</p>
<h2>fnm 和 nvm 简介</h2>
<p><code>nvm</code>：作为最广泛使用的 Node.js 版本管理器，<code>nvm</code> 提供了可靠的 Node.js 版本管理。它用 Bash 编写，适用于类 UNIX 环境（如 macOS 和 Linux），也可以通过兼容的 shell（如 WSL）在 Windows 上使用。</p>
<p><code>fnm</code>：<code>fnm</code> 是一种较新的、快速的替代方案，由 Rust 编写，以其速度闻名。<code>fnm</code> 支持多线程，因此在安装和切换 Node 版本时特别快。它还提供跨平台支持，包括 WSL、macOS 和 Windows。</p>
<h2>安装</h2>
<h3><code>nvm</code></h3>
<p>要安装 <code>nvm</code>，在 UNIX 系统或 Windows 的 WSL 上运行以下命令：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre></div><p>或者使用 <code>wget</code>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">wget</span> -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre></div><p>安装完成之后，在 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 中添加以下内容：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">${XDG_CONFIG_HOME-}</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">printf</span> %s <span class="token string">"<span class="token variable">${<span class="token environment constant">HOME</span>}</span>/.nvm"</span> <span class="token operator">||</span> <span class="token builtin class-name">printf</span> %s <span class="token string">"<span class="token variable">${XDG_CONFIG_HOME}</span>/nvm"</span><span class="token variable">)</span></span>"</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token comment"># This loads nvm</span>
</code></pre></div><p>重启终端或运行 <code>source ~/.bashrc</code> 或 <code>source ~/.zshrc</code> 使配置生效，然后检查 <code>nvm</code> 是否安装成功：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nvm <span class="token parameter variable">--version</span>
</code></pre></div><h3><code>fnm</code></h3>
<p>在 UNIX 系统上，可以运行脚本或使用 <code>homebrew</code> 安装 <code>fnm</code>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 运行脚本安装</span>
<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://fnm.vercel.app/install <span class="token operator">|</span> <span class="token function">bash</span>

<span class="token comment"># 或使用 homebrew 安装</span>
brew <span class="token function">install</span> fnm
</code></pre></div><p>在 Windows 上，可以使用 PowerShell 安装 <code>fnm</code>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>winget <span class="token function">install</span> Schniz.fnm
</code></pre></div><p>安装完成后，需要设置环境变量。</p>
<h4><code>~/.bashrc</code>：</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>fnm <span class="token function">env</span> --use-on-cd <span class="token parameter variable">--shell</span> <span class="token function">bash</span><span class="token variable">)</span></span>"</span>
</code></pre></div><h4><code>~/.zshrc</code>：</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>fnm <span class="token function">env</span> --use-on-cd <span class="token parameter variable">--shell</span> <span class="token function">zsh</span><span class="token variable">)</span></span>"</span>
</code></pre></div><h4><code>PowerShell</code>：</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>fnm <span class="token function">env</span> --use-on-cd <span class="token parameter variable">--shell</span> powershell <span class="token operator">|</span> Out-String <span class="token operator">|</span> Invoke-Expression
</code></pre></div><p>重启终端使配置生效，然后检查 <code>fnm</code> 是否安装成功：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>fnm <span class="token parameter variable">--version</span>
</code></pre></div><h2>使用</h2>
<h3><code>nvm</code></h3>
<h4>安装 Node.js 版本</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nvm <span class="token function">install</span> <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span>
</code></pre></div><h4>切换 Node.js 版本</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nvm use <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span>
</code></pre></div><h4>设置默认 Node.js 版本</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nvm <span class="token builtin class-name">alias</span> default <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span>
</code></pre></div><h4>列出所有已安装的 Node.js 版本</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>nvm <span class="token function">ls</span>
</code></pre></div><h4>自动切换版本</h4>
<p><code>nvm</code> 默认没有支持根据 <code>.nvmrc</code> 文件自动切换版本，需要在 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 中添加以下内容：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 自动使用 .nvmrc 文件中定义的 Node 版本</span>
<span class="token function-name function">auto_nvm_use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment"># 如果存在 .nvmrc 文件，则切换到该文件指定的版本</span>
  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">".nvmrc"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">local</span> nvmrc_version
    <span class="token assign-left variable">nvmrc_version</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token operator">&lt;</span>.nvmrc<span class="token variable">)</span></span>
    <span class="token comment"># 检查当前版本是否与 .nvmrc 中的版本不同</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>nvm version<span class="token variable">)</span></span>"</span> <span class="token operator">!=</span> <span class="token string">"v<span class="token variable">$nvmrc_version</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
      nvm use <span class="token string">"<span class="token variable">$nvmrc_version</span>"</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"NVM: Version <span class="token variable">$nvmrc_version</span> specified in .nvmrc is not installed."</span>
    <span class="token keyword">fi</span>
  <span class="token keyword">fi</span>
<span class="token punctuation">}</span>

<span class="token comment"># 针对 Bash 的目录切换钩子</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token environment constant">$BASH_VERSION</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token assign-left variable">PROMPT_COMMAND</span><span class="token operator">=</span><span class="token string">"auto_nvm_use;<span class="token variable">$PROMPT_COMMAND</span>"</span>
<span class="token keyword">fi</span>

<span class="token comment"># 针对 Zsh 的目录切换钩子</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$ZSH_VERSION</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  autoload <span class="token parameter variable">-U</span> add-zsh-hook
  add-zsh-hook chpwd auto_nvm_use
  auto_nvm_use  <span class="token comment"># 立即执行一次，适配启动后的初始目录</span>
<span class="token keyword">fi</span>
</code></pre></div><p>同时，如果想要支持递归查找版本文件，也需要自己实现。</p>
<h3><code>fnm</code></h3>
<h4>安装 Node.js 版本</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>fnm <span class="token function">install</span> <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span>
</code></pre></div><h4>切换 Node.js 版本</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>fnm use <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span>
</code></pre></div><h4>设置默认 Node.js 版本</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>fnm <span class="token builtin class-name">alias</span> default <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span>
</code></pre></div><h4>列出所有已安装的 Node.js 版本</h4>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>fnm <span class="token function">ls</span>
</code></pre></div><h4>自动切换版本</h4>
<p><code>fnm</code> 默认支持根据 <code>.nvmrc</code>、<code>.node-version</code> 或 <code>packages.json#engines#node</code>（如果 <code>--resolve-engines</code> 启用）文件自动切换版本，只需要在 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 中添加以下内容，<code>--use-on-cd</code> 表示根据当前目录下的 <code>.nvmrc</code> 文件自动切换版本，<code>--version-file-strategy=recursive</code> 表示递归查找版本文件。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>fnm <span class="token function">env</span> --use-on-cd --version-file-strategy<span class="token operator">=</span>recursive<span class="token variable">)</span></span>"</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>fnm</code> 开箱即带许多功能。其中一些默认情况下不会激活，因为它们会改变 shell 的默认行为，还有一些只是功能标志，以避免破坏性更改，或者只是实验性的，直到我们认为值得引入它们为止。</p>
<p>所有这些功能都可以通过在初始化 shell 时为 <code>fnm env</code> 调用添加标志来配置。例如，如果你的 shell 设置为 <code>eval "$(fnm env)"</code>，那么你可以添加一个标志，将其更改为 <code>eval "$(fnm env --my-flag=value)"</code>。</p>
<p>详细可以查看配置文档：<a href="https://github.com/Schniz/fnm/blob/master/docs/configuration.md" target="_blank" rel="noopener noreferrer">fnm 配置</a> 实现更好的使用体验。</p>
</div>
<h3>命令对比</h3>
<p><code>fnm</code> 中的命令与 <code>nvm</code> 中的命令几乎完全相同，因此 <code>nvm</code> 用户可以根据需要更方便地切换到 <code>fnm</code>。</p>
<h2>对比</h2>
<h3>性能比较</h3>
<p>安装速度：由于采用 Rust 基础和多线程架构，<code>fnm</code> 的速度明显更快。 与 <code>nvm</code> 相比，安装时间通常更快。</p>
<p>内存使用：<code>fnm</code> 针对低内存使用率进行了优化，因此在高端和资源受限的系统上都很高效。</p>
<p>版本切换：在 <code>fnm</code> 中，版本切换是即时进行的。 相比之下，<code>nvm</code> 可能会出现轻微延迟，尤其是在切换大量使用的版本时。</p>
<h3>跨平台兼容性</h3>
<p><code>nvm</code>：主要为类 UNIX 系统设计。在 Windows 上，可以通过 WSL 或第三方工具（如 nvm-windows）使用。</p>
<p><code>fnm</code>：天然支持跨平台，包括 Windows、macOS 和 Linux，适合在不同操作系统上工作。</p>
<h3>社区和支持</h3>
<p><code>nvm</code>：用户群体庞大，文档丰富，社区资源充足，解决问题更为容易。</p>
<p><code>fnm</code>：虽然相对较新，但 <code>fnm</code> 的受欢迎度迅速上升，文档特别针对安装和使用做了详细的说明。</p>
<h2>总结</h2>
<p><code>nvm</code> 和 <code>fnm</code> 都是管理 Node.js 版本的有效工具。虽然 <code>nvm</code> 是一个被广泛采用的选择，具有强大的社区支持，但 <code>fnm</code> 作为一种新兴的快速、轻量级替代方案，正在迅速崛起。对于需要跨平台兼容性和频繁版本切换的开发者来说，<code>fnm</code> 可能更适合，而偏好成熟工具和丰富文档支持的用户可以选择 <code>nvm</code>。</p>
]]></content>
    <category term="工程化"/>
    <published>2024-11-05T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">fnm 全局共享模块</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/07-fnm-global-module-shared.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/engineering/basic/07-fnm-global-module-shared.html"/>
    <updated>2024-11-09T11:51:37.000Z</updated>
    <summary type="html"><![CDATA[<p><code>fnm</code> 会根据当前 Node 版本创建独立的模块目录，若频繁切换版本，则需要重新安装模块。</p>
<p>为了提高开发体验，我们可能需要全局共享模块，虽然这会在一定程度上造成版本冲突的可能性，但可以减少切换版本时重新安装模块的麻烦。</p>
<p><code>fnm</code> 设置全局共享模块步骤如下。</p>
<h2>macOS</h2>
<ol>
<li>创建全局共享模块目录<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/.npm_global
</code></pre></div></li>
<li>设置 <code>npm</code> 全局模块目录<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix ~/.npm_global
</code></pre></div></li>
<li>更新环境变量<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">"export PATH=~/.npm_global/bin:\<span class="token environment constant">$PATH</span>"</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc
<span class="token builtin class-name">source</span> ~/.zshrc
</code></pre></div></li>
</ol>]]></summary>
    <content type="html"><![CDATA[<p><code>fnm</code> 会根据当前 Node 版本创建独立的模块目录，若频繁切换版本，则需要重新安装模块。</p>
<p>为了提高开发体验，我们可能需要全局共享模块，虽然这会在一定程度上造成版本冲突的可能性，但可以减少切换版本时重新安装模块的麻烦。</p>
<p><code>fnm</code> 设置全局共享模块步骤如下。</p>
<h2>macOS</h2>
<ol>
<li>创建全局共享模块目录<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/.npm_global
</code></pre></div></li>
<li>设置 <code>npm</code> 全局模块目录<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix ~/.npm_global
</code></pre></div></li>
<li>更新环境变量<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">"export PATH=~/.npm_global/bin:\<span class="token environment constant">$PATH</span>"</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc
<span class="token builtin class-name">source</span> ~/.zshrc
</code></pre></div></li>
</ol>
<h2>Windows</h2>
<ol>
<li>创建一个共享的全局模块目录：你可以在任意位置创建一个共享目录，比如 <code>C:\fnm-global-modules</code>。<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> C:<span class="token punctuation">\</span>fnm-global-modules
</code></pre></div></li>
<li>设置 <code>npm</code> 全局模块目录<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix C:<span class="token punctuation">\</span>fnm-global-modules
</code></pre></div></li>
<li>更新环境变量
<ol>
<li>打开 系统环境变量设置（按 Win + X，选择 系统 &gt; 高级系统设置 &gt; 环境变量）。</li>
<li>在「系统变量和用户变量」部分找到 Path，点击 编辑。</li>
<li>添加新的路径：<code>C:\fnm-global-modules\</code>。</li>
</ol>
</li>
<li>重启终端使配置生效。</li>
</ol>
<p>配置完成后，通过 <code>npm install -g</code> 安装的全局模块会存储在 <code>~/.npm_global</code> 中，不再受 Node.js 版本切换的影响。</p>
]]></content>
    <category term="工程化"/>
    <published>2024-11-05T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">单例模式</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/11-singleton-pattern.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/11-singleton-pattern.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>单例是指只需实例化一次就可以全局访问的类。单例可以在整个应用程序中共享，这使得单例非常适合管理应用程序中的全局状态。</p>
<p>比如一个邮件应用，可以使用单例模式来共享一个 <code>EmailClient</code> 对象。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">EmailClient</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> transporter<span class="token operator">:</span> Transporter
  <span class="token keyword">private</span> <span class="token keyword">static</span> instance<span class="token operator">:</span> Mailer

  <span class="token comment">// 使用 nodemailer 配置，发送邮件</span>
  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> smtpConfig<span class="token operator">:</span> SMTPTransport<span class="token punctuation">.</span>Options <span class="token operator">=</span> <span class="token punctuation">{</span>
      host<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token constant">NODEMAILER_HOST</span><span class="token punctuation">,</span>
      port<span class="token operator">:</span> <span class="token number">465</span><span class="token punctuation">,</span>
      secure<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      auth<span class="token operator">:</span> <span class="token punctuation">{</span>
        user<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token constant">NODEMAILER_AUTH_USER</span><span class="token punctuation">,</span>
        pass<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token constant">NODEMAILER_AUTH_PASS</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      socketTimeout<span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>
      connectionTimeout<span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>
      logger<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      debug<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>transporter <span class="token operator">=</span> <span class="token function">createTransport</span><span class="token punctuation">(</span>smtpConfig<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mailer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>单例是指只需实例化一次就可以全局访问的类。单例可以在整个应用程序中共享，这使得单例非常适合管理应用程序中的全局状态。</p>
<p>比如一个邮件应用，可以使用单例模式来共享一个 <code>EmailClient</code> 对象。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">EmailClient</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> transporter<span class="token operator">:</span> Transporter
  <span class="token keyword">private</span> <span class="token keyword">static</span> instance<span class="token operator">:</span> Mailer

  <span class="token comment">// 使用 nodemailer 配置，发送邮件</span>
  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> smtpConfig<span class="token operator">:</span> SMTPTransport<span class="token punctuation">.</span>Options <span class="token operator">=</span> <span class="token punctuation">{</span>
      host<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token constant">NODEMAILER_HOST</span><span class="token punctuation">,</span>
      port<span class="token operator">:</span> <span class="token number">465</span><span class="token punctuation">,</span>
      secure<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      auth<span class="token operator">:</span> <span class="token punctuation">{</span>
        user<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token constant">NODEMAILER_AUTH_USER</span><span class="token punctuation">,</span>
        pass<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token constant">NODEMAILER_AUTH_PASS</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      socketTimeout<span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>
      connectionTimeout<span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>
      logger<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      debug<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>transporter <span class="token operator">=</span> <span class="token function">createTransport</span><span class="token punctuation">(</span>smtpConfig<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mailer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这里构造函数为 <code>private</code>，因此无法在外部创建 <code>EmailClient</code> 对象，但可以通过 <code>getInstance</code> 方法获取单例对象。</p>
<p>如果使用 js 创建对象，由于 js 无 <code>private</code> 修饰符，可以在 <code>constructor</code> 中使用  判断是否为 <code>EmailClient</code> 类，如果是则抛出错误。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">EmailClient</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">===</span> EmailClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Cannot instantiate EmailClient directly'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这样，一个 <code>EmailClient</code> 对象只能通过 <code>getInstance</code> 方法获取，而且只会在初始化时创建一次，不会大量地创建多个 <code>EmailClient</code> 对象，防止大量连接邮件服务造成性能问题。</p>
]]></content>
    <author>
      <name>patterns</name>
    </author>
    <category term="reading"/>
    <contributor>
      <name>patterns</name>
    </contributor>
    <published>2024-10-28T00:00:00.000Z</published>
    <rights>Copyright by patterns</rights>
  </entry>
  <entry>
    <title type="text">Provider 模式</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/patterns/react/01-provider-pattern.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/patterns/react/01-provider-pattern.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>Provider 解决了多层嵌套组件中 <code>props</code> 传递的问题。</p>
<h2>基础使用</h2>
<p>react 提供了 <code>createContext</code> 方法来创建上下文，可以方便的在多层嵌套组件中共享数据。</p>
<p><code>Provider</code> 需要传递一个 <code>value</code> 参数，代表需要共享的数据。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> DataContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SideBar</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Content</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">DataContext.Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>Provider 解决了多层嵌套组件中 <code>props</code> 传递的问题。</p>
<h2>基础使用</h2>
<p>react 提供了 <code>createContext</code> 方法来创建上下文，可以方便的在多层嵌套组件中共享数据。</p>
<p><code>Provider</code> 需要传递一个 <code>value</code> 参数，代表需要共享的数据。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> DataContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SideBar</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Content</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">DataContext.Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在嵌套组件中，可以使用 <code>useContext</code> 获取 <code>value</code> 参数。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> DataContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SideBar</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Content</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">SideBar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">List</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token keyword">const</span> <span class="token function-variable function">List</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ListItem</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token keyword">const</span> <span class="token function-variable function">Content</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Block</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>


<span class="token keyword">function</span> <span class="token function">ListItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useContext</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>listItem<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useContext</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useContext</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>hooks</h2>
<p>一般来说，并不直接在嵌套组件使用 <code>useContext</code>，而是将其封装成一个 hooks。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useDataContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">)</span>

  <span class="token comment">// 安全起见，可以在这里做一些检查</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'useDataContext must be used within a DataContextProvider'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> data
<span class="token punctuation">}</span>
</code></pre></div><p>接下来在组件中，可以使用 <code>useDataContext</code> 获取 <code>value</code> 参数。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">useDataContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content>
    <author>
      <name>patterns</name>
    </author>
    <category term="reading"/>
    <contributor>
      <name>patterns</name>
    </contributor>
    <published>2024-10-15T00:00:00.000Z</published>
    <rights>Copyright by patterns</rights>
  </entry>
  <entry>
    <title type="text">原型模式</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/09-prototype-pattern.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/09-prototype-pattern.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>详见 。</p>
]]></summary>
    <content type="html"><![CDATA[<p>详见 。</p>
]]></content>
    <author>
      <name>patterns</name>
    </author>
    <category term="reading"/>
    <contributor>
      <name>patterns</name>
    </contributor>
    <published>2024-10-15T00:00:00.000Z</published>
    <rights>Copyright by patterns</rights>
  </entry>
  <entry>
    <title type="text">Turso 集成 Prisma</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/practice/001-integrate-turso-prisma.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/practice/001-integrate-turso-prisma.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>在现代应用开发中，数据库和 ORM（对象关系映射）工具的选择对项目的开发效率和数据管理至关重要。<a href="https://www.prisma.io/" target="_blank" rel="noopener noreferrer">Prisma</a> 是一款优秀的 ORM，它不仅能为你生成类型安全的数据库查询，还可以通过自动迁移管理数据库模式。而 <a href="https://docs.turso.tech/introduction" target="_blank" rel="noopener noreferrer">Turso</a> 是一种基于 libSQL 的托管云数据库，提供了生产环境级别的 SQLite 数据库。本文将介绍如何将 Turso 和 Prisma 结合使用，帮助你快速集成并管理数据库。</p>]]></summary>
    <content type="html"><![CDATA[<p>在现代应用开发中，数据库和 ORM（对象关系映射）工具的选择对项目的开发效率和数据管理至关重要。<a href="https://www.prisma.io/" target="_blank" rel="noopener noreferrer">Prisma</a> 是一款优秀的 ORM，它不仅能为你生成类型安全的数据库查询，还可以通过自动迁移管理数据库模式。而 <a href="https://docs.turso.tech/introduction" target="_blank" rel="noopener noreferrer">Turso</a> 是一种基于 libSQL 的托管云数据库，提供了生产环境级别的 SQLite 数据库。本文将介绍如何将 Turso 和 Prisma 结合使用，帮助你快速集成并管理数据库。</p>
<h2>什么是 Turso？</h2>
<p>Turso 是由 libSQL 提供的云端托管数据库服务，其核心基于 SQLite，专为生产环境设计。它保持了 SQLite 简单、轻量和快速的特点，同时通过云端托管的方式，让开发者能够在分布式的环境中使用 SQLite，且具有云数据库的优势，例如多点访问、强大性能和易于集成。</p>
<p>Turso 的特点：</p>
<ul>
<li>基于 libSQL：提供了生产级的 SQLite 数据库。</li>
<li>分布式存储：适用于多区域、多地的应用程序。</li>
<li>轻量易用：你可以像使用本地 SQLite 数据库一样去使用它。</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>重点是能够免费使用。</p>
</div>
<h2>什么是 Prisma？</h2>
<p>Prisma 是一个现代的 ORM 工具，旨在简化数据库交互。它通过提供类型安全的数据库查询接口，使得开发者能够在使用数据库时避免常见的错误。Prisma 的一些核心功能包括数据库迁移管理、自动生成的查询 API 和直观的数据库模式定义文件（<code>schema.prisma</code>）。</p>
<p>Prisma 的特点：</p>
<ul>
<li>类型安全：Prisma 生成的客户端代码是类型安全的，能在开发阶段捕获错误。</li>
<li>直观的 Schema 定义：使用 <code>.prisma</code> 文件定义数据库模型。</li>
<li>数据库迁移：提供了数据库迁移工具，能够自动化管理数据库版本。</li>
</ul>
<h2>集成 Turso 和 Prisma</h2>
<p>接下来将逐步介绍如何将 Turso 和 Prisma 集成在一起。主要的步骤包括安装工具、设置数据库连接、生成模型、进行数据库迁移并应用更改。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>从 Prisma ORM 5.4.2 及更高版本开始，Turso 可获得早期访问支持。</p>
</div>
<h3>安装 Turso CLI 和 Prisma CLI</h3>
<p>首先，我们需要安装 Turso CLI 以便管理和访问 Turso 数据库，并且需要安装 Prisma CLI 以便生成客户端和管理数据库迁移。</p>
<p>安装 Prisma CLI：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> prisma --save-dev
</code></pre></div><p><a href="https://docs.turso.tech/cli/introduction" target="_blank" rel="noopener noreferrer">安装 Turso CLI</a>，以 macOS 为例：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> tursodatabase/tap/turso
</code></pre></div><p>安装完成后，通过 <code>turso auth login</code> 登录你的 Turso 帐户。</p>
<h3>创建 Turso 数据库</h3>
<p>使用以下命令创建一个新的 Turso 数据库：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>turso db create my-database
</code></pre></div><p>获取数据库 URL：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>turso db show <span class="token parameter variable">--url</span> my-database
</code></pre></div><p>获取数据库访问 token：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>turso db tokens create my-database
</code></pre></div><h3>配置 Prisma 数据源</h3>
<p>初始化 Prisma 数据源：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma init
</code></pre></div><p>这会生成 <code>prisma/schema.prisma</code> 文件及 <code>.env</code> 文件，其中包含 Prisma 数据源定义。</p>
<p><code>.env</code> 文件：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">TURSO_URL</span><span class="token operator">=</span><span class="token operator">&lt;</span>your-turso-database-url<span class="token operator">&gt;</span>
<span class="token assign-left variable">TURSO_AUTH_TOKEN</span><span class="token operator">=</span><span class="token operator">&lt;</span>your-turso-auth-token<span class="token operator">&gt;</span>
</code></pre></div><p>需要启用 <code>driverAdapters</code> 特性：</p>
<div class="language-prisma" data-ext="prisma" data-title="prisma"><pre class="language-prisma"><code>generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}
</code></pre></div><p>生成 Prisma 客户端，它可以让你通过代码与数据库交互。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma generate
</code></pre></div><h3>同步数据库</h3>
<p>在本地开发环境下，我们首先需要同步数据库。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>若无需同步数据库，可以跳过这一步。</p>
</div>
<p>首先登陆到 Turso 数据库：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>turso db shell my-database
</code></pre></div><p>导出当前数据库 SQL 数据：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>.schema
</code></pre></div><p>然后将 SQL 应用到本地数据库：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sqlite3 dev.db <span class="token operator">&lt;</span> schema.sql
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>sqlite3</code> 是 SQLite 数据库的命令行工具，用于创建、管理和查询 SQLite 数据库。它非常轻量，适合嵌入式系统或小型应用的本地数据库操作。你可以通过 <code>sqlite3</code> 工具来执行 SQL 命令、创建数据库、插入数据、查询数据、导入和导出数据库结构等。</p>
<p>macOS 通常自带 SQLite。</p>
</div>
<p>然后将数据库结构拉入 prisma，这将从本地的 <code>dev.db</code> 文件中提取数据库模型，并自动生成 Prisma schema。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma db pull
</code></pre></div><p>生成 Prisma 客户端：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma generate
</code></pre></div><h3>迁移数据库</h3>
<p>由于 Turso 目前不支持直接使用 Prisma 进行模式迁移，所以在本地开发环境下，我们首先使用 SQLite 进行数据库迁移。</p>
<p>生成迁移文件：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma migrate dev <span class="token parameter variable">--name</span> init
</code></pre></div><p>这条命令做了三件事：</p>
<ol>
<li>在 <code>prisma/migrations</code> 目录中为这次迁移创建了一个新的 SQL 迁移文件。</li>
<li>针对数据库执行 SQL 迁移文件。</li>
<li>运行 <code>prisma generate</code>（安装 <code>@prisma/client</code> 软件包，并根据你的模型生成定制的 Prisma 客户端 API）。</li>
</ol>
<p>推送迁移到远端 turso 数据库：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>turso db shell my-database <span class="token operator">&lt;</span> ./prisma/migrations/20240923125341_init/migration.sql
</code></pre></div><h3>数据库操作</h3>
<p>为 libSQL 安装 libSQL 数据库客户端和 Prisma ORM 驱动程序适配器：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @libsql/client @prisma/adapter-libsql
</code></pre></div><p>更新数据库访问实例：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@prisma/client'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaLibSQL <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@prisma/adapter-libsql'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@libsql/client'</span>

<span class="token keyword">const</span> libsql <span class="token operator">=</span> <span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TURSO_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
  authToken<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TURSO_AUTH_TOKEN</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrismaLibSQL</span><span class="token punctuation">(</span>libsql<span class="token punctuation">)</span>
<span class="token keyword">const</span> prisma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrismaClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span> adapter <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> prisma
</code></pre></div><h2>结论</h2>
<p>集成 Turso 和 Prisma 可以让你在分布式云环境中享受 SQLite 的性能优势，同时利用 Prisma 的 ORM 功能管理数据库模型和查询。</p>
<p>但由于 Turso 目前对 Prisma 的支持有限，你需要手动将迁移文件应用到远程数据库。通过这种方式，你可以将本地开发环境与生产环境有效分离，保持高效的开发流程。</p>
]]></content>
    <category term="practice"/>
    <published>2024-09-24T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">观察者模式</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/08-observer-pattern.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/08-observer-pattern.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>观察者模式（Observer Pattern）是一种行为设计模式，用于创建一种对象之间的「一对多」关系，使得当一个对象的状态发生变化时，所有依赖于它的对象都能得到通知并自动更新。这个模式非常适合用来实现事件系统或数据绑定功能。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240920125941.png" alt="观察者模式" tabindex="0" loading="lazy"><figcaption>观察者模式</figcaption></figure>]]></summary>
    <content type="html"><![CDATA[<p>观察者模式（Observer Pattern）是一种行为设计模式，用于创建一种对象之间的「一对多」关系，使得当一个对象的状态发生变化时，所有依赖于它的对象都能得到通知并自动更新。这个模式非常适合用来实现事件系统或数据绑定功能。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240920125941.png" alt="观察者模式" tabindex="0" loading="lazy"><figcaption>观察者模式</figcaption></figure>
<h2>函数版本</h2>
<p>函数式观察者模式的主要组成部分：</p>
<ul>
<li><code>observers</code>：在发生特定事件时会收到通知的观察者数组</li>
<li><code>subscribe()</code>：向观察者列表添加观察者的方法</li>
<li><code>unsubscribe()</code>：从观察者列表移除观察者的方法</li>
<li><code>notify()</code>：在发生特定事件时通知所有观察者的方法</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Observable</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> observer <span class="token operator">!==</span> func<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">observer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>让我们用这个可观察对象构建一些东西。 我们有一个非常基本的应用程序，它只由两个组件组成：一个按钮和一个开关。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ToastContainer<span class="token punctuation">,</span> toast <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-toastify'</span>

<span class="token keyword">function</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">toastify</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FormControlLabel</span></span> <span class="token attr-name">control</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ToastContainer</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我们希望跟踪用户与应用程序的交互。每当用户点击按钮或拨动开关时，我们都要记录这一事件并加上时间戳。除了记录，我们还想创建一个 toast 通知，在事件发生时显示！</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ToastContainer<span class="token punctuation">,</span> toast <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-toastify'</span>

<span class="token keyword">function</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">toastify</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span>
observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>toastify<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    observable<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">'User clicked button!'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">handleToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    observable<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">'User toggled switch!'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Click me!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FormControlLabel</span></span> <span class="token attr-name">control</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ToastContainer</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>整个流程：<code>handleClick</code> 和 <code>handleToggle</code> 用数据调用了观察者的 <code>notify</code> 方法，然后观察者通知了订阅者：本例中是 <code>logger</code> 和 <code>toastify</code> 函数。</p>
<p>虽然我们可以在很多方面使用观察者模式，但它在处理异步、基于事件的数据时非常有用。也许你想让某些组件在某些数据下载完成时收到通知，或者当用户向留言板发送新消息时，所有其他成员都应收到通知。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>使用观察者模式是执行关注点分离和单一响应原则的好方法。观察者对象与可观察对象并不紧密耦合，而且可以随时（解除）耦合。可观察对象负责监控事件，而观察者只需处理接收到的数据。</p>
</div>
<h2>传统版本</h2>
<p>上述版本中，使用了一个函数式的观察者设计。在这个实现中，观察者被设计为函数 <code>func</code>，通过调用 <code>subscribe</code> 方法，观察者可以订阅主题；<code>notify</code> 方法会遍历所有订阅的函数并调用它们来通知观察者。</p>
<p>在传统的观察者模式中，观察者通常是一个对象，且必须实现一个统一的接口或方法（如 <code>update()</code>）。而在上述例子中，观察者就是普通的函数，这样简化了设计，不需要创建专门的观察者类。</p>
<ul>
<li>主题（Subject）：也称为被观察者。主题对象持有对观察者对象的引用，并在自身状态变化时通知所有注册的观察者。</li>
<li>观察者（Observer）：观察者对象在被通知时更新自己或执行相关动作。</li>
<li>具体主题（Concrete Subject）：实现主题接口，维护观察者列表，并在状态变化时通知所有观察者。</li>
<li>具体观察者（Concrete Observer）：实现观察者接口，定义响应主题状态变化的具体操作。</li>
</ul>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 主题（可观察者）类</span>
<span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> observers<span class="token operator">:</span> Observer<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token comment">// 添加观察者</span>
  <span class="token function">addObserver</span><span class="token punctuation">(</span>observer<span class="token operator">:</span> Observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 移除观察者</span>
  <span class="token function">removeObserver</span><span class="token punctuation">(</span>observer<span class="token operator">:</span> Observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obs<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> obs <span class="token operator">!==</span> observer<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 通知所有观察者</span>
  <span class="token function">notifyObservers</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 观察者抽象类</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
  <span class="token comment">// 定义一个抽象方法，子类必须实现</span>
  <span class="token keyword">abstract</span> <span class="token function">update</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteObserver</span> <span class="token keyword">extends</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
  <span class="token function">update</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer received data:'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用观察者模式</span>
<span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> observer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> observer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

subject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>observer1<span class="token punctuation">)</span>
subject<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>observer2<span class="token punctuation">)</span>

subject<span class="token punctuation">.</span><span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token string">'Hello Observers!'</span><span class="token punctuation">)</span>
<span class="token comment">// 输出:</span>
<span class="token comment">// Received data: Hello Observers!</span>
<span class="token comment">// Received data: Hello Observers!</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在 React 等组件化框架中，使用函数式的简易观察者模式通常更方便、更直观。特别是结合 React 的钩子（如 <code>useState</code> 和 <code>useEffect</code>），可以非常轻松地实现类似观察者模式的效果，而不必依赖复杂的类继承结构。</p>
</div>
<h2>扩展</h2>
<p>在观察者模式的经典定义中：</p>
<ul>
<li>参与者：观察者（Observer）和被观察者（Subject）。</li>
<li>结构：在观察者模式中，观察者直接订阅主题（被观察者），主题有状态变化时，主动通知所有的观察者。观察者通过注册到主题中，接收事件通知。</li>
<li>特点：
<ul>
<li>观察者和主题是紧耦合的：主题知道谁订阅了自己，通知时直接调用观察者的方法。</li>
<li>观察者知道主题的存在，彼此之间有依赖。</li>
<li>通常用于单一事件源，比如 UI 事件监听。</li>
</ul>
</li>
</ul>
<p>但在之前的例子中，都是主动调用了 <code>notifyObservers</code>，这看起来更像是直接的事件触发，而不是主题状态的变化引起的自动通知。</p>
<p>观察者模式结构如下：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240920124553.png" alt="模式结构" tabindex="0" loading="lazy"><figcaption>模式结构</figcaption></figure>
<p>下面来看一个具体的例子：</p>
<ul>
<li>观察者（<code>LoggingListener</code> 和 <code>EmailAlertsListener</code>）直接订阅主题（<code>Editor</code>）。</li>
<li>当 <code>Editor</code> 状态发生变化时，它主动通知所有订阅了该事件的观察者。</li>
<li>观察者通过 <code>EventManager</code> 进行管理，但它们仍然直接与 <code>Editor</code> 交互。</li>
<li><code>EventManager</code> 仅仅是辅助类，用于简化管理订阅和通知的逻辑。</li>
<li>观察者可以只关心主题的某个事件类型（<code>open</code> 和 <code>save</code>）的状态变化。</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240920124501.png" alt="将对象中发生的事件通知给其他对象" tabindex="0" loading="lazy"><figcaption>将对象中发生的事件通知给其他对象</figcaption></figure>

]]></content>
    <author>
      <name>patterns</name>
    </author>
    <category term="reading"/>
    <contributor>
      <name>patterns</name>
    </contributor>
    <published>2024-09-20T00:00:00.000Z</published>
    <rights>Copyright by patterns</rights>
  </entry>
  <entry>
    <title type="text">模块模式</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/07-module-pattern.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/07-module-pattern.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>随着应用程序和代码库的增长，保持代码的可维护性和分离性变得越来越重要。模块模式可以将代码分割成更小的、可重复使用的片段。</p>
<p>除了可以将代码分割成更小的、可重复使用的片段外，模块还可以将文件中的某些值保持私有。默认情况下，模块中的声明会被作用域（封装）到该模块。如果我们没有明确导出某个值，那么该值在该模块之外就不可用。这就降低了代码库其他部分声明的值发生名称冲突的风险，因为这些值在全局范围内不可用。</p>
<p>更详细的内容可以见 。</p>
]]></summary>
    <content type="html"><![CDATA[<p>随着应用程序和代码库的增长，保持代码的可维护性和分离性变得越来越重要。模块模式可以将代码分割成更小的、可重复使用的片段。</p>
<p>除了可以将代码分割成更小的、可重复使用的片段外，模块还可以将文件中的某些值保持私有。默认情况下，模块中的声明会被作用域（封装）到该模块。如果我们没有明确导出某个值，那么该值在该模块之外就不可用。这就降低了代码库其他部分声明的值发生名称冲突的风险，因为这些值在全局范围内不可用。</p>
<p>更详细的内容可以见 。</p>
]]></content>
    <author>
      <name>patterns</name>
    </author>
    <category term="reading"/>
    <contributor>
      <name>patterns</name>
    </contributor>
    <published>2024-09-19T00:00:00.000Z</published>
    <rights>Copyright by patterns</rights>
  </entry>
  <entry>
    <title type="text">混入模式</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/06-mixin-pattern.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/06-mixin-pattern.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>混入模式</h2>
<p><code>mixin</code> 是一种对象，我们可以使用它为另一个对象或类添加可重复使用的功能，而无需使用继承。我们不能单独使用 mixins：mixins 的唯一目的是在不使用继承的情况下为对象或类添加功能。</p>
<p>假设我们的应用程序需要创建多条狗。然而，我们创建的基本狗没有任何属性，只有一个名称属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>混入模式</h2>
<p><code>mixin</code> 是一种对象，我们可以使用它为另一个对象或类添加可重复使用的功能，而无需使用继承。我们不能单独使用 mixins：mixins 的唯一目的是在不使用继承的情况下为对象或类添加功能。</p>
<p>假设我们的应用程序需要创建多条狗。然而，我们创建的基本狗没有任何属性，只有一个名称属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>狗不应该只有名字。它应该会 <code>bark</code>、<code>wagTail</code> 和 <code>play</code>！ 我们可以创建一个 mixin，而不是直接将其添加到 <code>Dog</code> 中。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> dogFunctionality <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">bark</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Woof!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">wagTail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Wagging my tail!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">play</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Playing!'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我们可以使用 <code>Object.assign</code> 方法将 <code>dogFunctionality</code> 混合元素添加到 <code>Dog</code> 原型中。通过该方法，我们可以向目标对象添加属性：本例中为 <code>Dog.prototype</code>。<code>Dog</code> 的每个新实例都可以访问 <code>dogFunctionality</code> 的属性，因为它们都被添加到了 <code>Dog</code> 的原型中！</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dogFunctionality <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">bark</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Woof!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">wagTail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Wagging my tail!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">play</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Playing!'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> dogFunctionality<span class="token punctuation">)</span>

<span class="token keyword">const</span> pet1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Daisy'</span><span class="token punctuation">)</span>

pet1<span class="token punctuation">.</span>name <span class="token comment">// Daisy</span>
pet1<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Woof!</span>
pet1<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Playing!</span>
</code></pre></div><p>虽然我们可以在不使用继承的情况下使用 mixin 添加功能，但 mixin 本身也可以使用继承！大多数哺乳动物（除了海豚，也许还有其他动物）都会走路和睡觉。狗是哺乳动物，应该会走路和睡觉！</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> animalFunctionality <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">walk</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Walking!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sleep</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Sleeping!'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>我们可以使用 <code>Object.assign</code> 将这些属性添加到 <code>dogFunctionality</code> 原型中。在本例中，目标对象是 <code>dogFunctionality</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> animalFunctionality <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">walk</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Walking!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sleep</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Sleeping!'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dogFunctionality <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">bark</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Woof!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">wagTail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Wagging my tail!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">play</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Playing!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>dogFunctionality<span class="token punctuation">,</span> animalFunctionality<span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> dogFunctionality<span class="token punctuation">)</span>
</code></pre></div><p>在现实世界中，浏览器环境中的 <code>Window</code> 就是一个 mixin 的例子。 <code>Window</code> 对象从 <code>WindowOrWorkerGlobalScope</code> 和 <code>WindowEventHandlers</code> mixins 中实现了许多属性，这使我们可以访问 <code>setTimeout</code> 和 <code>setInterval</code>、<code>indexedDB</code> 和 <code>isSecureContext</code> 等属性。</p>
<p>由于它是一个 mixin，因此只能用于为对象添加功能，您将无法创建 <code>WindowOrWorkerGlobalScope</code> 类型的对象。</p>

<h2>总结</h2>
<p>在引入 ES6 类之前，mixins 通常用于为 React 组件添加功能。 React 团队不鼓励使用 mixins，因为它很容易给组件增加不必要的复杂性，使其难以维护和重用。React 团队鼓励使用高阶组件，现在这些组件通常可以被 Hooks 代替。</p>
<p>混入模式看起来和继承非常类似，但是有一点区别：</p>
<ul>
<li>继承：继承通常是在类定义时确定的，子类会继承父类的所有方法和属性，并且可以覆盖或扩展它们。</li>
<li>混入：混入是动态的、灵活的，你可以在对象或类实例创建后将某些行为混入，而不必在定义时就确定继承关系。混入只是通过组合而不是创建严格的继承链。</li>
</ul>
<p>因此上面的实现仍然是混入模式。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>虽然你修改了原型，但混入模式的本质是将多个功能组合到一个类或对象中，而不强制遵循严格的继承层次结构。因此，它依然可以被认为是混入模式。</p>
</div>
<p>如果不想直接修改原型，可以选择实例级别的混入：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dogFunctionality <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">bark</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Woof!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">wagTail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Wagging my tail!'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">play</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Playing!'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> pet1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Daisy'</span><span class="token punctuation">)</span>

<span class="token comment">// 仅将功能混入特定实例，而不是修改原型</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>pet1<span class="token punctuation">,</span> dogFunctionality<span class="token punctuation">)</span>

pet1<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Woof!</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>通过向对象的原型注入功能，mixins 可以让我们在没有继承的情况下为对象轻松添加功能。修改对象的原型被认为是一种不好的做法，因为这会导致原型污染和函数来源的不确定性。</p>
</div>
]]></content>
    <author>
      <name>patterns</name>
    </author>
    <category term="reading"/>
    <contributor>
      <name>patterns</name>
    </contributor>
    <published>2024-09-19T00:00:00.000Z</published>
    <rights>Copyright by patterns</rights>
  </entry>
  <entry>
    <title type="text">中间件模式</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/05-middleware-pattern.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/05-middleware-pattern.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>中间件模式</h2>
<p>中间件模式是一种行为设计模式， 允许你将请求沿着处理者链进行发送。收到请求后，每个处理者均可对请求进行处理，或将其传递给链上的下个处理者。</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>Express 就使用了中间件模式处理请求。中间件模式是 Express 核心架构的一部分，它允许你在处理请求的过程中，通过一系列中间件函数来对请求和响应对象进行操作。中间件在请求-响应生命周期中充当「处理链」中的一个节点，既可以终止请求（发送响应），也可以将请求传递给下一个中间件。</p>
</div>]]></summary>
    <content type="html"><![CDATA[<h2>中间件模式</h2>
<p>中间件模式是一种行为设计模式， 允许你将请求沿着处理者链进行发送。收到请求后，每个处理者均可对请求进行处理，或将其传递给链上的下个处理者。</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>Express 就使用了中间件模式处理请求。中间件模式是 Express 核心架构的一部分，它允许你在处理请求的过程中，通过一系列中间件函数来对请求和响应对象进行操作。中间件在请求-响应生命周期中充当「处理链」中的一个节点，既可以终止请求（发送响应），也可以将请求传递给下一个中间件。</p>
</div>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">middleware</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 执行某些逻辑</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用 next() 将请求传递给下一个中间件</span>
<span class="token punctuation">}</span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240918173949.png" alt="20240918173949" tabindex="0" loading="lazy"><figcaption>20240918173949</figcaption></figure>
<h2>Express 中间件</h2>
<p>Express 通过 <code>app.use()</code> 来定义中间件，并作用于整个应用程序的请求处理过程。例如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Request received at:'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 继续到下一个中间件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>简单的中间件实现</h2>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MiddlewareManager</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> readonly middlewares<span class="token operator">:</span> Middleware<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>middlewares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">func</span><span class="token operator">:</span> Middleware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>middlewares<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">req</span><span class="token operator">:</span> CustomIncomingMessage<span class="token punctuation">,</span> <span class="token literal-property property">res</span><span class="token operator">:</span> ServerResponse</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">runner</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">index</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> middleware <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>middlewares<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>middleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">middleware</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">runner</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">runner</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content>
    <author>
      <name>patterns</name>
    </author>
    <category term="reading"/>
    <contributor>
      <name>patterns</name>
    </contributor>
    <published>2024-09-18T00:00:00.000Z</published>
    <rights>Copyright by patterns</rights>
  </entry>
  <entry>
    <title type="text">中介者模式</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/04-mediator-pattern.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/04-mediator-pattern.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>中介者模式使组件之间通过一个中心点（调解器）进行交互成为可能。它允许组件接收请求并将其发送出去，而不是彼此直接对话！在 JavaScript 中，中介者通常只是一个对象字面或函数。</p>
<p>你可以把这种模式比作空中交通管制员和飞行员之间的关系。飞行员与空中交通管制员之间的对话可能会导致混乱，而不是让飞行员直接对话。空中交通管制员确保所有飞机都能收到所需的信息，以便安全飞行，不撞击其他飞机。</p>
<p>虽然我们不希望在 JavaScript 中控制飞机，但我们经常需要处理对象之间的多向数据。如果组件数量较多，组件之间的通信可能会变得相当混乱。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240918170836.png" alt="20240918170836" tabindex="0" loading="lazy"><figcaption>20240918170836</figcaption></figure>]]></summary>
    <content type="html"><![CDATA[<p>中介者模式使组件之间通过一个中心点（调解器）进行交互成为可能。它允许组件接收请求并将其发送出去，而不是彼此直接对话！在 JavaScript 中，中介者通常只是一个对象字面或函数。</p>
<p>你可以把这种模式比作空中交通管制员和飞行员之间的关系。飞行员与空中交通管制员之间的对话可能会导致混乱，而不是让飞行员直接对话。空中交通管制员确保所有飞机都能收到所需的信息，以便安全飞行，不撞击其他飞机。</p>
<p>虽然我们不希望在 JavaScript 中控制飞机，但我们经常需要处理对象之间的多向数据。如果组件数量较多，组件之间的通信可能会变得相当混乱。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240918170836.png" alt="20240918170836" tabindex="0" loading="lazy"><figcaption>20240918170836</figcaption></figure>
<p>与让每个对象直接与其他对象对话从而形成多对多的关系不同，对象的请求由调解器处理。调解器处理请求，并将其发送到需要的地方。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240918170920.png" alt="20240918170920" tabindex="0" loading="lazy"><figcaption>20240918170920</figcaption></figure>
<p>聊天室就是中间件模式的一个很好的用例！聊天室中的用户不会直接对话。聊天室只是用户之间的中介。</p>

<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>组件的封装也使用了中介者模式，子组件抛出事件在父组件中集中处理。</p>
</div>
]]></content>
    <author>
      <name>patterns</name>
    </author>
    <category term="reading"/>
    <contributor>
      <name>patterns</name>
    </contributor>
    <published>2024-09-18T00:00:00.000Z</published>
    <rights>Copyright by patterns</rights>
  </entry>
  <entry>
    <title type="text">享元模式</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/03-flyweight-pattern.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/patterns/vanilla/03-flyweight-pattern.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>享元模式</h2>
<p>当我们创建大量对象时，我们可以使用享元模式来减少内存使用。</p>
<p>在我们的应用程序中，我们希望用户能够添加书籍。所有书籍都有 <code>title</code>、<code>author</code> 和 <code>isbn</code>！然而，一个图书馆通常不会只有一本书：它通常有同一本书的多本副本。</p>
<p>如果有多本完全相同的书，每次创建一个新的图书实例并不是很有用。相反，我们希望创建多个 <code>Book</code> 构造函数实例，代表一本书。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> isbn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title
    <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author
    <span class="token keyword">this</span><span class="token punctuation">.</span>isbn <span class="token operator">=</span> isbn
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>享元模式</h2>
<p>当我们创建大量对象时，我们可以使用享元模式来减少内存使用。</p>
<p>在我们的应用程序中，我们希望用户能够添加书籍。所有书籍都有 <code>title</code>、<code>author</code> 和 <code>isbn</code>！然而，一个图书馆通常不会只有一本书：它通常有同一本书的多本副本。</p>
<p>如果有多本完全相同的书，每次创建一个新的图书实例并不是很有用。相反，我们希望创建多个 <code>Book</code> 构造函数实例，代表一本书。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> isbn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title
    <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author
    <span class="token keyword">this</span><span class="token punctuation">.</span>isbn <span class="token operator">=</span> isbn
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果一本书有相同的 ISBN 编号，因此是完全相同的图书类型，我们就不想创建一个全新的图书实例。相反，我们应该首先检查这本书是否已经存在。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">createBook</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> isbn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> existingBook <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>isbn<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>existingBook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> books<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>isbn<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果它尚未包含图书的 ISBN 编号，我们将创建一本新书，并将其 ISBN 编号添加到 <code>isbnNumbers</code> 集合中。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createBook</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> isbn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> existingBook <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>isbn<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>existingBook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> books<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>isbn<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> isbn<span class="token punctuation">)</span>
  books<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>isbn<span class="token punctuation">,</span> book<span class="token punctuation">)</span>

  <span class="token keyword">return</span> book
<span class="token punctuation">}</span>
</code></pre></div><p><code>createBook</code> 函数可以帮助我们创建一种图书的新实例。然而，图书馆通常包含同一本书的多个副本！让我们创建一个 <code>addBook</code> 函数，它允许我们添加同一本书的多个副本。它应该调用 <code>createBook</code> 函数，该函数要么返回一个新创建的图书实例，要么返回已经存在的实例。</p>
<p>为了记录副本总数，我们创建一个 <code>bookList</code> 数组，其中包含图书馆中的图书总数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bookList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> <span class="token function-variable function">addBook</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> isbn<span class="token punctuation">,</span> availability<span class="token punctuation">,</span> sales</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token function">createBook</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> isbn<span class="token punctuation">)</span><span class="token punctuation">,</span>
    sales<span class="token punctuation">,</span>
    availability<span class="token punctuation">,</span>
    isbn
  <span class="token punctuation">}</span>

  bookList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span>
  <span class="token keyword">return</span> book
<span class="token punctuation">}</span>
</code></pre></div><p>完美！我们不必每次添加副本时都创建一个新的图书实例，而是可以有效地为特定副本使用已有的图书实例。让我们创建 3 本书的 5 个副本：《哈利-波特》、《杀死一只知更鸟》和《了不起的盖茨比》。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">addBook</span><span class="token punctuation">(</span><span class="token string">'Harry Potter'</span><span class="token punctuation">,</span> <span class="token string">'JK Rowling'</span><span class="token punctuation">,</span> <span class="token string">'AB123'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token function">addBook</span><span class="token punctuation">(</span><span class="token string">'Harry Potter'</span><span class="token punctuation">,</span> <span class="token string">'JK Rowling'</span><span class="token punctuation">,</span> <span class="token string">'AB123'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
<span class="token function">addBook</span><span class="token punctuation">(</span><span class="token string">'To Kill a Mockingbird'</span><span class="token punctuation">,</span> <span class="token string">'Harper Lee'</span><span class="token punctuation">,</span> <span class="token string">'CD345'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token function">addBook</span><span class="token punctuation">(</span><span class="token string">'To Kill a Mockingbird'</span><span class="token punctuation">,</span> <span class="token string">'Harper Lee'</span><span class="token punctuation">,</span> <span class="token string">'CD345'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token function">addBook</span><span class="token punctuation">(</span><span class="token string">'The Great Gatsby'</span><span class="token punctuation">,</span> <span class="token string">'F. Scott Fitzgerald'</span><span class="token punctuation">,</span> <span class="token string">'EF567'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
</code></pre></div><h2>特点</h2>
<p>享元模式是一种结构型设计模式，其核心思想是通过共享已经存在的对象来减少内存占用，从而提高性能。有两个特点：</p>
<ul>
<li>对象共享：避免重复创建相同状态的对象，节省内存。</li>
<li>不可变部分与可变部分分离：将对象分为共享的、不可变的部分（如 <code>title</code>、<code>author</code> 和 <code>isbn</code>）和非共享的、可变的部分（如 <code>availability</code> 和 <code>sales</code>）。</li>
</ul>
<p>上述代码体现了这两个特点：</p>
<p><code>Book</code> 类实例化了书籍的基本信息（<code>title</code>、<code>author</code>、<code>isbn</code>），并通过 <code>Map</code> 存储，确保同样的 <code>isbn</code> 只会创建一次。这部分相当于享元对象的内部状态（不可变且可以被多个实例共享）。</p>
<p><code>addBook</code> 函数添加了一些书籍的可变信息（<code>sales</code> 和 <code>availability</code>），这些信息属于享元对象的外部状态（每次使用时可以独立指定）。</p>
<h2>优点</h2>
<ul>
<li>减少内存占用：避免了为每个新书籍对象重复创建相同的 <code>Book</code> 实例。如果书籍的 <code>isbn</code> 相同，那么不再创建新的实例，而是共享现有的对象。</li>
<li>提高性能：通过共享已有对象，减少对象的创建和销毁，特别是在大量数据处理的场景中能显著提高性能。</li>
<li>更好的管理：将不可变的数据与可变数据分开，代码逻辑更加清晰，易于维护。</li>
</ul>
<h2>适用场景</h2>
<p>在本例中，由于 <code>title</code>、<code>author</code> 和 <code>isbn</code> 都是基本数据类型（字符串），享元模式带来的优化可能会非常有限，甚至没有明显的优势，原因如下：</p>
<ul>
<li>内存优化有限：由于字符串本身是不可变且通常由引擎优化处理，JavaScript 已经会对相同的字符串进行共享存储（类似于享元模式），这意味着手动实现的享元模式在这方面并没有太大的额外好处。</li>
<li>重复实例减少不明显：与对象不同，基本类型的重复实例在内存中通常不会像对象那样占用大量空间。因此，避免创建多个基本类型的实例不会有明显的内存节省。</li>
</ul>
<p>因此，享元模式适用于有大量公共内在属性的场景，如：粒子系统，在这种情况下，每个粒子都有一些共同的属性，如颜色、精灵图等。通过享元模式，我们可以共享这些属性，从而节省内存。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>实际上享元模式是共享一些内在的公共状态，而不是共享所有的状态。</p>
<p>在 JavaScript 中，我们可以通过原型继承轻松解决这个问题。</p>
<p>在享元模式中，虽然最后创建的对象数量和之前一样多，但会大量节省内存。在本例中可能没有体现出这个好处，但是如果共享的内在状态是对象，那么享元模式就可以发挥作用。</p>
</div>
]]></content>
    <author>
      <name>patterns</name>
    </author>
    <category term="reading"/>
    <contributor>
      <name>patterns</name>
    </contributor>
    <published>2024-09-18T00:00:00.000Z</published>
    <rights>Copyright by patterns</rights>
  </entry>
  <entry>
    <title type="text">覆盖输入框 autofill 样式</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/css/018-autofill.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/css/018-autofill.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>浏览器自动填充密码会有一些默认样式：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240914171559.png" alt="autofill 默认样式" tabindex="0" loading="lazy"><figcaption>autofill 默认样式</figcaption></figure>
<h2>方法一</h2>
<p>使用 <code>-webkit-box-shadow</code> 实现覆盖：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill</span> <span class="token punctuation">{</span>
  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> 0 0 0 999px #fff inset<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>浏览器自动填充密码会有一些默认样式：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240914171559.png" alt="autofill 默认样式" tabindex="0" loading="lazy"><figcaption>autofill 默认样式</figcaption></figure>
<h2>方法一</h2>
<p>使用 <code>-webkit-box-shadow</code> 实现覆盖：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill</span> <span class="token punctuation">{</span>
  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> 0 0 0 999px #fff inset<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>但是，该方式无法设置背景透明。</p>
<h2>方法二</h2>
<p>使用动画：</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill</span> <span class="token punctuation">{</span>
  <span class="token property">-webkit-text-fill-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--white-color-1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> background-color 5000s ease-in-out 0s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>但是如果停留时间过久，也会有问题，但是目前好像没有更好的解决方法。</p>
]]></content>
    <category term="CSS"/>
    <published>2024-09-14T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">实现 loading spinner</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/css/017-loading-spinner.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/css/017-loading-spinner.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>实现一个 loading spinner 可以使用 CSS 动画和边框。</p>

]]></summary>
    <content type="html"><![CDATA[<p>实现一个 loading spinner 可以使用 CSS 动画和边框。</p>

]]></content>
    <category term="CSS"/>
    <published>2024-09-14T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">iOS 图片兼容</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/020-ios-img.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/020-ios-img.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>长按图片，弹出菜单</h2>
<p>在 iOS 中，用户可以通过长按图片来弹出菜单，可以通过以下方式阻止。</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">img</span> <span class="token punctuation">{</span>
  <span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>长按图片，弹出菜单</h2>
<p>在 iOS 中，用户可以通过长按图片来弹出菜单，可以通过以下方式阻止。</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">img</span> <span class="token punctuation">{</span>
  <span class="token property">-webkit-touch-callout</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>长按图片，拖动</h2>
<p>长按禁止拖动。</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">img</span> <span class="token punctuation">{</span>
  <span class="token property">-webkit-user-drag</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>点击出现黑色阴影</h2>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">img</span> <span class="token punctuation">{</span>
  <span class="token property">-webkit-tap-highlight-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content>
    <category term="practice"/>
    <published>2024-09-11T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">iOS 阻止 touch 事件默认行为</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/019-ios-prevent-touch.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/019-ios-prevent-touch.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>webview 开发时，iOS 中 safari 浏览器通过 <code>preventDefault</code> 方法来阻止默认行为。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">const</span> usePreventTouchEvent <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token operator">=</span> HTMLDivElement<span class="token operator">&gt;</span><span class="token punctuation">(</span>containerRef<span class="token operator">:</span> React<span class="token punctuation">.</span>RefObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> preventDefaultBehavior <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> Event<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> touchEvents<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'touchmove'</span><span class="token punctuation">]</span>

    <span class="token keyword">const</span> dragContainer <span class="token operator">=</span> containerRef<span class="token punctuation">.</span>current

    <span class="token keyword">if</span> <span class="token punctuation">(</span>dragContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      touchEvents<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>eventType<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        dragContainer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> preventDefaultBehavior<span class="token punctuation">,</span> <span class="token punctuation">{</span>
          passive<span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        touchEvents<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>eventType<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          dragContainer<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> preventDefaultBehavior<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>containerRef<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> usePreventTouchEvent
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>webview 开发时，iOS 中 safari 浏览器通过 <code>preventDefault</code> 方法来阻止默认行为。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>

<span class="token keyword">const</span> usePreventTouchEvent <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token operator">=</span> HTMLDivElement<span class="token operator">&gt;</span><span class="token punctuation">(</span>containerRef<span class="token operator">:</span> React<span class="token punctuation">.</span>RefObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> preventDefaultBehavior <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> Event<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> touchEvents<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'touchmove'</span><span class="token punctuation">]</span>

    <span class="token keyword">const</span> dragContainer <span class="token operator">=</span> containerRef<span class="token punctuation">.</span>current

    <span class="token keyword">if</span> <span class="token punctuation">(</span>dragContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      touchEvents<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>eventType<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        dragContainer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> preventDefaultBehavior<span class="token punctuation">,</span> <span class="token punctuation">{</span>
          passive<span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        touchEvents<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>eventType<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          dragContainer<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> preventDefaultBehavior<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>containerRef<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> usePreventTouchEvent
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>在 iOS 上，需要增加 <code>{ passive: false }</code> 参数，否则会导致 <code>touch</code> 事件的 <code>preventDefault()</code> 行为失效。</p>
<p>详细见：<a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#passive" target="_blank" rel="noopener noreferrer">addEventListener#passive</a>。</p>
</div>
]]></content>
    <category term="practice"/>
    <published>2024-09-11T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Maven</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/java/tool/01-maven.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/java/tool/01-maven.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>什么是 Maven</h2>
<p>Maven 是一个项目管理和构建工具，主要用于 Java 项目。它通过 POM（Project Object Model）文件来管理项目的依赖、编译、测试和打包等任务。Maven 的核心功能包括：</p>
<ul>
<li>依赖管理：通过定义 POM 文件中的依赖项，Maven 能够自动下载和配置项目所需的库。</li>
<li>构建自动化：Maven 可以自动化执行从编译、测试到打包的整个构建过程。</li>
<li>项目结构标准化：Maven 提供了约定优于配置的项目结构，减少了开发者的配置工作。</li>
</ul>
<p>类似 npm，不同的是，npm 使用 <code>package.json</code>，而 Maven 使用 <code>pom.xml</code>。</p>]]></summary>
    <content type="html"><![CDATA[<h2>什么是 Maven</h2>
<p>Maven 是一个项目管理和构建工具，主要用于 Java 项目。它通过 POM（Project Object Model）文件来管理项目的依赖、编译、测试和打包等任务。Maven 的核心功能包括：</p>
<ul>
<li>依赖管理：通过定义 POM 文件中的依赖项，Maven 能够自动下载和配置项目所需的库。</li>
<li>构建自动化：Maven 可以自动化执行从编译、测试到打包的整个构建过程。</li>
<li>项目结构标准化：Maven 提供了约定优于配置的项目结构，减少了开发者的配置工作。</li>
</ul>
<p>类似 npm，不同的是，npm 使用 <code>package.json</code>，而 Maven 使用 <code>pom.xml</code>。</p>
<p><code>package.json</code> 通常包含以下内容：</p>
<ul>
<li>依赖管理：<code>dependencies</code> 和 <code>devDependencies</code> 字段用于列出项目在运行时和开发时所需的包。</li>
<li>脚本管理：<code>scripts</code> 字段允许开发者定义各种命令，如 <code>npm start</code>、<code>npm test</code> 等，来自动化常见任务。</li>
<li>项目元数据：如项目名称、版本、描述、作者等。</li>
</ul>
<p><code>pom.xml</code> 中包含下述内容：</p>
<ul>
<li>依赖管理：<code>dependencies</code> 节点列出项目所依赖的库及其版本。</li>
<li>构建管理：<code>build</code> 节点定义了构建过程中的各种配置，包括插件的使用。</li>
<li>项目元数据：如项目的 <code>groupId</code>、<code>artifactId</code>、<code>version</code> 等。</li>
<li>生命周期管理：Maven 提供了一整套的生命周期管理机制，涵盖了项目的编译、测试、打包和部署等阶段。</li>
</ul>
<p>示例：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>my-project<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>依赖原则</h2>
<ol>
<li>依赖路径最短优先原则：</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>A -<span class="token operator">&gt;</span> B -<span class="token operator">&gt;</span> C -<span class="token operator">&gt;</span> X<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span>
A -<span class="token operator">&gt;</span> D -<span class="token operator">&gt;</span> X<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span>
</code></pre></div><p>由于 X(2.0) 路径最短，所以使用 X(2.0)。</p>
<ol start="2">
<li>声明顺序优先原则：</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>A -<span class="token operator">&gt;</span> B -<span class="token operator">&gt;</span> X<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span>
A -<span class="token operator">&gt;</span> C -<span class="token operator">&gt;</span> X<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span>
</code></pre></div><p>在 POM 中最先声明的优先，上面的两个依赖如果先声明 B，那么最后使用 X(1.0)。</p>
<ol start="3">
<li>覆写优先原则：</li>
</ol>
<p>子 POM 内声明的依赖优先于父 POM 中声明的依赖。</p>
]]></content>
    <category term="node"/>
    <published>2024-08-30T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">finalhandler</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/node/module/001-finalhandler.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/node/module/001-finalhandler.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://github.com/pillarjs/finalhandler" target="_blank" rel="noopener noreferrer">finalhandler</a> 模块在 Express.js 中用于处理未处理的请求或错误，是请求处理的最后一个步骤。它确保了当请求经过所有中间件和路由后，如果没有响应或者发生了错误，应用仍然能够正确地处理这些情况，并返回适当的 HTTP 响应。</p>
<p>具体来说，<code>finalhandler</code> 模块实现了以下功能：</p>
<h2>处理未匹配的路由</h2>
<p>当请求经过所有中间件和路由后，<code>finalhandler</code> 会检查是否已经发送了响应。如果没有，则认为请求未被处理（即未匹配到任何路由），并返回一个 404 状态码（"Not Found"）。</p>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://github.com/pillarjs/finalhandler" target="_blank" rel="noopener noreferrer">finalhandler</a> 模块在 Express.js 中用于处理未处理的请求或错误，是请求处理的最后一个步骤。它确保了当请求经过所有中间件和路由后，如果没有响应或者发生了错误，应用仍然能够正确地处理这些情况，并返回适当的 HTTP 响应。</p>
<p>具体来说，<code>finalhandler</code> 模块实现了以下功能：</p>
<h2>处理未匹配的路由</h2>
<p>当请求经过所有中间件和路由后，<code>finalhandler</code> 会检查是否已经发送了响应。如果没有，则认为请求未被处理（即未匹配到任何路由），并返回一个 404 状态码（"Not Found"）。</p>
<h2>处理未捕获的错误</h2>
<p>如果请求处理过程中抛出了错误（无论是在中间件还是在路由处理程序中），而这些错误没有被处理，那么 <code>finalhandler</code> 会捕获到这些错误，并根据错误类型返回适当的 HTTP 状态码。常见的错误处理包括返回 500 状态码（"Internal Server Error"），以及输出错误信息（在开发环境中）。</p>
<h2>处理不同的响应类型</h2>
<p><code>finalhandler</code> 会根据请求的 Accept 头信息，决定返回纯文本错误信息还是返回 HTML 格式的错误页面。</p>
<h2>日志记录</h2>
<p>在处理错误时，finalhandler 可以记录错误日志，帮助开发者排查问题。</p>
<p>简而言之，finalhandler 是 Express 应用的最后一道防线，确保所有请求都能得到适当的处理，即使发生了未预料的错误或未匹配的路由。</p>
]]></content>
    <category term="node"/>
    <published>2024-08-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">express.js</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/node/express/02-express.js.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/node/express/02-express.js.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p><code>express.js</code> 文件定义了 Express 应用的主入口。它的核心功能是创建一个新的 Express 应用实例，并暴露相关的原型和构造函数，使应用能够处理 HTTP 请求并管理中间件（<code>middleware</code>）。</p>
<h2>Hello World</h2>
<p>先看看官网的 Hello World：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p><code>express.js</code> 文件定义了 Express 应用的主入口。它的核心功能是创建一个新的 Express 应用实例，并暴露相关的原型和构造函数，使应用能够处理 HTTP 请求并管理中间件（<code>middleware</code>）。</p>
<h2>Hello World</h2>
<p>先看看官网的 Hello World：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>思考一下，<code>express()</code> <code>app.get()</code> 和 <code>app.listen()</code> 分别做了什么？</p>
<p>接下来一步步看源码，就能看出它们的作用。</p>
<h2>模块依赖</h2>
<p>引入了一些依赖模块：</p>
<ul>
<li><code>bodyParser</code>: 用于解析请求体（body）。</li>
<li><code>EventEmitter</code>: Node.js 的事件模块，使 <code>app</code> 具有事件处理能力。</li>
<li><a href="https://www.npmjs.com/package/merge-descriptors" target="_blank" rel="noopener noreferrer"><code>merge-descriptors</code></a>: 一个合并对象属性的模块，用于将多个对象的属性混入到一个对象中。</li>
<li><code>proto</code>: 从 <strong></strong> 引入的核心应用逻辑。</li>
<li><code>Route</code> 和 <code>Router</code>: 处理路由的模块。</li>
<li><code>req</code> 和 <code>res</code>: 扩展了 <code>request</code> 和 <code>response</code> 对象。</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>EventEmitter
<span class="token keyword">var</span> mixin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'merge-descriptors'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> proto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./application'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> Route <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router/route'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./request'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./response'</span><span class="token punctuation">)</span>
</code></pre></div><h2><code>createApplication()</code></h2>
<p>暴露了一个 <code>createApplication()</code> 函数，用于创建一个新的 Express 应用。</p>
<p>该函数主要创建了一个应用程序对象，该 <code>app</code> 对象首先混入了 <code>EventEmitter</code> 和 <code>proto</code>（<strong>application.js</strong> 导出的对象），并分别将 <code>request</code> 属性和 <code>response</code> 属性初始化成了 <code>req</code>（<strong>request.js</strong> 导出的对象）实例和 <code>res</code>（<strong>response.js</strong> 导出的对象）实例。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> createApplication

<span class="token keyword">function</span> <span class="token function">createApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> <span class="token function-variable function">app</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">mixin</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token function">mixin</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> proto<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>

  <span class="token comment">// expose the prototype that will get set on requests</span>
  app<span class="token punctuation">.</span>request <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> app <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// expose the prototype that will get set on responses</span>
  app<span class="token punctuation">.</span>response <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> app <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> app
<span class="token punctuation">}</span>
</code></pre></div><p>具体功能如下：</p>
<ul>
<li><code>app</code> 函数: 这是一个处理请求的函数，当请求到达时，<code>app.handle(req, res, next)</code> 会被调用来处理请求。</li>
<li><code>mixin(app, EventEmitter.prototype, false)</code>: 将 <code>EventEmitter</code> 的原型方法混入 <code>app</code>，使得 <code>app</code> 具备事件处理能力，<code>false</code> 代表不覆盖原对象属性。</li>
<li><code>mixin(app, proto, false)</code>: 将 <code>application.js</code> 中定义的核心功能混入 <code>app</code>。</li>
<li><code>app.request</code> 和 <code>app.response</code>: 创建 <code>req</code> 和 <code>res</code> 的原型对象，并绑定 <code>app</code>。</li>
<li><code>app.init()</code>: 初始化应用。</li>
</ul>
<p>调用下述代码时，实际上就相当于调用了 <code>createApplication()</code> 函数，返回一个新的 <code>app</code> 函数，它使用了  增强了一些功能（<code>proto</code> 为 <code>application.js</code> 暴露的对象），该原型提供了初始化 <code>init</code> 方法。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p><code>listen</code> 函数实际做了如下功能：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function-variable function">listen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>注意到他这里直接将 <code>app</code> 传入了 <code>http.createServer</code> 函数，该函数的签名为：<code>http.createServer([options][, requestListener])</code>，<code>requestListener</code> 函数的签名为 <code>(request, response) =&gt; void</code>。而在 <code>express.js</code> 中，<code>createApplication()</code> 中就已经声明 <code>app</code> 是 <code>requestListener</code> 类型的。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">app</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  app<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>到这里为止，我们其实已经弄清楚了 Hello World 内部的实现。</p>
<h2>暴露的接口</h2>
<p>暴露的接口如下：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 原型</span>
exports<span class="token punctuation">.</span>application <span class="token operator">=</span> proto
exports<span class="token punctuation">.</span>request <span class="token operator">=</span> req
exports<span class="token punctuation">.</span>response <span class="token operator">=</span> res

<span class="token comment">// 路由构造函数</span>
exports<span class="token punctuation">.</span>Route <span class="token operator">=</span> Route
exports<span class="token punctuation">.</span>Router <span class="token operator">=</span> Router

<span class="token comment">// 中间件</span>
exports<span class="token punctuation">.</span>json <span class="token operator">=</span> bodyParser<span class="token punctuation">.</span>json
exports<span class="token punctuation">.</span>query <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./middleware/query'</span><span class="token punctuation">)</span>
exports<span class="token punctuation">.</span>raw <span class="token operator">=</span> bodyParser<span class="token punctuation">.</span>raw
exports<span class="token punctuation">.</span>static <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'serve-static'</span><span class="token punctuation">)</span>
exports<span class="token punctuation">.</span>text <span class="token operator">=</span> bodyParser<span class="token punctuation">.</span>text
exports<span class="token punctuation">.</span>urlencoded <span class="token operator">=</span> bodyParser<span class="token punctuation">.</span>urlencoded
</code></pre></div><ul>
<li><code>application</code>, <code>request</code>, <code>response</code>: 分别暴露了应用的原型和请求、响应对象的原型，供外部使用或扩展。</li>
<li><code>Route</code>, <code>Router</code>: 暴露了路由相关的构造函数。</li>
<li><code>json</code>, <code>query</code>, <code>raw</code>, <code>static</code>, <code>text</code>, <code>urlencoded</code>: 这些是常用的 middleware，用于处理请求的各种内容。</li>
</ul>
<h2>移除的中间件</h2>
<p>Express 在较新的版本中移除了许多默认包含的中间件，用户需要手动安装这些中间件。如果用户尝试访问这些被移除的中间件，会抛出错误提示，并引导用户去手动安装。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> removedMiddlewares <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">'bodyParser'</span><span class="token punctuation">,</span>
  <span class="token string">'compress'</span><span class="token punctuation">,</span>
  <span class="token string">'cookieSession'</span><span class="token punctuation">,</span>
  <span class="token string">'session'</span><span class="token punctuation">,</span>
  <span class="token string">'logger'</span><span class="token punctuation">,</span>
  <span class="token string">'cookieParser'</span><span class="token punctuation">,</span>
  <span class="token string">'favicon'</span><span class="token punctuation">,</span>
  <span class="token string">'responseTime'</span><span class="token punctuation">,</span>
  <span class="token string">'errorHandler'</span><span class="token punctuation">,</span>
  <span class="token string">'timeout'</span><span class="token punctuation">,</span>
  <span class="token string">'methodOverride'</span><span class="token punctuation">,</span>
  <span class="token string">'vhost'</span><span class="token punctuation">,</span>
  <span class="token string">'csrf'</span><span class="token punctuation">,</span>
  <span class="token string">'directory'</span><span class="token punctuation">,</span>
  <span class="token string">'limit'</span><span class="token punctuation">,</span>
  <span class="token string">'multipart'</span><span class="token punctuation">,</span>
  <span class="token string">'staticCache'</span>
<span class="token punctuation">]</span>

removedMiddlewares<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
        <span class="token string">'Most middleware (like '</span> <span class="token operator">+</span>
          name <span class="token operator">+</span>
          <span class="token string">') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.'</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2>总结</h2>
<p><strong>express.js</strong> 文件的核心功能是创建并返回一个 Express 应用实例，并提供了一些内置的中间件和路由工具。移除的中间件部分提醒开发者需要手动安装以前版本中内置的中间件。</p>
]]></content>
    <category term="node"/>
    <published>2024-08-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">总体架构</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/node/express/01-overview-architecture.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/node/express/01-overview-architecture.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://github.com/expressjs/express" target="_blank" rel="noopener noreferrer">Express</a> 是适用于 Node.js 的极简网络应用程序框架。它为构建网络和移动应用程序提供了一套强大的功能。尽管简单，Express 却具有很强的可扩展性，允许开发人员添加中间件并自定义应用程序的行为。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>在代码解读中，贴上的源码有可能改为 TS 类型，在阅读源码时请注意。</p>
</div>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://github.com/expressjs/express" target="_blank" rel="noopener noreferrer">Express</a> 是适用于 Node.js 的极简网络应用程序框架。它为构建网络和移动应用程序提供了一套强大的功能。尽管简单，Express 却具有很强的可扩展性，允许开发人员添加中间件并自定义应用程序的行为。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>在代码解读中，贴上的源码有可能改为 TS 类型，在阅读源码时请注意。</p>
</div>
<h2>核心组件</h2>
<p>包括 <code>Application</code>、<code>Request</code>、<code>Response</code> 和 <code>Router</code>：</p>
<ul>
<li><code>Application</code>：应用程序对象，由 <code>express()</code> 创建，它代表一个 Express 应用程序，用于通过设置中间件、路由和错误处理程序来配置应用程序。</li>
<li><code>Request</code>： HTTP 请求实例，该对象封装了传入请求的所有信息，如 <code>header</code>、<code>query parameters</code>、<code>URL</code>、<code>body</code> 等。</li>
<li><code>Response</code>：HTTP 响应实例，该对象用于向客户端发回数据、设置响应 <code>header</code>、<code>cookie</code>、状态代码等。</li>
<li><code>Router</code>: 路由器对象，由 <code>express.Router()</code> 创建，一个小型 <code>Application</code>，可拥有自己的路由和中间件。它有助于将应用组织成更小的、模块化的部分。</li>
</ul>
<h2>Middleware</h2>
<p>可以访问请求（<code>req</code>）、响应（<code>res</code>）以及应用程序请求-响应循环中下一个中间件函数的函数。中间件可以执行任何代码、修改请求和响应对象、结束请求-响应循环或调用下一个中间件函数。</p>
<p>在 Express 中，有不同类型的中间件：</p>
<ul>
<li>应用程序级中间件：与 <code>Express</code> 应用程序实例绑定。</li>
<li>路由器级中间件：与 <code>express.Router()</code> 实例绑定。</li>
<li>错误处理中间件：能捕捉错误并进行处理的特殊中间件。</li>
</ul>
<p>中间件按照应用程序中定义的顺序执行。 如果中间件函数没有结束请求-响应循环（调用 <code>res.end()</code>），则必须调用 <code>next()</code> 将控制权传递给下一个中间件函数。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see <a href="https://github.com/senchalabs/connect#middleware" target="_blank" rel="noopener noreferrer">https://github.com/senchalabs/connect#middleware</a>.</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> removedMiddlewares <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">'bodyParser'</span><span class="token punctuation">,</span>
  <span class="token string">'compress'</span><span class="token punctuation">,</span>
  <span class="token string">'cookieSession'</span><span class="token punctuation">,</span>
  <span class="token string">'session'</span><span class="token punctuation">,</span>
  <span class="token string">'logger'</span><span class="token punctuation">,</span>
  <span class="token string">'cookieParser'</span><span class="token punctuation">,</span>
  <span class="token string">'favicon'</span><span class="token punctuation">,</span>
  <span class="token string">'responseTime'</span><span class="token punctuation">,</span>
  <span class="token string">'errorHandler'</span><span class="token punctuation">,</span>
  <span class="token string">'timeout'</span><span class="token punctuation">,</span>
  <span class="token string">'methodOverride'</span><span class="token punctuation">,</span>
  <span class="token string">'vhost'</span><span class="token punctuation">,</span>
  <span class="token string">'csrf'</span><span class="token punctuation">,</span>
  <span class="token string">'directory'</span><span class="token punctuation">,</span>
  <span class="token string">'limit'</span><span class="token punctuation">,</span>
  <span class="token string">'multipart'</span><span class="token punctuation">,</span>
  <span class="token string">'staticCache'</span>
<span class="token punctuation">]</span>
</code></pre></div></div>
<h2>Routing</h2>
<p>路由定义了应用程序响应客户端请求的端点（URI）。每个路由可以有多个处理程序，并支持所有 HTTP 方法（GET、POST、PUT、DELETE 等）。</p>
<p>支持自动解析 <code>query parameters</code> 和 <code>URL</code> 中的 <code>:param</code> 值。</p>
<p>简单理解为分发请求并进行相应处理。</p>
<h2>lib 源码结构</h2>
<p>Express@4.21.0 中，<code>lib</code> 目录结构如下：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>lib/
├── application.js
├── express.js
├── middleware/
│   ├── init.js
│   ├── query.js
├── request.js
├── response.js
├── router/
│   ├── index.js
│   ├── layer.js
│   ├── route.js
├── utils.js
└── view.js
</code></pre></div><ul>
<li><code>express.js</code>: 主入口文件，导出了核心的 <code>express()</code> 函数。</li>
<li><code>application.js</code>: 定义了 Express 应用的核心功能，如 <code>app.use()</code>、<code>app.get()</code> 等方法。</li>
<li><code>middleware/</code>: 包含 Express 内置的 <code>middleware</code>，例如 <code>init.js</code> 用于初始化中间件，<code>query.js</code> 用于解析查询字符串。</li>
<li><code>request.js</code>: 定义了 <code>req</code> 对象的扩展和辅助方法。</li>
<li><code>response.js</code>: 定义了 <code>res</code> 对象的扩展和辅助方法。</li>
<li><code>router/</code>: 包含与路由相关的代码，其中 <code>index.js</code> 是路由器的主模块，<code>layer.js</code> 和 <code>route.js</code> 用于处理路由层次和路径匹配。</li>
<li><code>utils.js</code>: 一些工具函数，用于简化内部实现。</li>
<li><code>view.js</code>: 处理视图渲染相关的逻辑。</li>
</ul>
<p>接下来会对每个文件进行详细分析。</p>
]]></content>
    <category term="node"/>
    <published>2024-08-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">monaco-editor/react</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/018-monaco-editor-react.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/018-monaco-editor-react.html"/>
    <updated>2024-12-03T06:25:23.000Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://github.com/microsoft/monaco-editor" target="_blank" rel="noopener noreferrer">Monaco Editor</a> 是由微软开发的开源代码编辑器，使用于 VS Code。然而他本身是用 JavaScript/TypeScript 编写的一个独立库，提供了丰富的 API 来实现代码编辑器的功能。因此无法直接在 React 中使用。</p>
<p><a href="https://github.com/suren-atoyan/monaco-react" target="_blank" rel="noopener noreferrer">@monaco-editor/react</a> 这个库是对 monaco-editor 的 React 封装，使得你在 React 项目中更方便地使用 Monaco Editor。</p>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://github.com/microsoft/monaco-editor" target="_blank" rel="noopener noreferrer">Monaco Editor</a> 是由微软开发的开源代码编辑器，使用于 VS Code。然而他本身是用 JavaScript/TypeScript 编写的一个独立库，提供了丰富的 API 来实现代码编辑器的功能。因此无法直接在 React 中使用。</p>
<p><a href="https://github.com/suren-atoyan/monaco-react" target="_blank" rel="noopener noreferrer">@monaco-editor/react</a> 这个库是对 monaco-editor 的 React 封装，使得你在 React 项目中更方便地使用 Monaco Editor。</p>
<h2>工作原理</h2>
<p>Monaco Editor (<code>monaco-editor</code>)：提供了编辑器的核心功能，包括代码高亮、自动补全、语法检查等。它是独立于框架的，可以在任何 JavaScript 环境中使用。它提供了一个全局的 monaco 对象，通过这个对象，你可以调用各种 API 来配置和操作编辑器。</p>
<p>React 封装 (<code>@monaco-editor/react</code>)： 为了更好地在 React 环境中使用 Monaco Editor，<code>@monaco-editor/react</code> 通过封装组件的方式，将 <code>monaco-editor</code> 的 API 暴露给 React 用户。这个库管理了编辑器的生命周期和状态，使得 Monaco Editor 能够很好地与 React 的组件生命周期和状态管理系统配合使用。</p>
<p>具体来说，<code>@monaco-editor/react</code> 主要做了以下几件事情：</p>
<ul>
<li>组件化封装：提供了一个 <code>Editor</code> 组件，供 React 开发者使用。你可以通过 JSX 的方式直接在 React 组件中嵌入 Monaco Editor。</li>
<li>API 接口简化：提供了一些简单的 props 来配置编辑器，而不需要直接调用 <code>monaco</code> 对象。</li>
<li>生命周期管理：处理了编辑器的创建、更新和销毁，使得它与 React 的生命周期方法（如 <code>componentDidMount</code>、<code>componentWillUnmount</code>）配合良好。</li>
</ul>
<h2>示例</h2>
<p>在 React 中使用 <code>@monaco-editor/react</code> 时，你不需要手动管理 monaco 对象的创建和销毁，只需要通过 <code>Editor</code> 组件来设置语言、主题、默认代码等配置项。比如：</p>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> Editor <span class="token keyword">from</span> <span class="token string">'@monaco-editor/react'</span>

<span class="token keyword">function</span> <span class="token function">MyEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Editor</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>90vh<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span> <span class="token attr-name">theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vs-dark<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>// Start coding here<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> MyEditor
</code></pre></div><p>如果你需要进行更复杂的定制化操作，比如加载自定义语言或主题，<code>@monaco-editor/react</code> 也提供了 <code>beforeMount</code> 和 <code>onMount</code> 回调函数，让你可以直接访问 <code>monaco</code> 对象来进行高级配置：</p>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Editor</span></span>
  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>90vh<span class="token punctuation">"</span></span>
  <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span>
  <span class="token attr-name">theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vs-dark<span class="token punctuation">"</span></span>
  <span class="token attr-name">beforeMount</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>monaco<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里可以对 monaco 进行配置，例如定义自定义的语言或主题</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">onMount</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>editor<span class="token punctuation">,</span> monaco<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里可以操作 editor 和 monaco 对象，例如注册快捷键等</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2>loader-config</h2>
<p><code>@monaco-editor/react</code> 的 loader 会默认从 cdn 中加载，这会影响中国用户的访问速度，因此需要修改 loader 的默认配置。</p>
<h3>使用 monaco-editor 包</h3>
<p>如果项目使用 <code>webpack</code> 进行打包，可以通过 <a href="https://www.npmjs.com/package/monaco-editor-webpack-plugin" target="_blank" rel="noopener noreferrer">monaco-editor-webpack-plugin</a> 来进行配置。该插件自动处理编辑器了相关的文件。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> monaco <span class="token keyword">from</span> <span class="token string">'monaco-editor'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@monaco-editor/react'</span>

loader<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> monaco <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>对于其他打包工具，官方提供了 Vite 示例：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@monaco-editor/react'</span>

<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> monaco <span class="token keyword">from</span> <span class="token string">'monaco-editor'</span>
<span class="token keyword">import</span> editorWorker <span class="token keyword">from</span> <span class="token string">'monaco-editor/esm/vs/editor/editor.worker?worker'</span>
<span class="token keyword">import</span> jsonWorker <span class="token keyword">from</span> <span class="token string">'monaco-editor/esm/vs/language/json/json.worker?worker'</span>
<span class="token keyword">import</span> cssWorker <span class="token keyword">from</span> <span class="token string">'monaco-editor/esm/vs/language/css/css.worker?worker'</span>
<span class="token keyword">import</span> htmlWorker <span class="token keyword">from</span> <span class="token string">'monaco-editor/esm/vs/language/html/html.worker?worker'</span>
<span class="token keyword">import</span> tsWorker <span class="token keyword">from</span> <span class="token string">'monaco-editor/esm/vs/language/typescript/ts.worker?worker'</span>

self<span class="token punctuation">.</span>MonacoEnvironment <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">getWorker</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> label</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">'json'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jsonWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">'css'</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">'scss'</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">'less'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">cssWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">'html'</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">'handlebars'</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">'razor'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">htmlWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">===</span> <span class="token string">'typescript'</span> <span class="token operator">||</span> label <span class="token operator">===</span> <span class="token string">'javascript'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">tsWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">editorWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

loader<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> monaco <span class="token punctuation">}</span><span class="token punctuation">)</span>

loader<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span>
</code></pre></div><p>我使用了 Rspack 来打包，官方说明对 <code>monaco-editor-webpack-plugin</code> 插件进行了兼容，但是不知道是由于我 Rspack 版本问题，导致报错，因此实验了一种更加稳定的方式如下。</p>
<p>Rspack 配置与 Vite 一致，详细见 <a href="https://github.com/rspack-contrib/rspack-examples/blob/main/rspack/monaco-editor-ts-react/src/components/Editor.tsx" target="_blank" rel="noopener noreferrer">Rspack demo monaco-editor-react</a>。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>需要注意的是 <code>publicPath</code> 需要设置为 <code>'auto'</code>，否则 web worker 内引用的文件会添加重复路径。</p>
<p>See <a href="https://rspack.dev/config/output#outputpublicpath" target="_blank" rel="noopener noreferrer">Rspack output.publicPath</a>。</p>
</div>
<h3><s>本地路径</s></h3>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>该方式会在 public 中引入大量文件，不太优雅。</p>
</div>
<p><code>monaco-editor</code> 中提供了一些打包后的文件，路径是 <code>monaco-editor/min/vs</code>，因此可以通过下载 npm 包并将文件移动至 <code>public</code> 文件夹，并自定义路径。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mv</span> node_modules/monaco-editor/min/vs public
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> loader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@monaco-editor/react'</span>

<span class="token comment">// you can change the source of the monaco files</span>
loader<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">vs</span><span class="token operator">:</span> <span class="token string">'./vs'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// you can configure the locales</span>
loader<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">'vs/nls'</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">availableLanguages</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">'*'</span><span class="token operator">:</span> <span class="token string">'de'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// or</span>
loader<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">vs</span><span class="token operator">:</span> <span class="token string">'./vs'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">'vs/nls'</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">availableLanguages</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">'*'</span><span class="token operator">:</span> <span class="token string">'de'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>]]></content>
    <category term="practice"/>
    <published>2024-08-09T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">场景图像</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/04-scene-graph.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/04-scene-graph.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>每一帧，PixiJS 都会更新并渲染场景图。让我们来谈谈场景图中有哪些内容，以及它如何影响项目开发。</p>
<h2>场景图是一棵树</h2>
<p>场景图的根节点是由应用程序维护的容器，用 <code>app.stage</code> 引用。将 sprite 或其他可渲染对象作为子对象添加到 stage 时，它就会被添加到场景图中，并进行渲染和交互。</p>
<p>PixiJS 容器也可以有子对象，因此当你构建更复杂的场景时，最终会形成一棵父子关系树，stage 是整个场景树的根节点。Chrome 浏览器的 <a href="https://chromewebstore.google.com/detail/pixijs-devtools/aamddddknhcagpehecnhphigffljadon" target="_blank" rel="noopener noreferrer">Pixi.js devtools</a> 插件是一个探索项目的有用工具，它允许你在项目运行时实时查看和操作场景图！）。</p>]]></summary>
    <content type="html"><![CDATA[<p>每一帧，PixiJS 都会更新并渲染场景图。让我们来谈谈场景图中有哪些内容，以及它如何影响项目开发。</p>
<h2>场景图是一棵树</h2>
<p>场景图的根节点是由应用程序维护的容器，用 <code>app.stage</code> 引用。将 sprite 或其他可渲染对象作为子对象添加到 stage 时，它就会被添加到场景图中，并进行渲染和交互。</p>
<p>PixiJS 容器也可以有子对象，因此当你构建更复杂的场景时，最终会形成一棵父子关系树，stage 是整个场景树的根节点。Chrome 浏览器的 <a href="https://chromewebstore.google.com/detail/pixijs-devtools/aamddddknhcagpehecnhphigffljadon" target="_blank" rel="noopener noreferrer">Pixi.js devtools</a> 插件是一个探索项目的有用工具，它允许你在项目运行时实时查看和操作场景图！）。</p>
<h2>Parents and Children</h2>
<p>父节点移动时，其子节点也会移动。旋转父节点时，其子节点也会旋转。隐藏父对象，子对象也会被隐藏。如果一个游戏对象由多个精灵组成，可以将它们收集到一个容器中，将它们视为世界中的一个对象，作为一个整体移动和旋转。</p>
<p>在每一帧中，PixiJS 都会运行场景图，从根开始向下穿过所有子对象，直到叶子，以计算每个对象的最终位置、旋转、可见性、透明度等。</p>
<p>如果父对象的 alpha 设置为 0.5（使其透明 50% ），那么它的所有子对象也将从 50% 开始透明。如果将一个子对象的 alpha 设置为 0.5，它就不会是 50% 透明，而是 0.5 x 0.5 = 0.25 alpha，即 75% 透明。同样，对象的位置是相对于父对象而言的，因此如果父对象的 x 位置设置为 50 像素，而子对象的 x 位置设置为 100 像素，那么它将在屏幕偏移 150 像素处绘制，即 50 + 100。</p>
<p>下面是一个示例。我们将创建三个精灵，每个都是上一个精灵的子精灵，并对它们的位置、旋转、缩放和 alpha 进行动画处理。尽管每个精灵的属性都设置为相同的值，但父子链会放大每个变化：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Create the application helper and add its render target to the page</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">360</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add a container to center our sprite stack on the page</span>
<span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span>app<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">y</span><span class="token operator">:</span>app<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// load the texture</span>
<span class="token keyword">await</span> Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'assets/images/sample.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create the 3 sprites, each a child of the last</span>
<span class="token keyword">const</span> sprites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> parent <span class="token operator">=</span> container<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> sprite <span class="token operator">=</span> Sprite<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'assets/images/sample.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sprite<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  wrapper<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span><span class="token punctuation">;</span>
  parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
  sprites<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
  parent <span class="token operator">=</span> wrapper<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Set all sprite's properties to the same value, animated over time</span>
<span class="token keyword">let</span> elapsed <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">delta</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  elapsed <span class="token operator">+=</span> delta<span class="token punctuation">.</span>deltaTime <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> amount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>elapsed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> scale <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">+</span> <span class="token number">0.25</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span>
  <span class="token keyword">const</span> alpha <span class="token operator">=</span> <span class="token number">0.75</span> <span class="token operator">+</span> <span class="token number">0.25</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span>
  <span class="token keyword">const</span> angle <span class="token operator">=</span> <span class="token number">40</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span>
  <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">75</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sprites<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> sprite <span class="token operator">=</span> sprites<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    sprite<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>scale<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sprite<span class="token punctuation">.</span>alpha <span class="token operator">=</span> alpha<span class="token punctuation">;</span>
    sprite<span class="token punctuation">.</span>angle <span class="token operator">=</span> angle<span class="token punctuation">;</span>
    sprite<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>场景图中任何给定节点的累计平移、旋转、缩放和倾斜值都存储在对象的 <code>worldTransform</code> 属性中。 同样，累积的 alpha 值也存储在 <code>worldAlpha</code> 属性中。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/Aug-08-2024 11-58-35.gif" alt="sample" tabindex="0" loading="lazy"><figcaption>sample</figcaption></figure>
<h2>渲染顺序</h2>
<p>因此，我们有一个树需要渲染，那么渲染顺序是什么？</p>
<p>PixiJS 会从树根开始向下渲染。在每一级，先渲染当前对象，然后按插入顺序渲染每个子对象。请看下面的示例：两个父对象 A 和 D，以及 A 下的两个子对象 B 和 C：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Create the application helper and add its render target to the page</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">360</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span>

<span class="token comment">// Label showing scene graph hierarchy</span>
<span class="token keyword">const</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'Scene Graph:\n\napp.stage\n  ┗ A\n     ┗ B\n     ┗ C\n  ┗ D'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fill</span><span class="token operator">:</span> <span class="token string">'#ffffff'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span>

<span class="token comment">// Helper function to create a block of color with a letter</span>
<span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token parameter">letter<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> color<span class="token punctuation">,</span> pos</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> bg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>Texture<span class="token punctuation">.</span><span class="token constant">WHITE</span><span class="token punctuation">)</span>
  bg<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">100</span>
  bg<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">100</span>
  bg<span class="token punctuation">.</span>tint <span class="token operator">=</span> color

  <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">text</span><span class="token operator">:</span> letter<span class="token punctuation">,</span>
    <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fill</span><span class="token operator">:</span> <span class="token string">'#ffffff'</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  text<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
  text<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span>

  <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  container<span class="token punctuation">.</span>position <span class="token operator">=</span> pos
  container<span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">false</span>
  container<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>bg<span class="token punctuation">,</span> text<span class="token punctuation">)</span>
  parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>

  letters<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>
  <span class="token keyword">return</span> container
<span class="token punctuation">}</span>

<span class="token comment">// Define 4 letters</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>stage<span class="token punctuation">,</span> <span class="token number">0xff0000</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0x00ff00</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0x0000ff</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>stage<span class="token punctuation">,</span> <span class="token number">0xff8800</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Display them over time, in order</span>
<span class="token keyword">let</span> elapsed <span class="token operator">=</span> <span class="token number">0.0</span>
app<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ticker</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  elapsed <span class="token operator">+=</span> ticker<span class="token punctuation">.</span>deltaTime <span class="token operator">/</span> <span class="token number">60.0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>elapsed <span class="token operator">&gt;=</span> letters<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    elapsed <span class="token operator">=</span> <span class="token number">0.0</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> letters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    letters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> elapsed <span class="token operator">&gt;=</span> i
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/Aug-08-2024 16-23-14.gif" alt="render order" tabindex="0" loading="lazy"><figcaption>render order</figcaption></figure>
<p>如果想对子对象重新排序，可以使用 <code>setChildIndex()</code>。 要在父对象列表的给定位置添加子对象，可以使用 <code>addChildAt()</code>。 最后，您可以使用 <code>sortableChildren</code> 选项，结合设置每个子对象的 <code>zIndex</code> 属性，对对象的子对象进行自动排序。</p>
<h2>渲染组</h2>
<p>当你深入研究 PixiJS 时，你会遇到一个强大的功能，即渲染组。 将渲染组视为场景图中的专门容器，其本身就像迷你场景图。 以下是在项目中有效使用渲染组的必要知识。 更多信息，请查看 <a href="https://pixijs.com/8.x/guides/advanced/render-groups" target="_blank" rel="noopener noreferrer">渲染组概述</a>。</p>
<h2>剔除</h2>
<p>如果您正在构建的项目中，大部分场景对象都不在屏幕上（例如，一个横版游戏），那么您就需要对这些对象进行剔除。</p>
<p>剔除是一个评估对象（或其子代！）是否在屏幕上的过程，如果不在屏幕上，则关闭对其的渲染。</p>
<p>如果不对屏幕外的对象进行剔除，即使它们的像素最终都不在屏幕上，渲染器仍会绘制它们。</p>
<p>PixiJS 并不提供视口剔除的内置支持，但你可以找到第三方插件来满足你的需求。另外，如果你想建立自己的剔除系统，只需在每个 tick 期间运行对象，并将任何不需要绘制的对象的 <code>renderable</code> 设置为 false 即可。</p>
<h2>局部坐标 vs 全局坐标</h2>
<p>如果在舞台上添加一个精灵，默认情况下它会显示在屏幕的左上角。这是 PixiJS 使用的全局坐标空间的原点。</p>
<p>如果你的所有对象都是舞台的子对象，那么你只需要担心这个坐标。但是一旦引入容器和子对象，事情就变得复杂了。</p>
<p>位于 [50, 100] 处的子对象距离父对象向右 50 像素，向下 100 像素。我们称这两个坐标系为「全局坐标」和「局部坐标」。当你在一个对象上使用 <code>position.set(x, y)</code> 时，你总是在局部坐标系下工作，相对于对象的父对象。</p>
<p>问题是，很多时候你都想知道某个对象的全局位置。例如，如果您想剔除屏幕外的对象以节省渲染时间，您需要知道给定的子对象是否在视图矩形之外。</p>
<p>要将本地坐标转换为全局坐标，您需要使用 <code>toGlobal()</code> 函数。下面是一个使用示例：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Get the global position of an object, relative to the top-left of the screen</span>
<span class="token keyword">let</span> globalPos <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">toGlobal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>这段代码会将 <code>globalPos</code> 设置为子对象的全局坐标，相对于全局坐标系中的 [0, 0]。</p>
<h2>全局坐标 vs 屏幕坐标</h2>
<p>当您的项目与主机操作系统或浏览器协同工作时，还有第三个坐标系——「屏幕坐标」（又称「视口坐标」）会发挥作用。屏幕坐标表示相对于 PixiJS 正在呈现的画布元素左上角的位置。DOM 和本地鼠标点击事件等都在屏幕空间中工作。</p>
<p>现在，在很多情况下，屏幕空间等同于世界空间。如果画布的大小与创建应用程序时指定的呈现视图大小相同，就属于这种情况。 默认情况下就是这样——例如，您将创建一个 800x600 的应用程序窗口并将其添加到 HTML 页面，它就会保持这个大小。世界坐标中的 100 像素等于屏幕空间中的 100 像素。</p>
<p>但是！常见的情况是拉伸呈现视图，使其充满整个屏幕，或者以较低分辨率呈现，然后放大以提高速度。在这种情况下，画布元素的屏幕尺寸会发生变化（例如通过 CSS），但底层呈现视图不会，从而导致世界坐标和屏幕坐标不匹配。</p>
]]></content>
    <category term="Pixi"/>
    <published>2024-08-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">渲染循环</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/03-render-loop.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/03-render-loop.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>现在您已经了解了系统的主要部分，让我们来看看这些部分是如何协同工作，将您的项目呈现在屏幕上的。 与网页不同的是，PixiJS 会不断更新和重新绘制，一遍又一遍。 你更新对象，然后 PixiJS 将它们渲染到屏幕上，然后重复这个过程。 我们称这个循环为渲染循环。</p>
<p>任何 PixiJS 项目最主要的部分包含更新 + 渲染循环，编写更新，PixiJS 会处理整个渲染。</p>
<p>发生在渲染循环中的每一帧主要包含三个部分。</p>
<h2>运行 Ticker 回调</h2>
<p>第一步是计算从上一帧开始已经过去了多长时间，然后根据时间差调用应用程序对象的 ticker 回调。 这样，项目代码就可以制作动画并更新舞台上的精灵等，为渲染做好准备。</p>]]></summary>
    <content type="html"><![CDATA[<p>现在您已经了解了系统的主要部分，让我们来看看这些部分是如何协同工作，将您的项目呈现在屏幕上的。 与网页不同的是，PixiJS 会不断更新和重新绘制，一遍又一遍。 你更新对象，然后 PixiJS 将它们渲染到屏幕上，然后重复这个过程。 我们称这个循环为渲染循环。</p>
<p>任何 PixiJS 项目最主要的部分包含更新 + 渲染循环，编写更新，PixiJS 会处理整个渲染。</p>
<p>发生在渲染循环中的每一帧主要包含三个部分。</p>
<h2>运行 Ticker 回调</h2>
<p>第一步是计算从上一帧开始已经过去了多长时间，然后根据时间差调用应用程序对象的 ticker 回调。 这样，项目代码就可以制作动画并更新舞台上的精灵等，为渲染做好准备。</p>
<h2>更新场景图像</h2>
<p>场景图包含您正在绘制的事物（精灵、文本等），并且这些对象处于树状层次结构中。这些对象处于树状层次结构中。 通过移动、旋转等方式更新游戏对象后，PixiJS 需要计算场景中每个对象的新位置和状态，然后才能开始绘制。</p>
<h2>渲染场景图像</h2>
<p>现在我们的游戏状态已经更新，是时候将其绘制到屏幕上了。渲染系统会从场景图的根节点（app.stage）开始，渲染每个对象及其子节点，直到绘制完所有对象。 在此过程中不会进行剔除或其他巧妙的处理。如果在舞台的可见部分之外有大量对象，则需要将其禁用作为一种优化方法（视椎体剔除）。</p>
<h2>帧频</h2>
<p>渲染循环不可能无限快地运行--在屏幕上绘制图像需要时间。此外，每次屏幕更新（通常为 60fps，但较新的显示器可支持 144fps 或更高）时，帧的更新次数一般不会超过一次。最后，PixiJS 是在 Chrome 或 Firefox 等网络浏览器的环境中运行的。浏览器本身必须平衡各种内部操作的需要和为任何打开的标签页提供服务的需要。综上所述，确定何时绘制帧是一个复杂的问题。</p>
<p>如果您想调整该行为，可以在 Ticker 上设置 <code>minFPS</code> 和 <code>maxFPS</code> 属性。请注意，由于环境复杂，项目无法保证给定的 FPS。 在 ticker 回调中使用传递的 <code>ticker.deltaTime</code> 值来缩放任何动画，以确保流畅播放。</p>
<h2>自定义渲染循环</h2>
<p>以上介绍的是应用程序辅助类开箱即用的默认呈现循环。对于希望解决特定问题的高级用户来说，创建呈现循环还有许多其他方法。在制作原型和学习 PixiJS 的过程中，建议使用应用程序提供的系统。</p>
]]></content>
    <category term="Pixi"/>
    <published>2024-08-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">务实的项目</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/09-pragmatic-project.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/09-pragmatic-project.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>一旦项目不只你一个人，就需要建立一些基本规则，并依次将项目的各部分分配出去。</p>
<h2>务实的团队</h2>
<ul>
<li>维持小而稳定的团队</li>
<li>禁止破窗</li>
<li>团队的工作不应仅致力于开发新功能，还可能包括：
<ul>
<li>旧系统的维护</li>
<li>流程的反思与精炼</li>
<li>实验新技术</li>
<li>学习和提升技能</li>
</ul>
</li>
<li>做能起作用的事，别赶时髦</li>
</ul>
<h2>务实的入门套件</h2>
<ul>
<li>版本控制</li>
<li>回归测试</li>
<li>完全自动化</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>一旦项目不只你一个人，就需要建立一些基本规则，并依次将项目的各部分分配出去。</p>
<h2>务实的团队</h2>
<ul>
<li>维持小而稳定的团队</li>
<li>禁止破窗</li>
<li>团队的工作不应仅致力于开发新功能，还可能包括：
<ul>
<li>旧系统的维护</li>
<li>流程的反思与精炼</li>
<li>实验新技术</li>
<li>学习和提升技能</li>
</ul>
</li>
<li>做能起作用的事，别赶时髦</li>
</ul>
<h2>务实的入门套件</h2>
<ul>
<li>版本控制</li>
<li>回归测试</li>
<li>完全自动化</li>
</ul>
<h2>傲慢与偏见</h2>
<p>在作品上签名。</p>
<p>保持匿名会滋生粗心、错误、懒惰和糟糕的代码，特别是在大型项目中——很容易把自己看成只是大齿轮上的一个小齿，在无休止的工作汇报中制造蹩脚的借口，而不是写出好的代码。</p>
]]></content>
    <category term="READING"/>
    <published>2024-08-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">项目启动前</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/08-before-start-project.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/08-before-start-project.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>在项目的最早期，你和团队需要了解需求。仅仅是被人告知要做什么或是倾听用户是不够的：读一下需求之坑，学习如何避免常见的陷阱。</p>
<h2>需求之坑</h2>
<p>需求很少停留在表面。通常情况下，它们被埋在层层的假设、误解和政治之下。更糟糕的是，需求通常根本不存在。</p>
<ul>
<li>无人确切知道自己想要什么</li>
<li>程序员帮助人们理解他们想要什么</li>
<li>需求是从反馈循环中学到的</li>
<li>和用户一起工作以便从用户角度思考</li>
<li>使用项目术语表</li>
</ul>
<h2>处理无法解决的难题</h2>
<p>偶尔也会出现一个真的非常困难的问题，你会发现自己顿时被卷入项目之中：一些工程问题你把握不了，或者某些代码比你想象的更难写，也许看起来根本做不到。但这些真的像看起来那么难吗？</p>]]></summary>
    <content type="html"><![CDATA[<p>在项目的最早期，你和团队需要了解需求。仅仅是被人告知要做什么或是倾听用户是不够的：读一下需求之坑，学习如何避免常见的陷阱。</p>
<h2>需求之坑</h2>
<p>需求很少停留在表面。通常情况下，它们被埋在层层的假设、误解和政治之下。更糟糕的是，需求通常根本不存在。</p>
<ul>
<li>无人确切知道自己想要什么</li>
<li>程序员帮助人们理解他们想要什么</li>
<li>需求是从反馈循环中学到的</li>
<li>和用户一起工作以便从用户角度思考</li>
<li>使用项目术语表</li>
</ul>
<h2>处理无法解决的难题</h2>
<p>偶尔也会出现一个真的非常困难的问题，你会发现自己顿时被卷入项目之中：一些工程问题你把握不了，或者某些代码比你想象的更难写，也许看起来根本做不到。但这些真的像看起来那么难吗？</p>
<p>解决谜题的关键是，认识到你所受到的约束和你所拥有的自由度，因为认识到这些就会找到答案。</p>
<ul>
<li>不要跳出框框思考——找到框框</li>
<li>跳出自身的局限</li>
<li>幸运眷顾有准备的人</li>
</ul>
<h2>携手共建</h2>
<p>「一起工作」的真正含义：不仅仅是提问、讨论、做笔记，还要在真正编码的同一时刻提问和讨论。</p>
<ul>
<li>结对编程</li>
<li>集体编程</li>
<li>不要一个人埋头钻进代码中</li>
</ul>
]]></content>
    <category term="READING"/>
    <published>2024-08-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">当你编码时</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/07-when-coding.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/07-when-coding.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>对所有代码进行批判性思考，包括自己的代码。不断看到程序和设计的改进空间。</p>
<h2>听从蜥蜴脑</h2>
<p>一种有效的脑力突破的方法：</p>
<ol>
<li>在便签上写下「我正在做 xx」，然后贴在屏幕的一侧。</li>
<li>提醒自己，「xx」注定要出问题。提醒自己，「xx」即使没有出问题也会被扔掉。这样做没有坏处。</li>
<li>在空编辑器窗口中，写一条注释，用一句话描述你想学点什么或做点什么。</li>
<li>开始编码。</li>
</ol>
<p>如果在实验结束后仍旧不舒服，那就重新从散步、谈话和休息开始。</p>
<p>阅读别人的代码。</p>
<h2>重构</h2>]]></summary>
    <content type="html"><![CDATA[<p>对所有代码进行批判性思考，包括自己的代码。不断看到程序和设计的改进空间。</p>
<h2>听从蜥蜴脑</h2>
<p>一种有效的脑力突破的方法：</p>
<ol>
<li>在便签上写下「我正在做 xx」，然后贴在屏幕的一侧。</li>
<li>提醒自己，「xx」注定要出问题。提醒自己，「xx」即使没有出问题也会被扔掉。这样做没有坏处。</li>
<li>在空编辑器窗口中，写一条注释，用一句话描述你想学点什么或做点什么。</li>
<li>开始编码。</li>
</ol>
<p>如果在实验结束后仍旧不舒服，那就重新从散步、谈话和休息开始。</p>
<p>阅读别人的代码。</p>
<h2>重构</h2>
<p>重组现有代码实体、改变其内部结构而不改变其外部行为的规范式技术。</p>
<p>重构是一项日复一日的工作，需要采取低风险的小步骤进行，它更像是耙松和除草这类活动。这是一种有针对性的、精确的方法，有助于保持代码易于更改，而不是对代码库进行自由的、大规模的重写。</p>
<p>为了保证外部行为没有改变，你需要良好的自动化单元测试来验证代码的行为。</p>
<ul>
<li>尽早重构，尽快重构</li>
</ul>
<h2>注意安全</h2>
<ul>
<li>保持代码简洁，让攻击面更小</li>
<li>尽早打上安全补丁</li>
</ul>
]]></content>
    <category term="READING"/>
    <published>2024-08-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">并发</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/06-concurrent.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/06-concurrent.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>打破时域耦合</h2>
<p>时域耦合——在时间范畴上产生耦合：A 方法必须在 B 方法之前调用；一次只能运行一个报告；在按钮按下前必须等屏幕先重绘；“嘀嘀”一定在“嗒嗒”之前发生。</p>
<p>我们需要考虑并发性，并且考虑对时间依赖或顺序依赖解耦。</p>
<ul>
<li>通过分析工作流来提高并发性</li>
<li>做事也需要思考如何解耦</li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<h2>打破时域耦合</h2>
<p>时域耦合——在时间范畴上产生耦合：A 方法必须在 B 方法之前调用；一次只能运行一个报告；在按钮按下前必须等屏幕先重绘；“嘀嘀”一定在“嗒嗒”之前发生。</p>
<p>我们需要考虑并发性，并且考虑对时间依赖或顺序依赖解耦。</p>
<ul>
<li>通过分析工作流来提高并发性</li>
<li>做事也需要思考如何解耦</li>
</ul>
]]></content>
    <category term="READING"/>
    <published>2024-08-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">手写 call、apply、bind</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/017-implement-call-apply-bind.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/017-implement-call-apply-bind.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p><code>call()</code>、<code>apply()</code> 和 <code>bind()</code> 三者都可以改变 JavaScript 中的 this 指向，关于三者的区别在 中有详细记录。</p>
<p>这三个函数实际上是由 C++ 实现的，这里只考虑功能上的实现，不会考虑太多边界情况。</p>
<h2><code>call()</code></h2>
<p><code>call()</code> 接受一个 <code>this</code> 指向，其后跟参数列表。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 将 thisArg 转成对象类型（防止传入非对象类型）</span>
  <span class="token comment">// 传入 null 或 undefined 则为全局对象</span>
  thisArg <span class="token operator">=</span> thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span> <span class="token operator">:</span> window

  <span class="token comment">// foo.myCall();</span>
  <span class="token comment">// foo 是函数，本质上也是一个对象，即隐式绑定：对象（foo）调用函数（myCall）</span>
  <span class="token comment">// 那么函数 myCall 中的 this 指向 foo 对象（函数）</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// foo</span>

  <span class="token comment">// 需要将 fn 的指向改为 thisArg</span>
  <span class="token comment">// 那么可以继续利用 this 的隐式绑定规则</span>
  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn
  <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p><code>call()</code>、<code>apply()</code> 和 <code>bind()</code> 三者都可以改变 JavaScript 中的 this 指向，关于三者的区别在 中有详细记录。</p>
<p>这三个函数实际上是由 C++ 实现的，这里只考虑功能上的实现，不会考虑太多边界情况。</p>
<h2><code>call()</code></h2>
<p><code>call()</code> 接受一个 <code>this</code> 指向，其后跟参数列表。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 将 thisArg 转成对象类型（防止传入非对象类型）</span>
  <span class="token comment">// 传入 null 或 undefined 则为全局对象</span>
  thisArg <span class="token operator">=</span> thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span> <span class="token operator">:</span> window

  <span class="token comment">// foo.myCall();</span>
  <span class="token comment">// foo 是函数，本质上也是一个对象，即隐式绑定：对象（foo）调用函数（myCall）</span>
  <span class="token comment">// 那么函数 myCall 中的 this 指向 foo 对象（函数）</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// foo</span>

  <span class="token comment">// 需要将 fn 的指向改为 thisArg</span>
  <span class="token comment">// 那么可以继续利用 this 的隐式绑定规则</span>
  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn
  <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><h2><code>apply()</code></h2>
<p><code>apply()</code> 与 <code>call()</code> 的区别在于传入的是参数数组，参照上面流程，可以很容易的写出：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理 thisArg</span>
  thisArg <span class="token operator">=</span> thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span> <span class="token operator">:</span> window

  <span class="token comment">// 获取待执行函数</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>

  <span class="token comment">// 执行</span>
  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn
  <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><h2><code>bind()</code></h2>
<p><code>bind()</code> 函数稍有不同，它返回一个改变了 <code>this</code> 的函数：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理 thisArg</span>
  thisArg <span class="token operator">=</span> thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span> <span class="token operator">:</span> window

  <span class="token comment">// 获取待执行函数</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">_bind</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>newArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 收集参数</span>
    <span class="token keyword">const</span> finalArgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>newArgs<span class="token punctuation">]</span>

    <span class="token comment">// 执行</span>
    thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn
    <span class="token keyword">const</span> res <span class="token operator">=</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>finalArgs<span class="token punctuation">)</span>
    <span class="token keyword">delete</span> thisArg<span class="token punctuation">.</span>fn

    <span class="token keyword">return</span> res
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>总结</h2>
<p>手写 <code>call</code>、<code>apply</code>、<code>bind</code> 的步骤大致相同，只是 <code>bind</code> 多了一个收集参数的过程：</p>
<ol>
<li>处理 thisArg;</li>
<li>获取待执行函数；</li>
<li>执行函数（<code>bind()</code> 还有一个收集参数的过程）。</li>
</ol>
<p>无论是在获取函数还是执行函数（改变 <code>this</code>）的过程中，都是利用了隐式绑定改变 <code>this</code> 指向的规则。</p>
]]></content>
    <category term="JavaScript"/>
    <published>2022-04-27T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">函数</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/015-function.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/015-function.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>箭头函数</h2>
<p>ES6 中新增了 <code>=&gt;</code>，它可以将函数定义成箭头函数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>箭头函数</h2>
<p>ES6 中新增了 <code>=&gt;</code>，它可以将函数定义成箭头函数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>箭头函数不能使用 <code>arguments</code>、<code>super</code> 和 <code>new.target</code>，也不能用作构造函数。此外，箭头函数也没有 <code>prototype</code> 属性。</p>
</div>
<h2>函数名</h2>
<p>在 JavaScript 中，函数名可以是任何标识符。</p>
<p>ECMAScript 6 的所有函数对象都会暴露一个只读的 <code>name</code> 属性，其中包含关于函数的信息。</p>
<p>多数情况下，这个属性中保存的就是一个函数标识符，或者说是一个字符串化的变量名。即使函数没有名称，也会如实显示成空字符串。如果它是使用 <code>Function</code> 构造函数创建的，则会标识成 <code>anonymous</code>：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token function-variable function">baz</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// foo</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// bar</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// baz</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">//（空字符串）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// anonymous</span>
</code></pre></div><p>如果函数是一个获取函数、设置函数，或者使用 <code>bind()</code> 实例化，那么标识符前面会加上一个前缀：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// bound foo</span>

<span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">years</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>years
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token parameter">newAge</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>years <span class="token operator">=</span> newAge
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> propertyDescriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>dog<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>propertyDescriptor<span class="token punctuation">.</span>get<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// get age</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>propertyDescriptor<span class="token punctuation">.</span>set<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// set age</span>
</code></pre></div><h2>参数</h2>
<p>函数既不关心传入的参数个数，也不关心这些参数的数据类型。定义函数时要接收两个参数，并不意味着调用时就传两个参数。你可以传一个、三个，甚至一个也不传，解释器都不会报错。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>之所以会这样，主要是因为 ECMAScript 函数的参数在内部表现为一个数组。但函数并不关心这个数组中包含什么。如果数组中什么也没有，那没问题；如果数组的元素超出了要求，那也没问题。</p>
<p>事实上，在使用 <code>function</code> 关键字定义（非箭头）函数时，可以在函数内部访问 <code>arguments</code> 对象（参见 ），从中取得传进来的每个参数值。</p>
</div>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>ECMAScript 中的所有参数都按值传递的。不可能按引用传递参数。如果把对象作为参数传递，那么传递的值就是这个对象的引用，详见 。</p>
</div>
<h2>无重载</h2>
<p>ECMAScript 中，函数的重载是不允许的，只能有一个函数签名。</p>
<p>而在 TypeScript 中，可以有函数重载。一个函数可以有多个不同的签名，但只有一个具体的实现。这种机制允许一个函数根据不同的参数类型或数量来执行不同的逻辑。</p>
<p>重载函数在定义时，先列出多个函数签名，然后提供一个具体的实现函数，该实现函数根据传入的参数执行相应的操作。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token operator">|</span> <span class="token keyword">undefined</span>
<span class="token keyword">function</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token operator">|</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userList<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>grades <span class="token operator">===</span> value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>默认参数</h2>
<p>在函数定义中的参数后面用 <code>=</code> 就可以为参数赋一个默认值：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makeKing</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'Henry'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">King </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> VIII</span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">makeKing</span><span class="token punctuation">(</span><span class="token string">'Louis'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 'King Louis VIII'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">makeKing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 'King Henry VIII'</span>
</code></pre></div><h2>参数扩展和收集</h2>
<h3>扩展参数</h3>
<p>对可迭代对象应用扩展操作符，并将其作为一个参数传入，可以将可迭代对象拆分，并将迭代返回的每个值单独传入。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> sum
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h3>收集参数</h3>
<p>在构思函数定义时，可以使用扩展操作符把不同长度的独立参数组合为一个数组。这有点类似 <code>arguments</code> 对象的构造机制，只不过收集参数的结果会得到一个 Array 实例。</p>
<p>且收集参数只能放在最后一个参数位置：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ignoreFirst</span><span class="token punctuation">(</span><span class="token parameter">firstValue<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">ignoreFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// []</span>
<span class="token function">ignoreFirst</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// []</span>
<span class="token function">ignoreFirst</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// [2]</span>
<span class="token function">ignoreFirst</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// [2, 3]</span>
</code></pre></div><h2>函数声明和函数表达式</h2>
<p>函数声明会在任何代码执行之前先被读取并添加到执行上下文，函数表达式不会。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 报错</span>
<span class="token keyword">let</span> <span class="token function-variable function">sum2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2
<span class="token punctuation">}</span>
</code></pre></div><h2>函数作为值</h2>
<p>因为函数名在 ECMAScript 中就是变量，所以函数可以用在任何可以使用变量的地方。这意味着不仅可以把函数作为参数传给另一个函数，而且还可以在一个函数中返回另一个函数。</p>
<h2>函数内部</h2>
<p>在 ECMAScript 5 中，函数内部存在两个特殊的对象：<code>arguments</code> 和 <code>this</code>。ECMAScript 6 又新增了 <code>new.target</code> 属性。</p>
<h3>arguments</h3>
<p><code>arguments</code> 对象还有一个 <code>callee</code> 属性，是一个指向 <code>arguments</code> 对象所在函数的指针。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这个函数要正确执行就必须保证函数名是 <code>factorial</code>，从而导致了紧密耦合。使用 <code>arguments.callee</code> 就可以让函数逻辑与函数名解耦：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num <span class="token operator">*</span> arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>this</h3>
<p>详见 。</p>
<h3>new.target</h3>
<p>ECMAScript 中的函数始终可以作为构造函数实例化一个新对象，也可以作为普通函数被调用。ECMAScript 6 新增了检测函数是否使用 <code>new</code> 关键字调用的 <code>new.target</code> 属性。</p>
<p>如果函数是正常调用的，<code>new.target</code> 将返回 <code>undefined</code>，如果函数被 <code>new</code> 关键字调用，则 <code>new.target</code> 将返回这个函数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">King</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">new</span><span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token string">'King must be instantiated using "new"'</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'King instantiated using "new"'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token class-name">King</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// King instantiated using "new"</span>
<span class="token function">King</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Error: King must be instantiated using "new"</span>
</code></pre></div><h2>函数属性和方法</h2>
<p>ECMAScript 中的函数是对象，因此有属性和方法。每个函数都有两个属性：<code>length</code> 和 <code>prototype</code>。其中，<code>length</code> 属性保存函数定义的命名参数的个数，<code>prototype</code> 属性保存函数的原型对象。</p>
<p>函数还有两个方法：<code>apply()</code> 和 <code>call()</code>。这两个方法都会以指定的 <code>this</code> 值来调用函数，即会设置调用函数时函数体内 <code>this</code> 对象的值。</p>
<h2>尾调用优化</h2>
<p>ECMAScript 6 规范新增了一项内存管理优化机制，让 JavaScript 引擎在满足条件时可以重用栈帧。</p>
<p>具体来说，这项优化非常适合「尾调用」，即外部函数的返回值是一个内部函数的返回值。比如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 尾调用</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在 ES6 优化之前，执行这个例子会在内存中发生如下操作。</p>
<ol>
<li>执行到 <code>outerFunction</code> 函数体，第一个栈帧被推到栈上。</li>
<li>执行 <code>outerFunction</code> 函数体，到 <code>return</code> 语句。计算返回值必须先计算 <code>innerFunction</code>。</li>
<li>执行到 <code>innerFunction</code> 函数体，第二个栈帧被推到栈上。</li>
<li>执行 <code>innerFunction</code> 函数体，计算其返回值。</li>
<li>将返回值传回 <code>outerFunction</code>，然后 <code>outerFunction</code> 再返回值。</li>
<li>将栈帧弹出栈外。</li>
</ol>
<p>在 ES6 优化之后，执行这个例子会在内存中发生如下操作。</p>
<ol>
<li>执行到 outerFunction 函数体，第一个栈帧被推到栈上。</li>
<li>执行 outerFunction 函数体，到达 return 语句。为求值返回语句，必须先求值 innerFunction。</li>
<li>引擎发现把第一个栈帧弹出栈外也没问题，因为 innerFunction 的返回值也是 outerFunction<br>
的返回值。</li>
<li>弹出 outerFunction 的栈帧。</li>
<li>执行到 innerFunction 函数体，栈帧被推到栈上。</li>
<li>执行 innerFunction 函数体，计算其返回值。</li>
<li>将 innerFunction 的栈帧弹出栈外。</li>
</ol>
<p>很明显，第一种情况下每多调用一次嵌套函数，就会多增加一个栈帧。而第二种情况下无论调用多少次嵌套函数，都只有一个栈帧。这就是 ES6 尾调用优化的关键：如果函数的逻辑允许基于尾调用将其<br>
销毁，则引擎就会那么做。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>现在还没有办法测试尾调用优化是否起作用。不过，因为这是 ES6 规范所规定的，兼容的浏览器实现都能保证在代码满足条件的情况下应用这个优化。</p>
</div>
<h3>条件</h3>
<p>尾调用优化的条件就是确定外部栈帧真的没有必要存在了。涉及的条件如下：</p>
<ul>
<li>严格模式；</li>
<li>外部函数的返回值是对尾调用函数的调用；</li>
<li>尾调用函数返回后不需要执行额外的逻辑；</li>
<li>尾调用函数不是引用外部函数作用域中自由变量的闭包。</li>
</ul>
<p>下面展示了几个违反上述条件的函数，因此都不符号尾调用优化的要求：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">'use strict'</span>
<span class="token comment">// 无优化：尾调用没有返回</span>
<span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 无优化：尾调用没有直接返回</span>
<span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> innerFunctionResult <span class="token operator">=</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> innerFunctionResult
<span class="token punctuation">}</span>
<span class="token comment">// 无优化：尾调用返回后必须转型为字符串</span>
<span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 无优化：尾调用是一个闭包</span>
<span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span>
  <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> foo
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>下面是几个符合尾调用优化条件的例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">'use strict'</span>
<span class="token comment">// 有优化：栈帧销毁前执行参数计算</span>
<span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 有优化：初始返回值不涉及栈帧</span>
<span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 有优化：两个内部函数都在尾部</span>
<span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token parameter">condition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> condition <span class="token operator">?</span> <span class="token function">innerFunctionA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">innerFunctionB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>尾调用优化</h3>
<p>下面是一个通过递归计算斐波纳契数列的函数：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>
</code></pre></div><p>显然这个函数不符合尾调用优化的条件，因为返回语句中有一个相加的操作。结果，<code>fib(n)</code> 的栈帧数的内存复杂度是 <code>O(2n)</code>。</p>
<p>利用尾调用优化：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">'use strict'</span>
<span class="token comment">// 基础框架</span>
<span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">fibImpl</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 执行递归</span>
<span class="token keyword">function</span> <span class="token function">fibImpl</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">fibImpl</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>闭包</h2>
<p>简而言之是指内部函数引用外部函数的变量，这个内部函数就是闭包。</p>
<p>虽然外部函数已经运行完毕，但由于闭包的存在，内部函数依然可以访问外部函数的变量，该变量不会被销毁。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> foo
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 'bar'</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>一些闭包场景：</p>
<ul>
<li>节流防抖</li>
<li>函数柯里化</li>
<li>链式调用</li>
<li>迭代器</li>
<li>发布订阅</li>
</ul>
<p>因为闭包会保留它们包含函数的作用域，所以比其他函数更占用内存。过度使用闭包可能导致内存过度占用，因此建议仅在十分必要时使用。</p>
</div>
<h2>立即执行函数（IIFE）</h2>
<p>立即调用的匿名函数又被称作立即调用的函数表达式（IIFE，Immediately Invoked Function Expression）。它类似于函数声明，但由于被包含在括号中，所以会被解释为函数表达式。紧跟在第一组括号后面的第二组括号会立即调用前面的函数表达式。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 块级作用域</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>具体应用见 。</p>
<h2>私有变量</h2>
<p>严格来讲，JavaScript 没有私有成员的概念，所有对象属性都公有的。不过，倒是有「私有变量」的概念。任何定义在函数或块中的变量，都可以认为是私有的，因为在这个函数或块的外部无法访问其中的变量。私有变量包括函数参数、局部变量，以及函数内部定义的其他函数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2
  <span class="token keyword">return</span> sum
<span class="token punctuation">}</span>
</code></pre></div><p>在这个函数中，函数 <code>add()</code> 有 3 个私有变量：<code>num1</code>、<code>num2</code> 和 <code>sum</code>。这几个变量只能在函数内部使用，不能在函数外部访问。如果这个函数中创建了一个闭包，则这个闭包能通过其作用域链访问其外部的这 3 个变量。基于这一点，就可以创建出能够访问私有变量的公有方法。</p>
<p><strong>特权方法（privileged method）</strong> 是能够访问函数私有变量（及私有函数）的公有方法。在对象上有两种方式创建特权方法。第一种是在构造函数中实现，比如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 私有变量和私有函数</span>
  <span class="token keyword">let</span> privateVariable <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 特权方法</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">publicMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    privateVariable<span class="token operator">++</span>
    <span class="token keyword">return</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这里实际上创建了一个闭包，在创建实例后，只能通过 <code>MyObject.prototype.publicMethod()</code> 调用 <code>privateVariable</code> 和 <code>privateFunction</code>。</p>
<h3>静态私有变量</h3>
<p>该模式不常用，简单看看例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 私有变量和私有函数</span>
  <span class="token keyword">let</span> privateVariable <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 构造函数</span>
  <span class="token function-variable function">MyObject</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 公有和特权方法</span>
  <span class="token class-name">MyObject</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">publicMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    privateVariable<span class="token operator">++</span>
    <span class="token keyword">return</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>使用闭包和私有变量会导致作用域链变长，作用域链越长，则查找变量所需的时间也越多。</p>
</div>
<h3>模块模式</h3>
<p>模块模式，则在一个单例对象上实现了相同的隔离和封装。单例对象（singleton）就是只有一个实例的对象。按照惯例，JavaScript 是通过对象字面量来创建单例对象的：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 私有变量和私有函数</span>
  <span class="token keyword">let</span> privateVariable <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 特权/公有方法和属性</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">publicProperty</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      privateVariable<span class="token operator">++</span>
      <span class="token keyword">return</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>类似一些 hooks 的封装。</p>
</div>
<h3>模块增强模式</h3>
<p>另一个利用模块模式的做法是在返回对象之前先对其进行增强。这适合单例对象需要是某个特定类型的实例，但又必须给它添加额外属性或方法的场景。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 私有变量和私有函数</span>
  <span class="token keyword">let</span> privateVariable <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 创建对象</span>
  <span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 添加特权/公有属性和方法</span>
  object<span class="token punctuation">.</span>publicProperty <span class="token operator">=</span> <span class="token boolean">true</span>
  object<span class="token punctuation">.</span><span class="token function-variable function">publicMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    privateVariable<span class="token operator">++</span>
    <span class="token keyword">return</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 返回对象</span>
  <span class="token keyword">return</span> object
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>]]></content>
    <category term="JavaScript"/>
    <published>2024-07-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">this 指向</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/016-this.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/016-this.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>在常见的编程语言中，几乎都有 <code>this</code> 关键字，但是 JavaScript 中的 <code>this</code> 和常见的面向对象语言中的 <code>this</code> 不太一样：</p>
<ul>
<li>常见的面向对象的编程语言中，如 Java、C++、Swift 等，<code>this</code> 通常只会出现在类的方法中，<code>this</code> 代表的是当前调用对象；</li>
<li>但是 JavaScript 中的 <code>this</code> 更加灵活，无论是它出现的位置还是代表的含义。</li>
</ul>
<p>在  中提到过：上下文中会包含 <code>this</code> 指向，那么不同的上下文的 <code>this</code> 指向肯定会不同。下面就来具体看看。</p>]]></summary>
    <content type="html"><![CDATA[<p>在常见的编程语言中，几乎都有 <code>this</code> 关键字，但是 JavaScript 中的 <code>this</code> 和常见的面向对象语言中的 <code>this</code> 不太一样：</p>
<ul>
<li>常见的面向对象的编程语言中，如 Java、C++、Swift 等，<code>this</code> 通常只会出现在类的方法中，<code>this</code> 代表的是当前调用对象；</li>
<li>但是 JavaScript 中的 <code>this</code> 更加灵活，无论是它出现的位置还是代表的含义。</li>
</ul>
<p>在  中提到过：上下文中会包含 <code>this</code> 指向，那么不同的上下文的 <code>this</code> 指向肯定会不同。下面就来具体看看。</p>
<h2>全局上下文</h2>
<p>无论是否处于严格模式，全局上下文中的 <code>this</code> 都指向全局对象。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre></div><h2>函数上下文</h2>
<p>在函数上下文中，<code>this</code> 指向取决于函数的调用方式，一共分为四种。</p>
<ul>
<li>默认绑定</li>
<li>隐式绑定</li>
<li>显式绑定</li>
<li>new 绑定</li>
</ul>
<h3>默认绑定</h3>
<p>默认绑定即为独立函数调用，可以理解为没有绑定到某个对象上进行调用。</p>
<p>严格模式和非严格模式下 <code>this</code> 的指向会有所不同。</p>
<p>非严格模式下，独立调用函数的 <code>this</code> 指向为全局对象，在浏览器中为 <code>window</code>，node 中为 <code>global</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>

<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> window <span class="token comment">// true</span>
</code></pre></div><p>而严格模式下，独立调用函数的 <code>this</code> 指向为 <code>undefined</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">'use strict'</span> <span class="token comment">// 这里是严格模式</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span>
<span class="token punctuation">}</span>

<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token comment">// true</span>
</code></pre></div><h3>隐式绑定（对象函数调用）</h3>
<p>通过对象发起的函数调用，<code>this</code> 会指向调用者本身。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 案例一</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'why'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> foo
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// obj 对象发起的函数调用，因此 this 指向 obj 对象</span>

<span class="token comment">// 案例二</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'wang'</span><span class="token punctuation">,</span>
  <span class="token function-variable function">eating</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'在吃东西'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">eating</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// wang在吃东西</span>

<span class="token keyword">var</span> fn <span class="token operator">=</span> obj<span class="token punctuation">.</span>eating
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined在吃东西 -&gt; 没有对象调用，还是默认绑定</span>

<span class="token comment">// 案例三</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'obj1'</span><span class="token punctuation">,</span>
  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'obj2'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> obj1<span class="token punctuation">.</span>foo
<span class="token punctuation">}</span>

obj2<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// obj2</span>
</code></pre></div><h3>显示绑定</h3>
<p>前面的隐式绑定存在一个缺点：对象内部必须有一个函数的引用，否则会报错。</p>
<p>如果我们不希望在 <strong>对象内部</strong> 包含这个函数的引用，同时又希望在这个对象上强制调用，那么应该怎么办？</p>
<p>JavaScript 提供了三个改变 this 指向的函数：<code>call()</code>、<code>apply()</code> 和 <code>bind()</code>。它们都能改变 this 指向，但是都有一些细微的区别。</p>
<h4><code>Function.prototype.call()</code></h4>
<p>语法：第一个参数为 this 值（可选，若省略或指定为 <code>null</code> 或 <code>undefined</code> 则为全局对象），后面为参数列表。<code>call()</code> 会立即调用该函数，因此返回值为该函数的返回值。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">[</span><span class="token punctuation">,</span> arg2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'函数被调用了'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'obj'</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 函数被调用了 { name: 'obj' }</span>

<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'call'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token comment">// 90 [String: 'call']</span>
</code></pre></div><h4><code>Function.prototype.apply()</code></h4>
<p>语法：第一个参数为 this 值（可选，若省略或指定为 <code>null</code> 或 <code>undefined</code> 则为全局对象），后面为参数列表。和 <code>call()</code> 一样，<code>apply()</code>会立即调用该函数，因此返回值为该函数的返回值。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">aplly</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> <span class="token punctuation">[</span>argsArray<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'函数被调用了'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'obj'</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 函数被调用了 { name: 'obj' }</span>

<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">'call'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 90 [String: 'call']</span>
</code></pre></div><h4><code>Function.prototype.bind()</code></h4>
<p>有时候我们不希望函数立即被执行，那么可以使用 <code>bind()</code>，它和 <code>call()</code>、<code>apply()</code> 不同，<code>bind()</code> <strong>不会</strong>立即调用该函数，返回值为改变 this 指向之后的函数。</p>
<p><code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 this 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p>
<p>语法：第一个参数为 this 值（可选，若省略或指定为 <code>null</code> 或 <code>undefined</code> 则为全局对象），后面为参数列表。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">[</span><span class="token punctuation">,</span> arg2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2 <span class="token operator">+</span> num3<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> _bind <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'bind'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token function">_bind</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token comment">// 90 [String: 'bind']</span>
</code></pre></div><h3>new 绑定</h3>
<p>使用 new 操作符调用构造函数生成对象时，会自动执行以下操作：</p>
<ol>
<li>创建一个全新的对象；</li>
<li>这个对象的 <code>[[proto]]</code> 属性会被赋值为构造函数的 <code>prototype</code> 属性；</li>
<li>构造函数内部的 this 被赋值为这个对象（<strong>new 绑定</strong>）;</li>
<li>执行构造函数内部的代码；</li>
<li>如果构造函数返回非空对象，则返回该对象；否则返回刚才创建的新对象。</li>
</ol>
<p>在这个过程中就会执行 new 绑定。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// Person { name: 'wang', sayName: [Function (anonymous)] }</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">)</span>
</code></pre></div><h2>优先级</h2>
<p>如果一个函数应用了多个规则，那么它们的优先级谁更高？</p>
<ol>
<li>
<p>默认绑定</p>
<p>毫无疑问，优先级最低</p>
</li>
<li>
<p>显式绑定高于隐式绑定</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'obj'</span><span class="token punctuation">,</span>
  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 1.call/apply的显示绑定高于隐式绑定</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token comment">// [String: 'abc']</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token comment">// [String: 'abc']</span>

<span class="token comment">// 2.bind的优先级高于隐式绑定</span>
<span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [String: 'abc']</span>
</code></pre></div></li>
<li>
<p>new 绑定高于显示绑定</p>
<p>new 不能和 <code>call()</code>、<code>apply()</code> 一起使用。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// foo {}</span>
</code></pre></div></li>
</ol>
<p>因此优先级是 new 绑定 &gt; 显示绑定(apply/call/bind) &gt; 隐式绑定(obj.foo()) &gt; 默认绑定(独立函数调用)。</p>
<h2>箭头函数</h2>
<p>上面所说的是普通函数的 this 指向，而在箭头函数中，this 根据外层作用域来决定。</p>
<p>那么它有什么应用场景呢？来看一个模拟网络请求的例子：</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>setTimeout()</code> 中的 this 关键字在非严格模式会指向 window (或全局)对象，严格模式下为 undefined。详见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout#%E5%85%B3%E4%BA%8Ethis%E7%9A%84%E9%97%AE%E9%A2%98" target="_blank" rel="noopener noreferrer">window.setTimeout - Web API 接口参考 | MDN (mozilla.org)</a></p>
</div>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">getData</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 发送网络请求, 将结果放到上面 data 属性中</span>
    <span class="token comment">// 在箭头函数之前的解决方案</span>
    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
      <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'cba'</span><span class="token punctuation">,</span> <span class="token string">'nba'</span><span class="token punctuation">]</span>
      _this<span class="token punctuation">.</span>data <span class="token operator">=</span> result
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment">// ["abc", "cba", "nba"]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
</code></pre></div><p>有了箭头函数之后，就不必使用 <code>_this = this</code> 获取真正想要的 <code>this</code> 了：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// { data: [], getData: [Function: getData] }</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'cba'</span><span class="token punctuation">,</span> <span class="token string">'nba'</span><span class="token punctuation">]</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> result
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</code></pre></div><h2>参考链接</h2>
<ul>
<li><a href="https://developer.mozilla.org/" target="_blank" rel="noopener noreferrer">MDN (mozilla.org)</a></li>
<li><a href="https://juejin.cn/post/6844903746984476686" target="_blank" rel="noopener noreferrer">面试官问：JS 的 this 指向 - 掘金 (juejin.cn)</a></li>
</ul>
]]></content>
    <category term="JavaScript"/>
    <published>2022-04-22T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">架构概述</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/02-architecture-overview.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/02-architecture-overview.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://github.com/pixijs/pixijs" target="_blank" rel="noopener noreferrer">PixiJS</a> 源代码中主要模块的关系如下：</p>
<table>
<thead>
<tr>
<th>模块</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Renderer</td>
<td>渲染器，PixiJS 系统核心，用于显示场景树，并将其绘制到屏幕上。</td>
</tr>
<tr>
<td>Container</td>
<td>容器，主要场景对象，用于创建场景树，如精灵、图形和文本。</td>
</tr>
<tr>
<td>Assets</td>
<td>为异步加载资源提供工具。</td>
</tr>
<tr>
<td>Ticker</td>
<td>基于时钟的周期性回调。游戏更新逻辑将通常在每帧的响应中运行。</td>
</tr>
<tr>
<td>Application</td>
<td>一个简单的帮助对象，包装了一个加载器，一个时钟和一个渲染器。</td>
</tr>
<tr>
<td>Events</td>
<td>PixiJS 支持基于指针的交互，使对象可以被点击，触发悬停事件等。</td>
</tr>
<tr>
<td>Accessibility</td>
<td>通过我们的显示系统我们拥有了一个丰富的键盘和屏幕阅读器的工具。</td>
</tr>
</tbody>
</table>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://github.com/pixijs/pixijs" target="_blank" rel="noopener noreferrer">PixiJS</a> 源代码中主要模块的关系如下：</p>
<p>| 模块          | 说明                                                           |<br>
|</p>
]]></content>
    <category term="Pixi"/>
    <published>2024-07-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">whistle 调试真机</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/017-whistle-debug-real-phone.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/017-whistle-debug-real-phone.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>在前端开发中移动端开发技能必不可少。当我们遇到类似于这样的问题：</p>
<ul>
<li>移动端 <code>Canvas</code> 渲染失败</li>
<li>微信获取 <code>openId</code> 回调页不匹配</li>
<li>微信浏览器文件上传失败</li>
<li>支付宝，微信 <code>H5</code> 支付域名校验不匹配</li>
<li>生产环境 BUG，测试环境无法复现</li>
<li>当后端接口启用 <code>cors</code> 跨域时，本地环境无法访问</li>
</ul>
<p><code>Chrome</code> 模拟器和微信开发者工具等都无法完美复现我们遇到的问题，这时候我们需要用到 <code>whistle</code> 来实现真机调试</p>]]></summary>
    <content type="html"><![CDATA[<p>在前端开发中移动端开发技能必不可少。当我们遇到类似于这样的问题：</p>
<ul>
<li>移动端 <code>Canvas</code> 渲染失败</li>
<li>微信获取 <code>openId</code> 回调页不匹配</li>
<li>微信浏览器文件上传失败</li>
<li>支付宝，微信 <code>H5</code> 支付域名校验不匹配</li>
<li>生产环境 BUG，测试环境无法复现</li>
<li>当后端接口启用 <code>cors</code> 跨域时，本地环境无法访问</li>
</ul>
<p><code>Chrome</code> 模拟器和微信开发者工具等都无法完美复现我们遇到的问题，这时候我们需要用到 <code>whistle</code> 来实现真机调试</p>
<h2>Whistle</h2>
<p><a href="https://wproxy.org/whistle/" target="_blank" rel="noopener noreferrer">whistle</a>（读音[ˈwɪsəl]，拼音[wēisǒu]）基于 Node 实现的跨平台 web 调试代理工具。</p>
<p>它的作用可以理解为用 Node 开一个代理服务器，将我们需要调试的设备代理到 <code>whistle</code> 后，由 <code>whistle</code> 进行代理请求。同时 <code>whistle</code> 支持类似于 hosts 的转发规则，我们可以通过正则或者内置的一些指令对我们需要进行代理的域名进行转发，添加插件等。</p>
<h3>安装启动</h3>
<p>安装 <code>whistle</code>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> whistle <span class="token parameter variable">-g</span>
</code></pre></div><p>启动 <code>whistle</code>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>w2 start
</code></pre></div><p>启动完成后，默认会在 <code>localhost:8899</code> 端口监听。</p>
<h3>设置代理</h3>
<h4>移动端</h4>
<p>电脑与手机连接同一 wifi，在手机端 wifi 中设置代理为手动，输入代理 ip（启动 <code>whistle</code> 后在控制台中打印的局域网 ip），端口号为 <code>8899</code>。</p>
<p>保存后移动端则已经设置好代理，在手机浏览器中访问互联网，即可以在 <code>whistle</code> 控制台中抓取到相应的网络请求。</p>
<h4>PC 端</h4>
<p>PC 端有时也需要通过 <code>whistle</code> 控制台设置代理修改请求信息或者配置 <code>source map</code> 文件，下面介绍如何使用 <code>Proxy switchyOmega</code> 插件设置代理。</p>
<p>在扩展商店中搜索安装 <code>Proxy switchyOmega</code> 插件，下载完成后，默认会有一个 <code>proxy</code> 的情景模式，设置代理服务器为 <code>127.0.0.1</code>，端口号为 <code>8899</code> 保存并应用选项。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240729163103.png" alt="设置情景模式" tabindex="0" loading="lazy"><figcaption>设置情景模式</figcaption></figure>
<p>这里还推荐修改一个配置，将默认配置改为系统代理，避免日常使用时被代理到 <code>whistle</code>，无法科学上网。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240729163028.png" alt="修改默认配置" tabindex="0" loading="lazy"><figcaption>修改默认配置</figcaption></figure>
<h3>安装证书</h3>
<p>参考 <a href="https://wproxy.org/whistle/webui/https.html" target="_blank" rel="noopener noreferrer">官方文档</a> 即可。</p>
<h2>真机调试</h2>
<p>打开 <code>whistle</code> 控制台，左侧有个 <code>Rules</code>，在这里面可以进行一些跳转规则的分组，配置。</p>
<h3>resMerge</h3>
<p>由于大部分 webapp 是嵌入到 webview 中，因此需要更改响应结果中的 <code>webAppUrl</code> 路径。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>https://xxxx resMerge://(webAppUrl=https://localhost:3000/index.html?isWebApp=true)
</code></pre></div><h3>tpl</h3>
<p>tpl 基本功能跟 file 一样可以做本地替换，但 tpl 内置了一个简单的模板引擎，可以把文件内容里面 <code>{name}</code> 替换请求参数对应的字段(如果不存在对应的自动则不会进行替换)，一般可用于 mock jsonp 的请求。</p>
<p>在 <code>values</code> 面板中创建一个文件，名字为 <code>mockConfig.json</code>，内容如下：</p>
<p>可以直接修改返回结果：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>https://xxxx tpl://{mockConfig.json}
</code></pre></div><h3>注入 eruda</h3>
<p>安装 <code>whistle.inspect</code> 插件，该插件即成了 <a href="https://github.com/liriliri/eruda" target="_blank" rel="noopener noreferrer">eruda</a> 等调试工具，用来在移动端页面上模拟 Chrome 开发者工具功能的模块。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>w2 i whistle.inspect
</code></pre></div><p>配置如下：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>https://localhost:3000/index.html whistle.inspect://eruda disable://cache
</code></pre></div><p>这个配置的作用是当访问到 <code>localhost:3000</code> 时，页面会自动注入 <code>eruda</code> 调试工具。</p>
<h2>Chrome inspect</h2>
<p>有些时候，使用 <code>whistle</code> 注入调试工具的效果并不是很好，因此我们可以使用 Chrome inspect 来替代。</p>
<h3>准备工作</h3>
<p>需要的工具：</p>
<ul>
<li>PC 安装 Chrome 浏览器</li>
<li>安卓手机</li>
<li>数据线</li>
</ul>
<h3>操作步骤</h3>
<p>打开手机开发者选项，允许 USB 调试。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>不同安卓设备打开方式不同，根据品牌谷歌搜索打开方式。</p>
</div>
<p>谷歌浏览器输入 <code>chrome://inspect/</code> 打开调试工具，点击 <code>inspect</code> 按钮即可调试网页。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240821141307.png" alt="inspect" tabindex="0" loading="lazy"><figcaption>inspect</figcaption></figure>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>应该只能调试 chrome 内核的浏览器。</p>
</div>
]]></content>
    <category term="practice"/>
    <published>2024-07-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">快速开始</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/01-quick-start.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/pixi/01-quick-start.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://pixijs.com/" target="_blank" rel="noopener noreferrer">PixiJS</a> 的核心是一个使用 WebGL（或 Canvas）显示图像或其他 <strong>2D</strong> 可视化内容的呈现系统。</p>
<p>它提供了一个完整的场景图（要呈现的对象的层次结构），并提供交互支持以处理点击和触摸事件。</p>
<p>在现代 HTML5 世界中，它是 Flash 的天然替代品，但却能提供更好的性能和像素级的效果，超越了 Flash 所能达到的水平。</p>
<p>它非常适合网络游戏、教育内容、交互式广告、数据可视化......任何基于网络的、需要复杂图形的应用程序。</p>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://pixijs.com/" target="_blank" rel="noopener noreferrer">PixiJS</a> 的核心是一个使用 WebGL（或 Canvas）显示图像或其他 <strong>2D</strong> 可视化内容的呈现系统。</p>
<p>它提供了一个完整的场景图（要呈现的对象的层次结构），并提供交互支持以处理点击和触摸事件。</p>
<p>在现代 HTML5 世界中，它是 Flash 的天然替代品，但却能提供更好的性能和像素级的效果，超越了 Flash 所能达到的水平。</p>
<p>它非常适合网络游戏、教育内容、交互式广告、数据可视化......任何基于网络的、需要复杂图形的应用程序。</p>
<p>与 Cordova 和 Electron 等技术相结合，PixiJS 应用程序可以作为移动和桌面应用程序在浏览器之外发布。</p>
<h2>创建 pixi 应用</h2>
<p><code>Application</code> 是一个简化 PixiJS 工作的辅助类。 它能创建呈现器、创建舞台并启动一个用于更新的 ticker。</p>
<p><code>Application</code> 类还有一个 <code>init</code> 方法，它将使用给定的选项初始化应用程序。因为 PixiJS 使用了 WebGPU，因此该方法是异步的。</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://pixijs.download/release/pixi.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello PixiJS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">360</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240719160224.png" alt="create pixi app" tabindex="0" loading="lazy"><figcaption>create pixi app</figcaption></figure>
<h2>创建 Sprite</h2>
<p>到目前为止，我们所做的只是准备工作。 我们还没有告诉 PixiJS 绘制任何东西。 让我们添加一张要显示的图片来解决这个问题。</p>
<p>在 PixiJS 中绘制图像有多种方法，但最简单的方法是使用 <a href="https://pixijs.download/release/docs/scene.Sprite.html" target="_blank" rel="noopener noreferrer">Sprite</a>。 Sprite 是一种容器类型，它封装了加载的图像资源，允许对其进行绘制、缩放、旋转等操作。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// load the PNG asynchronously</span>
<span class="token keyword">await</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'sample.png'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> sprite <span class="token operator">=</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Sprite<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'sample.png'</span><span class="token punctuation">)</span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/sample.png" alt="sample" tabindex="0" loading="lazy"><figcaption>sample</figcaption></figure>
<h2>将 Sprite 添加至 Stage</h2>
<p>最后，我们需要将 Sprite 添加到 Stage 上。Stage 只是一个容器，是场景图的根。Stage 容器的每个子容器都将在每一帧中进行渲染。将 Sprite 添加到 Stage 后，我们就告诉了 PixiJS 的渲染器我们要绘制它。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span>
</code></pre></div><h2>更新 loop</h2>
<p>虽然可以将 PixiJS 用于静态内容，但对于大多数项目而言，都希望添加动画。</p>
<p>示例应用程序希望每秒在同一位置多次渲染同一个 Sprite。</p>
<p>要使图像移动，我们只需每帧更新一次属性即可。为此，我们要挂钩应用程序的 <code>ticker</code>。<code>ticker</code> 是一个 PixiJS 对象，每帧运行一个或多个回调。</p>
<p>只需调用 <code>app.ticker.add(...)</code>，给它传递一个回调函数，然后在该函数中更新场景。它将在每一帧中被调用，你可以移动、旋转等任何你想要的方式来驱动项目的动画。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Add a variable to count up the seconds our demo has been running</span>
<span class="token keyword">let</span> elapsed <span class="token operator">=</span> <span class="token number">0.0</span>
<span class="token comment">// Tell our application's ticker to run a new callback every frame, passing</span>
<span class="token comment">// in the amount of time that has passed since the last tick</span>
app<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ticker</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Add the time to our total elapsed time</span>
  elapsed <span class="token operator">+=</span> ticker<span class="token punctuation">.</span>deltaTime
  <span class="token comment">// Update the sprite's X position based on the cosine of our elapsed time.  We divide</span>
  <span class="token comment">// by 50 to slow the animation down a bit...</span>
  sprite<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>elapsed <span class="token operator">/</span> <span class="token number">50.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100.0</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2>all done</h2>
<p>现在，我们已经创建了一个简单的应用程序，可以在浏览器中运行。</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://pixijs.download/release/pixi.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token comment">// Create the application helper and add its render target to the page</span>
      <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">360</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span>

      <span class="token comment">// Create the sprite and add it to the stage</span>
      <span class="token keyword">await</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'sample.png'</span><span class="token punctuation">)</span>
      <span class="token keyword">let</span> sprite <span class="token operator">=</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Sprite<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'sample.png'</span><span class="token punctuation">)</span>
      app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span>

      <span class="token comment">// Add a ticker callback to move the sprite back and forth</span>
      <span class="token keyword">let</span> elapsed <span class="token operator">=</span> <span class="token number">0.0</span>
      app<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ticker</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        elapsed <span class="token operator">+=</span> ticker<span class="token punctuation">.</span>deltaTime
        sprite<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>elapsed <span class="token operator">/</span> <span class="token number">50.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100.0</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></content>
    <category term="Pixi"/>
    <published>2024-07-19T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">数据库结构设计</title>
    <id>https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/03-database.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/03-database.html"/>
    <updated>2024-12-17T10:16:46.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>Deprecated. 已改用 prisma + Mysql 数据库。</p>
</div>
<h2>数据库选择</h2>
<p>选择使用云数据库 <a href="https://docs.turso.tech/introduction" target="_blank" rel="noopener noreferrer">turso</a>。</p>
<p>Turso 是一个兼容 SQLite 的数据库，基于 libSQL（SQLite 的开放贡献分叉）构建。 它可以将每个组织的数据库扩展到数十万个，并支持复制到任何位置，包括您自己的服务器，以实现微秒级延迟访问。</p>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>Deprecated. 已改用 prisma + Mysql 数据库。</p>
</div>
<h2>数据库选择</h2>
<p>选择使用云数据库 <a href="https://docs.turso.tech/introduction" target="_blank" rel="noopener noreferrer">turso</a>。</p>
<p>Turso 是一个兼容 SQLite 的数据库，基于 libSQL（SQLite 的开放贡献分叉）构建。 它可以将每个组织的数据库扩展到数十万个，并支持复制到任何位置，包括您自己的服务器，以实现微秒级延迟访问。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> InStatement<span class="token punctuation">,</span> LibsqlError<span class="token punctuation">,</span> createClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@libsql/client'</span>

<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  url<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TURSO_URL</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">,</span>
  authToken<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TURSO_AUTH_TOKEN</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2>user</h2>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">"user"</span> <span class="token punctuation">(</span>
  ID <span class="token keyword">INTEGER</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> AUTOINCREMENT<span class="token punctuation">,</span>
  name <span class="token keyword">TEXT</span>
<span class="token punctuation">,</span> password <span class="token keyword">TEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>category</h2>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> category <span class="token punctuation">(</span>
id <span class="token keyword">INTEGER</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
name <span class="token keyword">TEXT</span><span class="token punctuation">,</span>
description <span class="token keyword">TEXT</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>commodity</h2>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> commodity <span class="token punctuation">(</span>
id <span class="token keyword">INTEGER</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
name <span class="token keyword">TEXT</span><span class="token punctuation">,</span>
price <span class="token keyword">REAL</span><span class="token punctuation">,</span>
description <span class="token keyword">TEXT</span><span class="token punctuation">,</span>
category_id <span class="token keyword">INTEGER</span><span class="token punctuation">,</span>
<span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>category_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> category<span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>]]></content>
    <category term="Project"/>
    <published>2024-07-11T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">服务器架构设计</title>
    <id>https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/02-server.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/02-server.html"/>
    <updated>2024-12-17T10:16:46.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>Deprecated. 已改用 nest.js 框架。</p>
</div>
<h2>分层架构</h2>
<h3>route</h3>
<p>分发路由，如：<code>/category</code>。匹配后的路由包含 <code>controller</code> 和 路由特定的 <code>middleware</code>。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Router</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> Route <span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Route</span> <span class="token punctuation">{</span>
  controller<span class="token operator">:</span> Controller<span class="token punctuation">;</span>
  middlewares<span class="token operator">?</span><span class="token operator">:</span> Middleware<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// route-specific middleware</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>Deprecated. 已改用 nest.js 框架。</p>
</div>
<h2>分层架构</h2>
<h3>route</h3>
<p>分发路由，如：<code>/category</code>。匹配后的路由包含 <code>controller</code> 和 路由特定的 <code>middleware</code>。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Router</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> Route <span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Route</span> <span class="token punctuation">{</span>
  controller<span class="token operator">:</span> Controller<span class="token punctuation">;</span>
  middlewares<span class="token operator">?</span><span class="token operator">:</span> Middleware<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// route-specific middleware</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>middleware</h3>
<p>中间件，处理请求中间逻辑，比如：<code>cors</code>、<code>auth</code> 等。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Middleware</span> <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token operator">:</span> CustomIncomingMessage<span class="token punctuation">,</span> res<span class="token operator">:</span> ServerResponse<span class="token punctuation">,</span> <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>

<span class="token doc-comment comment">/**
 * Manage the execution order of middleware functions.
 * It allows you to add multiple middleware functions to a queue
 * and execute them sequentially during a request.
 *
 * <span class="token keyword">@export</span>
 * <span class="token keyword">@class</span> MiddlewareManager
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MiddlewareManager</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">readonly</span> middlewares<span class="token operator">:</span> Middleware<span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>middlewares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token function">use</span><span class="token punctuation">(</span>func<span class="token operator">:</span> Middleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>middlewares<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">run</span><span class="token punctuation">(</span>req<span class="token operator">:</span> CustomIncomingMessage<span class="token punctuation">,</span> res<span class="token operator">:</span> ServerResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">runner</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> middleware <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>middlewares<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>middleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">middleware</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">runner</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">runner</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>以 <code>corsMiddleware</code> 为例：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> corsMiddleware <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token operator">:</span> <span class="token punctuation">{</span> origin<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> methods<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> credentials<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> Middleware <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>origin<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>methods<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">'Content-Type, Authorization'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>credentials<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Credentials'</span><span class="token punctuation">,</span> <span class="token string">'true'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Handle preflight requests</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'OPTIONS'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">204</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> corsMiddleware
</code></pre></div><h3>controller</h3>
<p>控制层，处理请求参数和请求体数据，分发业务逻辑。一个抽象基类，提供 <code>sendResponse</code> 和 <code>sendError</code> 方法。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Controller</span> <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token operator">:</span> CustomIncomingMessage<span class="token punctuation">,</span> res<span class="token operator">:</span> ServerResponse<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>

<span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseController</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token function">sendResponse</span><span class="token punctuation">(</span>statusCode<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span> res<span class="token operator">:</span> ServerResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span>

    <span class="token comment">// handle bigint</span>
    <span class="token keyword">let</span> responseData<span class="token operator">:</span> <span class="token builtin">unknown</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">'bigint'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&lt;=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token operator">&amp;&amp;</span> data <span class="token operator">&gt;=</span> Number<span class="token punctuation">.</span><span class="token constant">MIN_SAFE_INTEGER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        responseData <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        responseData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      responseData <span class="token operator">=</span> data
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> response<span class="token operator">:</span> Response <span class="token operator">=</span> <span class="token punctuation">{</span>
      code<span class="token operator">:</span> statusCode<span class="token punctuation">,</span>
      message<span class="token operator">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> responseData
    <span class="token punctuation">}</span>

    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">protected</span> <span class="token function">sendError</span><span class="token punctuation">(</span>statusCode<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> res<span class="token operator">:</span> ServerResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span>
    <span class="token keyword">const</span> response<span class="token operator">:</span> Response <span class="token operator">=</span> <span class="token punctuation">{</span>
      code<span class="token operator">:</span> statusCode<span class="token punctuation">,</span>
      message<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> error<span class="token operator">:</span> message <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>以 <code>UserController</code> 为例：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">BaseController</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> userService<span class="token operator">:</span> UserService

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">signIn</span><span class="token punctuation">(</span>req<span class="token operator">:</span> CustomIncomingMessage<span class="token punctuation">,</span> res<span class="token operator">:</span> ServerResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token generic-function"><span class="token function">getRequestBody</span><span class="token generic class-name"><span class="token operator">&lt;</span>SignInParams<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>

      <span class="token comment">// TODO: verify parameters.</span>

      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">signIn</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>

      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'All time: '</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span>
      UserController<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>code<span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> response<span class="token punctuation">.</span>message <span class="token punctuation">}</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      UserController<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">'Internal Server Error'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
      <span class="token keyword">throw</span> error
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>service</h3>
<p>服务层，处理业务逻辑。<code>BaseService</code> 为抽象基类，提供 <code>db</code> 属性。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseService</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span> db<span class="token operator">:</span> <span class="token constant">DB</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>db <span class="token operator">=</span> <span class="token constant">DB</span><span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>以 <code>UserService</code> 为例：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseService</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// sign-in</span>
  <span class="token keyword">async</span> <span class="token function">signIn</span><span class="token punctuation">(</span>data<span class="token operator">:</span> SignInParams<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Response<span class="token operator">&lt;</span><span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token string">'SELECT * FROM users WHERE name = ?'</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sql<span class="token punctuation">,</span> args<span class="token operator">:</span> <span class="token punctuation">[</span>data<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> usersInfo<span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>rows<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      id<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
      password<span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>password<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// Check if the user exists.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>usersInfo<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        code<span class="token operator">:</span> <span class="token number">401</span><span class="token punctuation">,</span>
        message<span class="token operator">:</span> <span class="token string">'Access to the requested resource is unauthorized. Please authenticate.'</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span> <span class="token keyword">null</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Check if the password matches.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>usersInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>password <span class="token operator">!==</span> data<span class="token punctuation">.</span>password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        code<span class="token operator">:</span> <span class="token number">401</span><span class="token punctuation">,</span>
        message<span class="token operator">:</span> <span class="token string">'Access to the requested resource is unauthorized. Please authenticate.'</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span> <span class="token keyword">null</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// All checks passed, return success message or token</span>
    <span class="token comment">// TODO: generate token.</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> code<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">'Login successful'</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>dao</h3>
<p>数据访问层，处理数据查询。提供 <code>execute</code> 方法执行 <code>sql</code>。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token constant">DB</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> instance<span class="token operator">:</span> <span class="token constant">DB</span>

  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">DB</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token constant">DB</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">DB</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">DB</span><span class="token punctuation">.</span>instance
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">execute</span><span class="token punctuation">(</span>stmt<span class="token operator">:</span> InStatement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Query time: '</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span>
      <span class="token keyword">return</span> res
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">LibsqlError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Execution failed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">An error occurred: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">DB</span>
</code></pre></div><h2>其他细节</h2>
<h3>请求体处理</h3>
<p>目前允许 <code>POST</code> 和 <code>PUT</code> 请求携带请求体。</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> getRequestBody <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>req<span class="token operator">:</span> CustomIncomingMessage<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">!==</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>method <span class="token operator">!==</span> <span class="token string">'PUT'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">''</span>
      req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunk<span class="token operator">:</span> Buffer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        postData <span class="token operator">+=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>postData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">)</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>路径参数处理</h3>
<p>路由规则：<code>method</code> + <code>path</code> + <code>query</code>，如 <code>GET/category/:id</code>。</p>
<p>其中 <code>path</code> 需要进行参数处理，如：<code>/category/:id</code>。处理完后参数类型应为 <code>params: Record&lt;string, string&gt;</code>，因为可能存在多个参数。</p>
<p>解析完成后，<code>controller</code> 中需要接收 <code>params</code>，需要将 <code>params</code> 转换为 <code>request.params</code>。</p>
<p>具体逻辑如下：</p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * Execute route's middleware and controller.
 *
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>CustomIncomingMessage<span class="token punctuation">}</span> req
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>ServerResponse<span class="token punctuation">}</span> res
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>Route<span class="token punctuation">}</span> route
 */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span>
  req<span class="token operator">:</span> CustomIncomingMessage<span class="token punctuation">,</span>
  res<span class="token operator">:</span> ServerResponse<span class="token punctuation">,</span>
  route<span class="token operator">:</span> Route<span class="token punctuation">,</span>
  params<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mwManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MiddlewareManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  req<span class="token punctuation">.</span>params <span class="token operator">=</span> params

  <span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">corsMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    origin<span class="token operator">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token string">'GET,HEAD,PUT,PATCH,POST,DELETE'</span><span class="token punctuation">,</span>
    credentials<span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  mwManager<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>cors<span class="token punctuation">)</span>

  route<span class="token punctuation">.</span>middlewares<span class="token operator">?.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> mwManager<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">)</span>
  mwManager<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>controller<span class="token punctuation">)</span>
  <span class="token keyword">await</span> mwManager<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Matches the provided method and pathname to a route in the Router.
 *
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>string<span class="token punctuation">}</span> method - The HTTP method to match.
 * <span class="token keyword">@param</span> <span class="token punctuation">{</span>string<span class="token punctuation">}</span> pathname - The URL pathname to match.
 * <span class="token keyword">@return</span> <span class="token punctuation">{</span>Object<span class="token punctuation">}</span> An object containing the matched route and parameters.
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">matchRoute</span> <span class="token operator">=</span> <span class="token punctuation">(</span>method<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> pathname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> router <span class="token keyword">in</span> Router<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>routeMethod<span class="token punctuation">,</span> <span class="token operator">...</span>routeParts<span class="token punctuation">]</span> <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> routeMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> pathParts <span class="token operator">=</span> pathname<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>routeMethod<span class="token punctuation">,</span> routeParts<span class="token punctuation">,</span> pathParts<span class="token punctuation">,</span> pathname<span class="token punctuation">)</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>routeParts<span class="token punctuation">.</span>length <span class="token operator">===</span> pathParts<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> params<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">let</span> match <span class="token operator">=</span> <span class="token boolean">true</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> routeParts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>routeParts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            params<span class="token punctuation">[</span>routeParts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> pathParts<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>routeParts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> pathParts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            match <span class="token operator">=</span> <span class="token boolean">false</span>
            <span class="token keyword">break</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> route<span class="token operator">:</span> Router<span class="token punctuation">[</span>router<span class="token punctuation">]</span><span class="token punctuation">,</span> params <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> route<span class="token operator">:</span> notFound<span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content>
    <category term="Project"/>
    <published>2024-07-11T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">rest client 无法调试 localhost</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/016-rest-client-error.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/016-rest-client-error.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>故障描述</h2>
<p>REST Client 插件无法调试 localhost。</p>
<ul>
<li>REST Client: v0.25.1</li>
<li>VS code: 1.91.1</li>
</ul>
<p>本地启动 node 服务，使用 REST Client 发送请求：</p>
<div class="language-http" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">http://127.0.0.1:8000/</span> <span class="token http-version property">HTTP/1.1</span></span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>故障描述</h2>
<p>REST Client 插件无法调试 localhost。</p>
<ul>
<li>REST Client: v0.25.1</li>
<li>VS code: 1.91.1</li>
</ul>
<p>本地启动 node 服务，使用 REST Client 发送请求：</p>
<div class="language-http" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">http://127.0.0.1:8000/</span> <span class="token http-version property">HTTP/1.1</span></span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240719143258.png" alt="报错" tabindex="0" loading="lazy"><figcaption>报错</figcaption></figure>
<h2>排查</h2>
<p>初步怀疑是走了代理，但是查看代理软件日志，发现并没有可疑请求走了国外代理。</p>
<p>最终在 github 中找到了一个 issue: <a href="https://github.com/Huachao/vscode-restclient/issues/1163" target="_blank" rel="noopener noreferrer">Rest client ceased to work</a>。</p>
<p>并在下方回答中找到：<a href="https://github.com/Huachao/vscode-restclient/issues/1145" target="_blank" rel="noopener noreferrer">ECONNREFUSED - Connection was Rejected</a>。</p>
<p>将代码改为以下即可成功：</p>
<div class="language-http" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">http://[::1]:8000/</span> <span class="token http-version property">HTTP/1.1</span></span>
</code></pre></div>]]></content>
    <category term="practice"/>
    <published>2024-07-19T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">dnd-kit 踩坑</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/001-dnd-kit.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/001-dnd-kit.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>@dnd-kit - 用于 React 的轻量级、模块化、高性能、可访问和可扩展的拖放工具包。</p>
<h2>Context Provider</h2>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token function-variable function">SortableItem</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token function-variable function">itemRender</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ReactElement
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> attributes<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> setNodeRef<span class="token punctuation">,</span> transform<span class="token punctuation">,</span> transition <span class="token punctuation">}</span> <span class="token operator">=</span>
    <span class="token function">useSortable</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> props<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span>
    transform<span class="token operator">:</span> <span class="token constant">CSS</span><span class="token punctuation">.</span>Transform<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span><span class="token punctuation">,</span>
    transition<span class="token operator">:</span> transition<span class="token operator">!</span><span class="token punctuation">,</span>
    cursor<span class="token operator">:</span> <span class="token string">'move'</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
      <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-2<span class="token punctuation">"</span></span>
      <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setNodeRef<span class="token punctuation">}</span></span>
      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token operator">...</span>style <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>attributes<span class="token punctuation">}</span></span>
      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>listeners<span class="token punctuation">}</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span><span class="token function">itemRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>@dnd-kit - 用于 React 的轻量级、模块化、高性能、可访问和可扩展的拖放工具包。</p>
<h2>Context Provider</h2>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token function-variable function">SortableItem</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token function-variable function">itemRender</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ReactElement
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> attributes<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> setNodeRef<span class="token punctuation">,</span> transform<span class="token punctuation">,</span> transition <span class="token punctuation">}</span> <span class="token operator">=</span>
    <span class="token function">useSortable</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> props<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span>
    transform<span class="token operator">:</span> <span class="token constant">CSS</span><span class="token punctuation">.</span>Transform<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span><span class="token punctuation">,</span>
    transition<span class="token operator">:</span> transition<span class="token operator">!</span><span class="token punctuation">,</span>
    cursor<span class="token operator">:</span> <span class="token string">'move'</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
      <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-2<span class="token punctuation">"</span></span>
      <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setNodeRef<span class="token punctuation">}</span></span>
      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token operator">...</span>style <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>attributes<span class="token punctuation">}</span></span>
      <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>listeners<span class="token punctuation">}</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span><span class="token function">itemRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>踩坑</h2>
<h3>dnd kit 会将鼠标点击事件识别为拖拽事件</h3>
<p><a href="https://github.com/clauderic/dnd-kit/issues/1204" target="_blank" rel="noopener noreferrer">https://github.com/clauderic/dnd-kit/issues/1204</a></p>
<p><a href="https://github.com/clauderic/dnd-kit/issues/893" target="_blank" rel="noopener noreferrer">https://github.com/clauderic/dnd-kit/issues/893</a></p>
<p>需要注册一些传感器：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sensor <span class="token operator">=</span> <span class="token function">useSensor</span><span class="token punctuation">(</span>PointerSensor<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">activationConstraint</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">distance</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3>条件拖拽</h3>
<p>让元素在某些条件下允许排序：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> attributes<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> setNodeRef<span class="token punctuation">,</span> transform<span class="token punctuation">,</span> transition <span class="token punctuation">}</span> <span class="token operator">=</span>
  <span class="token function">useSortable</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> props<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token literal-property property">disabled</span><span class="token operator">:</span> props<span class="token punctuation">.</span>disabled <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3>video 元素无法被拖拽</h3>
<p>外层包裹一个 <code>div</code>。</p>
<div class="language-tsx" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">.</span>videoItem<span class="token punctuation">}</span></span>
  <span class="token attr-name">onMouseEnter</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    videoRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">onMouseLeave</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    videoRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span>
    <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>videoRef<span class="token punctuation">}</span></span>
    <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>resource<span class="token punctuation">.</span>resourceUrl<span class="token punctuation">}</span></span>
    <span class="token attr-name">controls</span>
    <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">.</span>video<span class="token punctuation">}</span></span>
    <span class="token attr-name">muted</span>
    <span class="token attr-name">loop</span>
  <span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>track</span> <span class="token attr-name">kind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>captions<span class="token punctuation">"</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3>拖拽动画异常</h3>
<p>排序策略</p>
<p>需要选择默认</p>
<h3>无限拖拽出现滚动条</h3>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>modifiers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>restrictToFirstScrollableAncestor<span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre></div><h3>鼠标跟手</h3>
<p><a href="https://github.com/clauderic/dnd-kit/issues/122" target="_blank" rel="noopener noreferrer">https://github.com/clauderic/dnd-kit/issues/122</a><br>
<a href="https://github.com/clauderic/dnd-kit/pull/334" target="_blank" rel="noopener noreferrer">https://github.com/clauderic/dnd-kit/pull/334</a></p>
<p><a href="https://github.com/clauderic/dnd-kit/blob/master/stories/components/Draggable/DraggableOverlay.tsx" target="_blank" rel="noopener noreferrer">https://github.com/clauderic/dnd-kit/blob/master/stories/components/Draggable/DraggableOverlay.tsx</a></p>
]]></content>
    <category term="practice"/>
    <published>2023-11-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">自动切换 node 版本</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/015-auto-change-node.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/015-auto-change-node.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>环境准备</h2>
<ol>
<li>安装 <code>nvm</code><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre></div></li>
<li>安装 <code>oh-my-zsh</code>：<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span>
</code></pre></div></li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h2>环境准备</h2>
<ol>
<li>安装 <code>nvm</code><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre></div></li>
<li>安装 <code>oh-my-zsh</code>：<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span>
</code></pre></div></li>
</ol>
<h2>配置 <code>.zshrc</code></h2>
<p>在 <code>.zshrc</code> 下新增以下内容：<code>vi ~/.zshrc</code></p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Load nvm and set up automatic version switching</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">${XDG_CONFIG_HOME-}</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">printf</span> %s <span class="token string">"<span class="token variable">${<span class="token environment constant">HOME</span>}</span>/.nvm"</span> <span class="token operator">||</span> <span class="token builtin class-name">printf</span> %s <span class="token string">"<span class="token variable">${XDG_CONFIG_HOME}</span>/nvm"</span><span class="token variable">)</span></span>"</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token comment"># This loads nvm</span>

<span class="token comment"># Enable oh-my-zsh plugins</span>
<span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>git z nvm zsh-syntax-highlighting zsh-autosuggestions<span class="token punctuation">)</span>

<span class="token comment"># Load oh-my-zsh</span>
<span class="token builtin class-name">source</span> <span class="token variable">$ZSH</span>/oh-my-zsh.sh

<span class="token comment"># oh-my-zsh nvm plugin settings</span>
zstyle <span class="token string">':omz:plugins:nvm'</span> lazy <span class="token function">yes</span>
zstyle <span class="token string">':omz:plugins:nvm'</span> autoload <span class="token function">yes</span>
zstyle <span class="token string">':omz:plugins:nvm'</span> silent-autoload <span class="token function">yes</span>

<span class="token comment"># Load nvm automatically when changing directories</span>
autoload <span class="token parameter variable">-U</span> add-zsh-hook
<span class="token function-name function">load-nvmrc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-f</span> .nvmrc <span class="token operator">&amp;&amp;</span> <span class="token parameter variable">-r</span> .nvmrc <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    nvm use
  <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span>nvm version<span class="token variable">)</span></span> <span class="token operator">!=</span> <span class="token variable"><span class="token variable">$(</span>nvm version default<span class="token variable">)</span></span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    nvm use default
  <span class="token keyword">fi</span>
<span class="token punctuation">}</span>
add-zsh-hook chpwd load-nvmrc
load-nvmrc
</code></pre></div><p>保存 <code>.zshrc</code> 文件后，重启终端或重新加载配置：<code>source ~/.zshrc</code>。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>oh-my-zsh</code> 中的 <code>nvm</code> 提供了一些快捷命令和自动补全功能，使得使用 nvm (Node Version Manager) 更加便捷。</p>
</div>
<h2>添加 <code>.nvmrc</code></h2>
<p>项目根目录下创建 <code>.nvmrc</code> 文件，内容为 <code>v20.10.0</code>。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240718145716.png" alt="auto-change-node" tabindex="0" loading="lazy"><figcaption>auto-change-node</figcaption></figure>
]]></content>
    <category term="practice"/>
    <published>2024-07-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">快速开始</title>
    <id>https://dribble-njr.github.io/blog/blog/backend/database/sql/01-quick-start.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/backend/database/sql/01-quick-start.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>SQL (Structured Query Language:结构化查询语言) 是用于管理关系数据库管理系统。</p>
<p>SQL 通过一系列的语句和命令来执行数据定义、数据查询、数据操作和数据控制等功能,包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。</p>
<h2>SQL 是什么？</h2>
<ul>
<li>SQL 指结构化查询语言，全称是 Structured Query Language。</li>
<li>SQL 让您可以访问和处理数据库，包括数据插入、查询、更新和删除。</li>
<li>SQL 语言采用英语关键词，使其易读易写。</li>
<li>SQL 由国际标准化组织（ISO）和美国国家标准协会（ANSI）标准化。</li>
<li>SQL 提供了丰富的操作数据的功能，从简单的查询到复杂的数据库管理操作。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>SQL (Structured Query Language:结构化查询语言) 是用于管理关系数据库管理系统。</p>
<p>SQL 通过一系列的语句和命令来执行数据定义、数据查询、数据操作和数据控制等功能,包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。</p>
<h2>SQL 是什么？</h2>
<ul>
<li>SQL 指结构化查询语言，全称是 Structured Query Language。</li>
<li>SQL 让您可以访问和处理数据库，包括数据插入、查询、更新和删除。</li>
<li>SQL 语言采用英语关键词，使其易读易写。</li>
<li>SQL 由国际标准化组织（ISO）和美国国家标准协会（ANSI）标准化。</li>
<li>SQL 提供了丰富的操作数据的功能，从简单的查询到复杂的数据库管理操作。</li>
</ul>
<h2>SQL 能做什么？</h2>
<ul>
<li>SQL 面向数据库执行查询</li>
<li>SQL 可从数据库取回数据</li>
<li>SQL 可在数据库中插入新的记录</li>
<li>SQL 可更新数据库中的数据</li>
<li>SQL 可从数据库删除记录</li>
<li>SQL 可创建新数据库</li>
<li>SQL 可在数据库中创建新表</li>
<li>SQL 可在数据库中创建存储过程</li>
<li>SQL 可在数据库中创建视图</li>
<li>SQL 可以设置表、存储过程和视图的权限</li>
</ul>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>虽然 SQL 是一门 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言，但是仍然存在着多种不同版本的 SQL 语言。</p>
<p>然而，为了与 ANSI 标准相兼容，它们必须以相似的方式共同地来支持一些主要的命令（比如 SELECT、UPDATE、DELETE、INSERT、WHERE 等等）。</p>
</div>
<h2>SQL 发展历史</h2>
<p>以下是 SQL 发展历史的关键节点：</p>
<h3>1970s: 起源与早期发展</h3>
<ol>
<li>1970 年：埃德加·科德（Edgar F. Codd）发表了《A Relational Model of Data for Large Shared Data Banks》论文，提出了关系数据库的概念，为 SQL 的发展奠定了理论基础。</li>
<li>1973 年-1974 年：IBM 的研究人员 Donald D. Chamberlin 和 Raymond F. Boyce 在科德的理论基础上开发了一种名为 SEQUEL（Structured English Query Language）的语言，用于操作和管理 IBM 的 System R 关系数据库。</li>
<li>1976 年：SEQUEL 更名为 SQL（Structured Query Language）。</li>
</ol>
<h3>1980s: 标准化与商业化</h3>
<ol start="4">
<li>1981 年：IBM 推出了商用关系数据库系统 SQL/DS（Database System）和 DB2（Database 2）。</li>
<li>1986 年：美国国家标准协会（ANSI）发布了第一个 SQL 标准 ANSI SQL-86（SQL-87）。</li>
<li>1987 年：国际标准化组织（ISO）也采纳了 ANSI SQL-86 作为国际标准。</li>
</ol>
<h3>1990s: 扩展与改进</h3>
<ol start="7">
<li>1992 年：发布了 SQL-92（SQL2）标准，显著扩展了 SQL 语言的功能，包括对新数据类型、嵌套查询和连接的支持。</li>
<li>1999 年：发布了 SQL:1999（SQL3）标准，引入了对象关系数据库（ORDBMS）特性、递归查询、触发器和用户定义函数。</li>
</ol>
<h3>2000s: 持续演进与新特性</h3>
<ol start="9">
<li>2003 年：发布了 SQL:2003 标准，引入了 XML 相关特性和窗口函数。</li>
<li>2006 年：发布了 SQL:2006 标准，主要增强了对 XML 的支持。</li>
<li>2008 年：发布了 SQL:2008 标准，进一步改进了语法和性能优化。</li>
</ol>
<h3>2010s: 新功能与大数据支持</h3>
<ol start="12">
<li>2011 年：发布了 SQL:2011 标准，增加了对时间数据类型和时间旅行（temporal data）的支持。</li>
<li>2016 年：发布了 SQL:2016 标准，引入了 JSON 数据类型和相关操作函数，适应了 NoSQL 数据库和大数据处理需求。</li>
</ol>
<h3>2020s: 现代化与标准更新</h3>
<ol start="14">
<li>2023 年：最新的 SQL 标准持续改进，增加了对更现代化的数据库需求和特性的支持。</li>
</ol>
<h2>总结</h2>
<p>SQL 从一种基于关系模型的查询语言发展成为现代数据库管理的核心语言，其标准在不断演进和扩展。</p>
<p>各大数据库管理系统（如 MySQL、PostgreSQL、SQLite、SQL Server、Oracle 等）在遵循 SQL 标准的基础上，加入了自身的扩展和优化，使 SQL 成为数据操作和管理的强大工具。</p>
<p>SQL 的发展不仅体现了技术的进步，也反映了数据管理需求的变化和增长。</p>
]]></content>
    <category term="database"/>
    <published>2024-07-17T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">修改提交</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pro-git/06-change-commit.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pro-git/06-change-commit.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>修改提交信息</h2>
<p>在 Git 中，修改提交是通过 <code>git commit --amend</code> 命令来完成的。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
</code></pre></div><p>此时就能出现一个交互式的修改提交窗口，可以修改提交信息，添加文件，或者删除文件。</p>]]></summary>
    <content type="html"><![CDATA[<h2>修改提交信息</h2>
<p>在 Git 中，修改提交是通过 <code>git commit --amend</code> 命令来完成的。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
</code></pre></div><p>此时就能出现一个交互式的修改提交窗口，可以修改提交信息，添加文件，或者删除文件。</p>
<h2>修改作者信息</h2>
<p>由于某次提交时不小心将 <code>git user</code> 改成了其他账户，在后续 <code>commit</code> 时提交了错误的用户信息，需要手动修改：<code>git rebase -i &lt;commit-hash&gt;</code>。</p>
<p>意为从当前 <code>commit</code> 后的所有提交。将 <code>pick</code> 改为 <code>edit</code>，并使用 <code>git commit --amend --author="Author Name &lt;email&gt;"</code> 修改用户。</p>
<p>满意后使用 <code>git rebase --continue</code> 关闭本次修改。</p>
]]></content>
    <category term="READING"/>
    <published>2024-07-10T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">手写 new 操作符</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/014-implement-new.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/014-implement-new.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p><code>new</code> 操作符的实现过程：</p>
<ol>
<li>首先创建一个空对象；</li>
<li>将空对象的隐式原型 <code>[[prototype]]</code> 赋值为构造函数的 <code>prototype</code> 对象；</li>
<li>让构造函数的 <code>this</code> 指向这个空对象，执行构造函数的代码；</li>
<li>判断构造函数返回值的类型，如果是基本类型，则返回创建的对象，如果是引用类型，则返回这个引用类型。</li>
</ol>
<p>那么具体实现可以这么做：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">newOperator</span><span class="token punctuation">(</span><span class="token parameter">constructor<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> constructor <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'type error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建一个新对象，并将构造函数的 prototype 对象作为它的原型</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
  <span class="token comment">// 执行构造函数的代码</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token comment">// 判断返回值的类型</span>
  <span class="token keyword">let</span> flag <span class="token operator">=</span> res <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> flag <span class="token operator">?</span> res <span class="token operator">:</span> instance
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">newOperator</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">// Person { name: 'wang', age: 18 }</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p><code>new</code> 操作符的实现过程：</p>
<ol>
<li>首先创建一个空对象；</li>
<li>将空对象的隐式原型 <code>[[prototype]]</code> 赋值为构造函数的 <code>prototype</code> 对象；</li>
<li>让构造函数的 <code>this</code> 指向这个空对象，执行构造函数的代码；</li>
<li>判断构造函数返回值的类型，如果是基本类型，则返回创建的对象，如果是引用类型，则返回这个引用类型。</li>
</ol>
<p>那么具体实现可以这么做：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">newOperator</span><span class="token punctuation">(</span><span class="token parameter">constructor<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> constructor <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'type error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建一个新对象，并将构造函数的 prototype 对象作为它的原型</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
  <span class="token comment">// 执行构造函数的代码</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token comment">// 判断返回值的类型</span>
  <span class="token keyword">let</span> flag <span class="token operator">=</span> res <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> flag <span class="token operator">?</span> res <span class="token operator">:</span> instance
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">newOperator</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">// Person { name: 'wang', age: 18 }</span>
</code></pre></div>]]></content>
    <category term="JavaScript"/>
    <published>2022-08-23T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">类</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/013-class.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/013-class.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>声明</h2>
<p>与函数类型相似，定义类也有两种主要方式：类声明和类表达式。这两种方式都使用 <code>class</code> 关键字加大括号：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 类声明</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 类表达式</span>
<span class="token keyword">const</span> Person <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>声明</h2>
<p>与函数类型相似，定义类也有两种主要方式：类声明和类表达式。这两种方式都使用 <code>class</code> 关键字加大括号：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 类声明</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 类表达式</span>
<span class="token keyword">const</span> Person <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>与函数声明不同：</p>
<ol>
<li>类声明不会被提升。</li>
<li>函数受函数作用域限制，而类受块作用域限制。</li>
</ol>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">FunctionDeclaration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">class</span> <span class="token class-name">ClassDeclaration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>FunctionDeclaration<span class="token punctuation">)</span> <span class="token comment">// FunctionDeclaration() {}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ClassDeclaration<span class="token punctuation">)</span> <span class="token comment">// ReferenceError: ClassDeclaration is not defined</span>
</code></pre></div></div>
<h2>类构造函数</h2>
<p>类构造函数是类的一个特殊方法，通过 <code>new</code> 关键字创建类的实例时，会自动调用构造函数。构造函数的名称必须是 <code>constructor</code>，如果没有定义构造函数，会默认添加一个空的构造函数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>使用 <code>new</code> 调用类的构造函数会执行如下操作。</p>
<ol>
<li>在内存中创建一个新对象。</li>
<li>这个新对象内部的 <code>[[Prototype]]</code> 指针被赋值为构造函数的 <code>prototype</code> 属性。</li>
<li>构造函数内部的 <code>this</code> 被赋值为这个新对象（即 <code>this</code> 指向新对象）。</li>
<li>执行构造函数内部的代码（给新对象添加属性）。</li>
<li>如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。</li>
</ol>
<h2>实例、原型和类成员</h2>
<h3>实例成员</h3>
<p>每次通过 <code>new</code> 调用类标识符时，都会执行类构造函数。在这个函数内部，可以为新创建的实例（this）添加「自有」属性。</p>
<h3>原型方法与访问器</h3>
<p>为了在实例间共享方法，类定义语法把在类块中定义的方法作为原型方法。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>

  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>可以把方法定义在类构造函数中或者类块中，但不能在类块中给原型添加原始值或对象作为成员数据：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Jake'</span>
<span class="token punctuation">}</span>
<span class="token comment">// Uncaught SyntaxError: Unexpected token</span>
</code></pre></div><p>类方法等同于对象属性，因此可以使用字符串、符号或计算的值作为键：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> symbolKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'symbolKey'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">stringKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'invoked stringKey'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">[</span>symbolKey<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'invoked symbolKey'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">[</span><span class="token string">'computed'</span> <span class="token operator">+</span> <span class="token string">'Key'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'invoked computedKey'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span><span class="token function">stringKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// invoked stringKey</span>
p<span class="token punctuation">[</span>symbolKey<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// invoked symbolKey</span>
p<span class="token punctuation">.</span><span class="token function">computedKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// invoked computedKey</span>
</code></pre></div><p>类定义也支持获取和设置访问器。语法与行为跟普通对象一样：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">newName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name_ <span class="token operator">=</span> newName
  <span class="token punctuation">}</span>
  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name_
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Jake'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// Jake</span>
</code></pre></div><h3>静态成员</h3>
<p>类定义支持静态成员，这些成员是类本身的属性，而不是实例的属性。</p>
<p>静态成员非常适合作为工具函数或者工厂函数。静态成员可以通过类名直接访问，而不需要实例化类。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>单例模式就使用了静态成员。</p>
</div>
<h2>继承</h2>
<h3>基础</h3>
<p>类继承是通过 <code>extends</code> 关键字实现的。子类可以继承父类的所有实例成员、原型方法和静态成员。不仅可以继承一个类，也可以继承普通的构造函数（保持向后兼容）：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 继承类</span>
<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token keyword">instanceof</span> <span class="token class-name">Bus</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token keyword">instanceof</span> <span class="token class-name">Vehicle</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 继承普通构造函数</span>
<span class="token keyword">class</span> <span class="token class-name">Engineer</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Engineer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Engineer</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre></div><h3>构造函数、<code>HomeObject</code> 和 <code>super()</code></h3>
<p>子类构造函数必须调用 <code>super()</code>，这个函数会调用父类构造函数。<code>super()</code> 必须在使用 <code>this</code> 之前调用。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hasEngine <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 不要在调用 super() 之前引用 this，否则会抛出 ReferenceError</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 相当于 super.constructor()</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Vehicle</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// Bus { hasEngine: true }</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>在静态方法中可以通过 <code>super</code> 调用继承的类上定义的静态方法：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'vehicle'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Bus<span class="token punctuation">.</span><span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// vehicle</span>
</code></pre></div><h3>抽象基类</h3>
<p>有时候可能需要定义这样一个类，它可供其他类继承，但本身不会被实例化。虽然 ECMAScript 没有专门支持这种类的语法 ，但通过 <code>new.target</code> 也很容易实现。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>TypeScript 可以使用 <code>abstract</code> 关键字来定义抽象基类。</p>
</div>
<p><code>new.target</code> 保存通过 <code>new</code> 关键字调用的类或函数。通过在实例化时检测 <code>new.target</code> 是不是抽象基类，可以阻止对抽象基类的实例化：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">===</span> Vehicle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Vehicle cannot be directly instantiated'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 派生类</span>
<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// class Bus {}</span>
<span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// class Vehicle {}</span>
<span class="token comment">// Error: Vehicle cannot be directly instantiated</span>
</code></pre></div><p>另外，通过在抽象基类构造函数中进行检查，可以要求派生类必须定义某个方法。因为原型方法在调用类构造函数之前就已经存在了，所以可以通过 <code>this</code> 关键字来检查相应的方法：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>drive <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'drive method must be implemented'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>类混入</h3>
<p>类混入是一种将多个类的功能组合到一个类中的技术。通过将多个类的原型方法复制到一个类中，可以实现类似多重继承的效果。</p>
<p>混入模式可以通过在一个表达式中连缀多个混入元素来实现，这个表达式最终会解析为一个可以被继承的类。如果 Person 类需要组合 A、B、C，则需要某种机制实现 B 继承 A，C 继承 B，而 Person 再继承 C，从而把 A、B、C 组合到这个超类中。实现这种模式有不同的策略。</p>
<p>一个策略是定义一组「可嵌套」的函数，每个函数分别接收一个超类作为参数，而将混入类定义为这个参数的子类，并返回这个类。这些组合函数可以连缀调用，最终组合成超类表达式：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token function-variable function">FooMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">extends</span> Superclass <span class="token punctuation">{</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token function-variable function">BarMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">extends</span> Superclass <span class="token punctuation">{</span>
    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token function-variable function">BazMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">extends</span> Superclass <span class="token punctuation">{</span>
    <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'baz'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">FooMixin</span><span class="token punctuation">(</span><span class="token function">BarMixin</span><span class="token punctuation">(</span><span class="token function">BazMixin</span><span class="token punctuation">(</span>Vehicle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
b<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// foo</span>
b<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// bar</span>
b<span class="token punctuation">.</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// baz</span>
</code></pre></div><p>通过写一个辅助函数，可以把嵌套调用展开：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token function-variable function">FooMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">extends</span> Superclass <span class="token punctuation">{</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token function-variable function">BarMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">extends</span> Superclass <span class="token punctuation">{</span>
    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token function-variable function">BazMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">Superclass</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">class</span> <span class="token class-name">extends</span> Superclass <span class="token punctuation">{</span>
    <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'baz'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">mix</span><span class="token punctuation">(</span><span class="token parameter">BaseClass<span class="token punctuation">,</span> <span class="token operator">...</span>Mixins</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Mixins<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">current</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">)</span><span class="token punctuation">,</span>
    BaseClass
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">mix</span><span class="token punctuation">(</span>Vehicle<span class="token punctuation">,</span> FooMixin<span class="token punctuation">,</span> BarMixin<span class="token punctuation">,</span> BazMixin<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
b<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// foo</span>
b<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// bar</span>
b<span class="token punctuation">.</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// baz</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>很多 JavaScript 框架（特别是 React）已经抛弃混入模式，转向了组合模式（把方法提取到独立的类和辅助对象中，然后把它们组合起来，但不使用继承）。</p>
<p>这反映了那个众所周知的软件设计原则：「组合胜过继承（composition over inheritance）。」这个设计原则被很多人遵循，在代码设计中能提供极大的灵活性。</p>
</div>
]]></content>
    <category term="JavaScript"/>
    <published>2024-06-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">宁弯不折</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/05-work-around.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/05-work-around.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>尽量编写宽松灵活的代码，增强代码的健壮性。</p>
<p>有一个保持灵活性的好方法，那就是编写更少的代码。修改代码可能会引入新的 Bug</p>
<h2>解耦</h2>
<p>代码耦合会导致「一改都改」。</p>
<ul>
<li>解耦让改变代码更容易；</li>
<li>避免全局数据。</li>
</ul>
<h2>在现实世界抛球杂耍</h2>
<p>利用下面四种策略编写更好的程序：</p>
<ol>
<li>有限状态机</li>
<li>观察者模式</li>
<li>发布/订阅</li>
<li>响应式编程与流</li>
</ol>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>响应式编程相关学习资料：</p>
<ul>
<li><a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" target="_blank" rel="noopener noreferrer">The introduction to Reactive Programming you've been missing</a></li>
<li><a href="https://rxjs.dev/" target="_blank" rel="noopener noreferrer">Rxjs</a></li>
<li><a href="https://rxjs-cn.github.io/learn-rxjs-operators/" target="_blank" rel="noopener noreferrer">学习 rxjs 操作符</a></li>
<li><a href="https://www.learnrxjs.io/" target="_blank" rel="noopener noreferrer">learn rxjs</a></li>
<li><a href="https://rxmarbles.com/" target="_blank" rel="noopener noreferrer">rxmarbles</a></li>
<li><a href="https://rxjs.dev/operator-decision-tree" target="_blank" rel="noopener noreferrer">rxjs 操作决定树</a></li>
</ul>
</div>]]></summary>
    <content type="html"><![CDATA[<p>尽量编写宽松灵活的代码，增强代码的健壮性。</p>
<p>有一个保持灵活性的好方法，那就是编写更少的代码。修改代码可能会引入新的 Bug</p>
<h2>解耦</h2>
<p>代码耦合会导致「一改都改」。</p>
<ul>
<li>解耦让改变代码更容易；</li>
<li>避免全局数据。</li>
</ul>
<h2>在现实世界抛球杂耍</h2>
<p>利用下面四种策略编写更好的程序：</p>
<ol>
<li>有限状态机</li>
<li>观察者模式</li>
<li>发布/订阅</li>
<li>响应式编程与流</li>
</ol>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>响应式编程相关学习资料：</p>
<ul>
<li><a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" target="_blank" rel="noopener noreferrer">The introduction to Reactive Programming you've been missing</a></li>
<li><a href="https://rxjs.dev/" target="_blank" rel="noopener noreferrer">Rxjs</a></li>
<li><a href="https://rxjs-cn.github.io/learn-rxjs-operators/" target="_blank" rel="noopener noreferrer">学习 rxjs 操作符</a></li>
<li><a href="https://www.learnrxjs.io/" target="_blank" rel="noopener noreferrer">learn rxjs</a></li>
<li><a href="https://rxmarbles.com/" target="_blank" rel="noopener noreferrer">rxmarbles</a></li>
<li><a href="https://rxjs.dev/operator-decision-tree" target="_blank" rel="noopener noreferrer">rxjs 操作决定树</a></li>
</ul>
</div>
<h2>变换式编程</h2>
<p>把程序视为从输入到输出的一个变换。</p>
<ul>
<li>编程谈的是代码，但程序谈的是数据；</li>
<li>将代码看作是一系列的变换。</li>
</ul>
<h2>继承税</h2>
<p>继承就是耦合。</p>
<p>更好的替代方案：</p>
<ul>
<li>接口：尽量使用接口来表达多态</li>
<li>委托</li>
<li><code>mixin</code> 与特征</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>所以 React、Vue 都走向了函数式编程？</p>
</div>
<h2>配置</h2>
<p>使用外部配置参数化应用程序，使用 <code>json</code>, <code>yml</code> 等。</p>
]]></content>
    <category term="READING"/>
    <published>2024-04-09T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">继承</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/012-extends.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/012-extends.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>继承是面向对象编程中讨论最多的话题。很多面向对象语言都支持两种继承：接口继承和实现继承。</p>
<p>前者只继承方法签名，后者继承实际的方法。接口继承在 ECMAScript 中是不可能的，因为函数没有签名。实现继承是 ECMAScript 唯一支持的继承方式，而这主要是通过原型链实现的。</p>
<h2>原型链</h2>
<p>原型链是 ECMAScript 中的主要继承方式，当原型是另一个对象的实例时，那么这个原型的实例就指向了另一个原型，这样实例和原型就组成了一条原型链。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类: 公共属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'wang'</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eating</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' eating~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类: 特有属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">111</span>
<span class="token punctuation">}</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">studying</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' studying~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 'wang'</span>
stu<span class="token punctuation">.</span><span class="token function">eating</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// wang eating~</span>
stu<span class="token punctuation">.</span><span class="token function">studying</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// wang studying~</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>继承是面向对象编程中讨论最多的话题。很多面向对象语言都支持两种继承：接口继承和实现继承。</p>
<p>前者只继承方法签名，后者继承实际的方法。接口继承在 ECMAScript 中是不可能的，因为函数没有签名。实现继承是 ECMAScript 唯一支持的继承方式，而这主要是通过原型链实现的。</p>
<h2>原型链</h2>
<p>原型链是 ECMAScript 中的主要继承方式，当原型是另一个对象的实例时，那么这个原型的实例就指向了另一个原型，这样实例和原型就组成了一条原型链。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类: 公共属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'wang'</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eating</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' eating~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类: 特有属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">111</span>
<span class="token punctuation">}</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">studying</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' studying~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 'wang'</span>
stu<span class="token punctuation">.</span><span class="token function">eating</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// wang eating~</span>
stu<span class="token punctuation">.</span><span class="token function">studying</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// wang studying~</span>
</code></pre></div><p>使用原型链实现继承可以继承父类的属性和方法，然而它还有自己的弊端。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 原型链实现继承的弊端:</span>
<span class="token comment">// 1.第一个弊端: 打印 stu 对象, 继承的属性是看不到的，并且对象标识也有问题</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token comment">// Person { sno: 111 }</span>

<span class="token comment">// 2.第二个弊端: 修改引用值时会互相影响</span>
<span class="token keyword">const</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

stu1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'kobe'</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// ['kobe']</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// ['kobe']</span>

<span class="token comment">// 3.第三个弊端: 在前面实现类的过程中都没有传递参数</span>
<span class="token keyword">const</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'lilei'</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu3<span class="token punctuation">)</span> <span class="token comment">// Person { sno: 111 }</span>
</code></pre></div><div class="hint-container note">
<p class="hint-container-title">注</p>
<p>默认情况下，所有引用类型都继承自 <code>Object</code>，任何函数的默认原型都是一个 <code>Object</code> 的实例。</p>
</div>
<h2>盗用构造函数</h2>
<p>为了解决原型链继承问题，可以使用「盗用构造函数」。基本思路很简单：在子类构造函数中调用父类构造函数。可以使用 <code>apply()</code> 和 <code>call()</code> 方法以新创建的对象为上下文执行构造函数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类: 公共属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends
<span class="token punctuation">}</span>

<span class="token comment">// 子类: 特有属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">,</span> sno</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 继承属性</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">111</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'kobe'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span>

<span class="token comment">// 解决原型链实现继承的弊端</span>
<span class="token comment">// 1. 第一个弊端: 打印stu对象, 继承的属性是看不到的，并且对象标识也有问题</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token comment">// Student { name: 'wang', age: 18, friends: [ 'kobe' ], sno: 111 }</span>

<span class="token comment">// 2.第二个弊端: 修改引用值时会互相影响</span>
<span class="token keyword">const</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'li lei'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'kobe'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'james'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">)</span>

stu1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'lucy'</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// ['li lei', 'lucy']</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// ['james']</span>

<span class="token comment">// // 3.第三个弊端: 在前面实现类的过程中都没有传递参数</span>
<span class="token keyword">const</span> stu3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'li lei'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">)</span>
</code></pre></div><p>然而，借用构造函数也是有弊端：</p>
<ul>
<li>必须在构造函数中定义方法，函数不能重用；</li>
<li>而且，子类也不能访问父类原型上的方法，因为他没有像原型链继承一样建立了实例与父类原型对象的连接，因此所有类型都只能使用构造函数模式。</li>
</ul>
<h2>组合继承</h2>
<p>既然原型链继承可以实现继承方法，而盗用构造函数可以解决引用值、对象标识和传递参数的问题，因此可以组合原型链继承和盗用构造函数继承。基本的思路是使用原型链继承父类原型上的属性和方法，而通过盗用构造函数继承实例属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类: 公共属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eating</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' eating~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类: 特有属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">,</span> sno</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 盗用构造函数继承属性</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">111</span>
<span class="token punctuation">}</span>

<span class="token comment">// 原型链继承方法</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>组合继承弥补了原型链和盗用构造函数的不足，是 JavaScript 中使用最多的继承模式。而且组合继承也保留了 <code>instanceof</code> 操作符和 <code>isPrototypeOf()</code> 方法识别合成对象的能力。</p>
<h2>寄生式组合继承</h2>
<p>组合继承弥补了原型链和盗用构造函数的不足，它使用盗用构造函数继承属性，使用原型链继承方法。但是它存在效率问题，即父类构造函数会调用两次：一次是在创建子类原型时调用，一次是在子类构造函数中调用。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类: 公共属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eating</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' eating~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类: 特有属性和方法</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">,</span> sno</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 盗用构造函数继承属性</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">)</span> <span class="token comment">// 第二次调用 Person()</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">111</span>
<span class="token punctuation">}</span>

<span class="token comment">// 原型链继承方法</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 第一次调用 Person()</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Student
</code></pre></div><p>在第一次调用 Person() 后，Student.prototype 上会有 <code>name</code>, <code>age</code>, <code>friends</code> 这三个属性，它们本来是 Person 父类的实例属性，然而现在却挂载到了 Student 子类的原型属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
<span class="token comment">// Person {</span>
<span class="token comment">//   name: undefined,</span>
<span class="token comment">//   age: undefined,</span>
<span class="token comment">//   friends: undefined,</span>
<span class="token comment">//   constructor: [Function: Student]</span>
<span class="token comment">// }</span>
</code></pre></div><p>而如果创建一个实例，此时会调用第二次 Person()，这一次会在对象上创建实例属性 <code>name</code>, <code>age</code>, <code>friends</code>, <code>sno</code>，前面三个属性会遮蔽原型上的同名属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// Student { name: 'wang', age: 18, friends: [], sno: 111 }</span>
</code></pre></div><p>也就是说，现在有两组 <code>name</code>, <code>age</code>, <code>friends</code> 属性，一组在实例上，而另一组在 <code>Student</code> 的原型上。</p>
<p>这个问题出在调用了父类构造函数给子类原型赋值，那么有没有一种方法可以不直接调用父类构造函数呢？</p>
<p>有的，那就是原型式继承和寄生式继承。</p>
<h3>原型式继承</h3>
<p>2006 年，Douglas Crockford 写了一篇文章：《JavaScript 中的原型式继承》（“Prototypal Inheritance in JavaScript”）。这篇文章介绍了一种不涉及严格意义上构造函数的继承方法。他的出发点是即使不自定义类型也可以通过原型实现对象之间的信息共享。文章最终给出了一个函数：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这个 <code>object()</code> 函数会创建一个临时构造函数，将传入的对象赋值给这个构造函数的原型，然后返回这个临时类型的一个实例，ES5 增加 <code>Object.create()</code> 方法，接收两个参数：作为新对象原型的对象，以及给新对象定义额外属性的对象（第二个可选）。以这种方式添加的属性会遮蔽原型对象上的同名属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Nicholas'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'Shelby'</span><span class="token punctuation">,</span> <span class="token string">'Court'</span><span class="token punctuation">,</span> <span class="token string">'Van'</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'Greg'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anotherPerson<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// "Greg"</span>
</code></pre></div><p>属性中包含的引用值始终会在相关对象中共享。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Nicholas'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'Shelby'</span><span class="token punctuation">,</span> <span class="token string">'Court'</span><span class="token punctuation">,</span> <span class="token string">'Van'</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'Greg'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
anotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'kobe'</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> yetAnotherPerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'wang'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>yetAnotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// ["Shelby", "Court", "Van", "kobe"]</span>
</code></pre></div><h3>寄生式继承</h3>
<p>与原型式继承比较接近的一种继承方式是寄生式继承，也是 Crockford 首倡的一种模式。寄生式继承背后的思路类似于寄生构造函数和工厂模式：创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span> <span class="token comment">// 创建一个新对象，他的原型为 original</span>
  clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 以某种方式增强对象</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> clone <span class="token comment">// 返回这个对象</span>
<span class="token punctuation">}</span>
</code></pre></div><p>寄生式继承同样适合主要关注对象，不在乎类型和构造函数的场景。然而和构造函数创建对象模式一样，它会导致函数难以重用。</p>
<h3>寄生式组合继承</h3>
<p>前面已经提到，组合继承的缺陷在于调用了两次父类构造函数，会导致子类实例和子类原型上存在两组同名属性。</p>
<p>那么可以通过寄生式继承来继承父类原型，然后讲返回的新对象赋值给子类原型，基本模式如下：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span><span class="token parameter">subType<span class="token punctuation">,</span> superType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// 创建对象</span>
  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType <span class="token comment">// 增强对象</span>
  subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype <span class="token comment">// 赋值对象</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在这个函数内部，第一步是创建一个继承父类原型的对象。然后，给返回的 <code>prototype</code> 对象设置 <code>constructor</code> 属性，解决由于重写原型导致默认 <code>constructor</code> 丢失的问题。最后将新创建的对象赋值给子类型的原型。</p>
<p>接下来调用这个核心继承函数，即可解决组合继承的问题。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父类</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eating</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' eating~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类</span>
<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">,</span> sno</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 盗用构造函数</span>
  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends<span class="token punctuation">)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sno <span class="token operator">=</span> <span class="token number">111</span>
<span class="token punctuation">}</span>

<span class="token comment">// 寄生式继承</span>
<span class="token function">inheritPrototype</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span> Person<span class="token punctuation">)</span>

<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">studying</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">' studying~'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>寄生式组合继承即使用盗用构造函数继承属性，使用寄生式继承避免调用父类构造函数，效率更高。</p>
]]></content>
    <category term="JavaScript"/>
    <published>2022-08-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">创建对象</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/011-create-object.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/011-create-object.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>在 JavaScript 中使用 <code>class</code> 时，可以很方便地创建类和继承，然而在 ES6 之前的规范中，是使用构造函数和基于原型的继承模式，而 <code>class</code> 仅仅是它们的语法糖。因此在了解 ES6 <code>class</code> 之前，有必要了解以前模拟类和继承的方法。</p>
<p>首先来看看在 JavaScript 中是如何创建一个对象的。</p>
<h2>工厂模式</h2>
<p>工厂模式是一种常见的设计模式，通过工厂方法返回想要的对象。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name
  o<span class="token punctuation">.</span>age <span class="token operator">=</span> age
  o<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> o
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">// { name: 'wang', age: 18, sayName: [Function (anonymous)] }</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>在 JavaScript 中使用 <code>class</code> 时，可以很方便地创建类和继承，然而在 ES6 之前的规范中，是使用构造函数和基于原型的继承模式，而 <code>class</code> 仅仅是它们的语法糖。因此在了解 ES6 <code>class</code> 之前，有必要了解以前模拟类和继承的方法。</p>
<p>首先来看看在 JavaScript 中是如何创建一个对象的。</p>
<h2>工厂模式</h2>
<p>工厂模式是一种常见的设计模式，通过工厂方法返回想要的对象。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name
  o<span class="token punctuation">.</span>age <span class="token operator">=</span> age
  o<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> o
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">// { name: 'wang', age: 18, sayName: [Function (anonymous)] }</span>
</code></pre></div><p>工厂模式虽然可以解决创建多个类似对象的问题，但是它创建的对象没有标识。</p>
<h2>构造函数模式</h2>
<p>在 JavaScript 中，任何函数只要使用 <code>new</code> 操作符调用就是构造函数，而不使用 <code>new</code> 操作符调用的函数就是普通函数。</p>
<p>构造函数也称构造器（<code>constructor</code>），是创建对象时会调用的函数。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>箭头函数不能使用 <code>new</code> 调用。</p>
</div>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'hou'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span> <span class="token comment">// Person { name: 'wang', age: 18, sayName: [Function (anonymous)] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// Person { name: 'hou', age: 18, sayName: [Function (anonymous)] }</span>
</code></pre></div><p>使用构造函数创建对象时，它 <strong>打印出了对象标识</strong>，也就是说它解决了工厂模式没有对象标识的问题。</p>
<p><strong>构造函数存在的问题：</strong></p>
<p>首先让我们来看看 <code>new</code> 操作的过程：</p>
<ol>
<li>首先创建一个空对象；</li>
<li>将空对象的原型（<code>[[prototype]]</code> 属性）赋值为构造函数的 <code>prototype</code> 对象；</li>
<li>让构造函数的 <code>this</code> 指向这个空对象，执行构造函数的代码；</li>
<li>判断构造函数返回值的类型，如果是基本类型，则返回创建的对象，如果是引用类型，则返回这个引用类型。</li>
</ol>
<p>注意到第三步，构造函数的问题在于定义的方法会在每个实例上都创建一次。</p>
<p>要解决这个问题，可以把函数定义转移到构造函数外部：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> sayName
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'hou'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
</code></pre></div><p>但是如果这个对象需要多个方法，就要在全局作用域上定义多个函数，这会污染全局作用域。这个问题可以通过原型模型来解决。</p>
<h2>原型模式</h2>
<p>在了解原型模式的具体过程前，先来看看隐式原型和显示原型的概念。</p>
<h3>隐式原型和显示原型</h3>
<h4>隐式原型（Implicit Prototype）</h4>
<p>每个 JavaScript 「对象」都有一个指向其原型对象的内部链接，这个链接就是 <strong>隐式原型</strong>。</p>
<p>当访问对象的属性时，如果该对象本身没有这个属性，JavaScript 引擎就会沿着 <strong>隐式原型链</strong> 继续查找，直到找到对应的属性或者到达原型链的顶端（即 <code>Object.prototype</code>）。</p>
<p>每个 <strong>对象</strong> 都有一个特殊的内置属性 <code>[[prototype]]</code>，这个特殊的对象指向另外一个对象。早期的 ECMA 没有规范如何去查看 <code>[[prototype]]</code>，因此浏览器给对象提供一个 <code>__proto__</code> 属性来查看这个属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>sayName <span class="token operator">=</span> sayName
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
<span class="token comment">// 查看对象隐式原型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// {}</span>
</code></pre></div><p>ES5 之后提供了 <code>Object.getPrototypeOf()</code> 查看：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 查看对象隐式原型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// {}</span>
</code></pre></div><h4>显式原型</h4>
<p>函数作为对象，也拥有隐式原型 <code>[[prototype]]</code> 属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// 输出 "function () {...}"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre></div><p>此外，每个函数都会创建一个 <code>prototype</code> 属性，称为函数的 <strong>显式原型</strong>。这个属性指向原型对象，包含应该由特定引用类型的实例共享的属性和方法。所有原型对象自动获得一个名为 <code>constructor</code> 的属性，指回与之关联的构造函数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// {</span>
<span class="token comment">//   constructor: {</span>
<span class="token comment">//     value: [Function: foo], // 原型对象的构造函数指回与之关联的构造函数</span>
<span class="token comment">//     writable: true,</span>
<span class="token comment">//     enumerable: false,</span>
<span class="token comment">//     configurable: true</span>
<span class="token comment">//   }</span>
<span class="token comment">// }</span>
</code></pre></div><h3>原型模式具体实现过程</h3>
<p>了解了隐式原型和显式原型后，我们就可以来看看原型模式具体是如何实现的了。</p>
<p>JavaScript 每个函数都有一个 <strong>显式原型</strong> <code>prototype</code> 属性（这个属性是一个对象，包含应该由特定引用类型的实例共享的属性和方法），将需要共享的函数或属性放在这个原型对象上，而新创建的实例对象，就会通过它的 <strong>隐式原型 <code>__proto__</code></strong> 顺着原型链往上找，就可以很好的解决构造函数模式污染全局作用域的问题。</p>
<p>让我们回忆一下前面 <code>new</code> 关键字的步骤时：</p>
<ol>
<li>首先创建一个空对象；</li>
<li>将空对象的原型（<code>[[prototype]]</code> 属性）赋值为构造函数的 <code>prototype</code> 对象；</li>
<li>让构造函数的 <code>this</code> 指向这个空对象，执行构造函数的代码；</li>
<li>判断构造函数返回值的类型，如果是基本类型，则返回创建的对象，如果是引用类型，则返回这个引用类型。</li>
</ol>
<p>其中第 2 步就是：<strong>构造函数的显示原型会被赋值给新对象的隐式原型</strong>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'wang'</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// wang</span>
</code></pre></div><p>上面定义原型时语法有点冗余，因此常用对象字面量直接重写函数原型。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'wang'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使 constructor 属性不可枚举</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'constructor'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> Person
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3>原型模式存在的问题</h3>
<p>原型模式是实现所有原生引用类型的模式，所有原生引用类型的构造函数（包括 <code>Object</code>、<code>Array</code>、<code>String</code> 等）都在原型上定义了实例方法，因此我们才能调用那些方法。</p>
<p>但原型模式也有它的问题：</p>
<ul>
<li>弱化了向构造函数传递初始化参数的能力，会导致所有实例默认都取得相同的属性值；</li>
<li>原型上的引用属性是在实例间共享的，因此修改一个会影响其他实例。</li>
</ul>
<p>来看一个例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">constructor</span><span class="token operator">:</span> Person<span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'wang'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'neymar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使 constructor 属性不可枚举</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'constructor'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> Person
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 1. 无法向构造函数传参</span>
<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

person1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'messi'</span><span class="token punctuation">)</span>

<span class="token comment">// 2. 原型上的引用属性在实例间共享</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// [ 'neymar', 'messi' ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// [ 'neymar', 'messi' ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>friends <span class="token operator">===</span> person2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre></div><p>此时在 1 处无法向构造函数传参，而且在 2 处修改 <code>person1.friends</code> 也会影响到 <code>person2</code> 实例，因为他们指向的原型中的同一个地址。</p>
<p>为了解决这个问题，可以 <strong>组合使用构造函数和原型模式</strong>。</p>
<h2>组合使用构造函数和原型模式</h2>
<p>首先来回忆一下构造函数和原型模式各自的问题：</p>
<ul>
<li>构造函数模式：如果这个对象需要多个方法，就要在全局作用域上定义多个函数，会污染全局作用域；</li>
<li>原型模式：弱化了向构造函数传递初始化参数的能力，引用属性会存在共享问题。</li>
</ul>
<p>既然他们分开使用都会存在一些问题，因此可以组合使用这两种模式：<strong>通过构造函数初始化对象的属性，通过原型对象实现方法的复用</strong>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> friends</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> friends
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">constructor</span><span class="token operator">:</span> Person<span class="token punctuation">,</span>
  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使 constructor 属性不可枚举</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'constructor'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> Person
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'neymar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'hou'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'messi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

person1<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'hou'</span><span class="token punctuation">)</span>
person2<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// [ 'neymar', 'hou' ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// [ 'messi', 'wang' ]</span>
</code></pre></div><p>此时不仅可以传递初始化参数，而且修改各自的 <code>friends</code> 属性都互不影响。</p>
<h2>总结</h2>
<p>以上就是 JavaScript 中创建对象的四种主要方式，包括工厂模式、构造函数模式、原型模式及组合使用构造函数和原型模式。让我们来回忆一下前面三种各自的缺点：</p>
<ul>
<li>工厂模式：无法解决对象标识问题；</li>
<li>构造函数模式：对象需要多个方法，就要在全局作用域上定义多个函数，这会污染全局作用域；</li>
<li>原型模式：弱化了向构造函数传递初始化参数的能力，引用属性会存在共享问题。</li>
</ul>
]]></content>
    <category term="JavaScript"/>
    <published>2022-08-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">初始化项目</title>
    <id>https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/01-init.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/01-init.html"/>
    <updated>2024-12-17T10:16:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>技术方案选型</h2>
<h3>Flutter vs React Native</h3>
<p>目前，<a href="https://flutter.dev/" target="_blank" rel="noopener noreferrer">Flutter</a> 和 <a href="https://reactnative.dev/" target="_blank" rel="noopener noreferrer">React Native</a> 是最流行的跨端解决方案。</p>
<p>考虑到 Flutter 使用 <code>dart</code> 语言，而 React Native 使用 <code>js</code>，学习成本相对而言较少，因此决定使用 React Native。</p>]]></summary>
    <content type="html"><![CDATA[<h2>技术方案选型</h2>
<h3>Flutter vs React Native</h3>
<p>目前，<a href="https://flutter.dev/" target="_blank" rel="noopener noreferrer">Flutter</a> 和 <a href="https://reactnative.dev/" target="_blank" rel="noopener noreferrer">React Native</a> 是最流行的跨端解决方案。</p>
<p>考虑到 Flutter 使用 <code>dart</code> 语言，而 React Native 使用 <code>js</code>，学习成本相对而言较少，因此决定使用 React Native。</p>
<ul>
<li><a href="https://www.thedroidsonroids.com/blog/flutter-vs-react-native-comparison" target="_blank" rel="noopener noreferrer">Flutter vs. React Native – Which is Better for Your Project in 2024?</a></li>
<li><a href="https://www.thedroidsonroids.com/blog/top-cross-platform-app-development-frameworks" target="_blank" rel="noopener noreferrer">4 Most Popular Cross-Platform App Development Frameworks for 2024</a></li>
</ul>
<h3>Expo Go vs React Native CLI</h3>
<p>如果您是移动开发的新手，最简单的入门方法就是使用 Expo Go。Expo 是一套围绕 React Native 构建的工具和服务，虽然它有很多功能，但目前与我们最相关的功能是它能让你在几分钟内编写出一个 React Native 应用程序。您只需要一个最新版本的 Node.js 和一部手机或模拟器。</p>
<p>如果你已经熟悉移动开发，你可能想使用 React Native CLI。它需要 Xcode 或 Android Studio 才能开始使用。如果你已经安装了这些工具之一，应该可以在几分钟内开始运行。如果没有安装这些工具，则需要花费大约一个小时进行安装和配置。</p>
<p>考虑到快速实现一个 MVP，最终选择了 Expo。</p>
<h3>Next or Node</h3>
<p>最初，考虑使用 Expo 与 Next.js 结合的方案来实现前后端不分离的全栈项目。然而，<a href="https://docs.expo.dev/guides/using-nextjs/" target="_blank" rel="noopener noreferrer">Expo 官方</a> 提到 Next.js 只能用于 Expo for Web，无法实现跨端需求。</p>
<p>因此确定使用 Expo + Node.js + Monorepo 的方案，这样可以使得项目结构更加清晰，便于管理和维护。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>Deprecated. 已改用 nest.js 框架。</p>
</div>
<h2>Monorepo 搭建</h2>
<p>最初使用 <code>pnpm</code> workspaces 搭建 Monorepo 项目，然而安装依赖后启动报错：</p>
<ul>
<li><a href="https://github.com/expo/expo/issues/22413" target="_blank" rel="noopener noreferrer">Pnpm not working with Expo</a></li>
<li><a href="https://github.com/pnpm/pnpm/issues/4286" target="_blank" rel="noopener noreferrer">[bug] - Pnpm not working with expo</a></li>
</ul>
<p>查询到上述两个 issue 后，在目录中添加 <code>.npmrc</code> 文件后重新安装依赖项目启动成功。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>node-linker=hoisted
</code></pre></div><p>考虑到可能还会遇到其他兼容问题，最终选择官方推荐的 <code>yarn 1.x</code> workspaces。</p>
<p>目录结构设计如下：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>- apps
  - mobile
  - server
- packages
  - types
- package.json
</code></pre></div><h3>init mobile</h3>
<p>以下按照 <a href="https://docs.expo.dev/guides/monorepos/" target="_blank" rel="noopener noreferrer">Work with monorepos</a> 搭建项目。</p>
<p>在 imperial-kitchen 文件夹中 使用以下命令初始化 <code>expo</code> 项目</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx create-expo-app apps/mobile
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>使用 expo router，必须添加环境变量：<code>EXPO_USE_METRO_WORKSPACE_ROOT=1</code></p>
</div>
<h3>init server</h3>
<p>后端服务选择使用原生 <code>node</code> 开发，详见 。</p>
<h3>配置 lint</h3>
<p>配置 <code>eslint</code>、<code>prettier</code>、<code>commitlint</code> 和 <code>husky</code>。</p>
]]></content>
    <category term="Project"/>
    <published>2024-05-09T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Imperial Kitchen 御膳房</title>
    <id>https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/</id>
    <link href="https://dribble-njr.github.io/blog/blog/project/imperial-kitchen/"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>欢迎来到 Imperial Kitchen 御膳房项目！项目地址：<a href="https://github.com/dribble-njr/imperial-kitchen.git%E3%80%82" target="_blank" rel="noopener noreferrer">https://github.com/dribble-njr/imperial-kitchen.git。</a></p>
<h2>项目简介</h2>
<p>Imperial Kitchen 御膳房是一个家庭厨房的点菜应用，旨在帮助方便快捷地选择菜品并下单。</p>
<h2>产品功能设计</h2>
<h3>角色设计</h3>]]></summary>
    <content type="html"><![CDATA[<p>欢迎来到 Imperial Kitchen 御膳房项目！项目地址：<a href="https://github.com/dribble-njr/imperial-kitchen.git%E3%80%82" target="_blank" rel="noopener noreferrer">https://github.com/dribble-njr/imperial-kitchen.git。</a></p>
<h2>项目简介</h2>
<p>Imperial Kitchen 御膳房是一个家庭厨房的点菜应用，旨在帮助方便快捷地选择菜品并下单。</p>
<h2>产品功能设计</h2>
<h3>角色设计</h3>
<p>家庭成员：</p>
<ul>
<li>点菜：查看菜品菜单，选择菜品下单。</li>
<li>查看订单状态：可以查看自己点的菜是否被接受，正在做，还是已经做好。</li>
<li>评价：可以对已经完成的菜品进行评价和反馈。</li>
</ul>
<p>管理员（厨师）：</p>
<ul>
<li>菜单管理：添加、编辑、删除菜品信息（名称、价格、描述、图片等）。</li>
<li>接收订单：家庭成员点菜后，管理员可以接受或拒绝订单。</li>
<li>制作进度：管理员可以更新每个订单的进度（如「已接受」、「正在做」、「已完成」等）。</li>
<li>菜品评价管理：查看和管理用户的评价。</li>
</ul>
<h3>功能模块</h3>
<h4>用户管理</h4>
<ul>
<li>登录/注册：家庭成员和管理员需要登录。可以通过简单的用户名和密码，或者基于家庭邀请码来注册。</li>
<li>权限管理：家庭成员的权限是点菜、查看和评价；管理员则可以管理菜品和订单。</li>
</ul>
<h4>菜单管理</h4>
<ul>
<li>查看菜单：家庭成员可以看到当前的可选菜品，带有详细信息和图片。</li>
<li>添加菜品（管理员）：管理员可以在后台添加新菜品，填写菜品的名称、图片、描述、价格等。</li>
<li>编辑/删除菜品（管理员）：管理员可以修改或删除已有菜品，保持菜单的实时更新。</li>
</ul>
<h4>订单系统</h4>
<ul>
<li>下单（家庭成员）：家庭成员可以从菜单中选择菜品并提交订单。</li>
<li>订单状态更新（管理员）：管理员在接收到订单后，可以更新状态（接受、制作中、完成等）。</li>
<li>订单历史：家庭成员可以查看自己的历史订单和状态，管理员可以查看所有的订单记录。</li>
</ul>
<h4>菜品评价</h4>
<ul>
<li>用户评价：家庭成员可以对已经完成的菜品进行评价，写下反馈并打分。</li>
<li>评价管理（管理员）：管理员可以查看评价，改进菜品。</li>
</ul>
<h3>核心流程</h3>
<ol>
<li>家庭成员登录并查看菜单。</li>
<li>家庭成员选择菜品并提交订单。</li>
<li>管理员在后台查看订单，并更新订单状态。</li>
<li>家庭成员可以查看订单状态变化。</li>
<li>订单完成后，家庭成员可以对菜品进行评价。</li>
</ol>
<h3>后续可以扩展的功能</h3>
<ul>
<li>通知功能：当订单状态更新时，向家庭成员发送推送通知。</li>
<li>个性化推荐：根据用户历史点菜记录，推荐他们可能喜欢的菜品。</li>
<li>多家庭支持：如果有多个家庭用户，也可以扩展为多人共享的家庭账户。</li>
</ul>
<h2>技术栈</h2>
<ul>
<li>前端：使用 <code>Expo</code> 和 <code>React Native</code> 开发移动端应用。</li>
<li>后端：使用 <code>Node.js</code> 和 <code>Express</code> 开发服务器端接口。</li>
<li>数据库：使用 <code>MongoDB</code> 存储菜品和订单信息。</li>
<li>其他工具：使用 <code>TypeScript</code> 编写代码，使用 <code>yarn workspace</code> 管理多包项目。</li>
</ul>
<h2>使用说明</h2>
<ol>
<li>克隆项目到本地：</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/your-username/imperial-kitchen.git
</code></pre></div><ol start="2">
<li>安装依赖：</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> imperial-kitchen
<span class="token function">yarn</span> <span class="token function">install</span>
</code></pre></div><ol start="3">
<li>启动前端应用：</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> workspace mobile start
</code></pre></div><ol start="4">
<li>启动后端服务器：</li>
</ol>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> workspace server start
</code></pre></div><h2>贡献</h2>
<p>欢迎贡献代码！如果您有任何建议或发现了问题，请在 GitHub 上提出问题或提交拉取请求。</p>
]]></content>
    <category term="Project"/>
    <published>2024-05-09T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">对象属性</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/010-object-property.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/010-object-property.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>在 JavaScript 中，对象是一组属性的「无序集合」，由键值对组成。创建对象共有两种方式：字面量和 <code>new</code>。一般开发中为了方便通常使用字面量来创建对象。</p>
<p>对象中的属性有一些内部特性，这些内部特性的名称会用两个中括号括起来，如 <code>[[Enumerable]]</code>，根据内部特性的不同，可以将属性分为 <strong>数据属性</strong> 和 <strong>访问器属性</strong>。</p>
<h2>数据属性</h2>
<p>数据属性，顾名思义，它是包含一个值的属性，数据属性一共以下四个特性：</p>
<ul>
<li><code>[[Configurable]]</code>：属性是否可配置：是否可以 <code>delete</code> 删除，是否可以修改特性，以及是否可以改成访问器属性。默认为 <code>true</code>。</li>
<li><code>[[Enumerable]]</code>：属性是否可以枚举（使用 <code>for-in</code>）。默认为 <code>true</code>。</li>
<li><code>[[Writable]]</code>：属性的值是否可以被修改。默认为 <code>true</code>。</li>
<li><code>[[Value]]</code>：属性的值。默认为 <code>undefined</code>。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>在 JavaScript 中，对象是一组属性的「无序集合」，由键值对组成。创建对象共有两种方式：字面量和 <code>new</code>。一般开发中为了方便通常使用字面量来创建对象。</p>
<p>对象中的属性有一些内部特性，这些内部特性的名称会用两个中括号括起来，如 <code>[[Enumerable]]</code>，根据内部特性的不同，可以将属性分为 <strong>数据属性</strong> 和 <strong>访问器属性</strong>。</p>
<h2>数据属性</h2>
<p>数据属性，顾名思义，它是包含一个值的属性，数据属性一共以下四个特性：</p>
<ul>
<li><code>[[Configurable]]</code>：属性是否可配置：是否可以 <code>delete</code> 删除，是否可以修改特性，以及是否可以改成访问器属性。默认为 <code>true</code>。</li>
<li><code>[[Enumerable]]</code>：属性是否可以枚举（使用 <code>for-in</code>）。默认为 <code>true</code>。</li>
<li><code>[[Writable]]</code>：属性的值是否可以被修改。默认为 <code>true</code>。</li>
<li><code>[[Value]]</code>：属性的值。默认为 <code>undefined</code>。</li>
</ul>
<p>使用字面量或 <code>new</code> 操作符定义对象时，默认就是一个数据属性。前三个特性都默认为 <code>true</code>，而 <code>[[value]]</code> 则为指定的值。</p>
<p>可以使用 <code>Object.getOwnPropertyDescriptor()</code> 查看属性的描述符，他接收两个参数，第一个参数为对象，第二个参数为需要查看描述符的属性。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'wang'</span> <span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// {</span>
<span class="token comment">//   value: 'wang',</span>
<span class="token comment">//   writable: true,</span>
<span class="token comment">//   enumerable: true,</span>
<span class="token comment">//   configurable: true</span>
<span class="token comment">// }</span>
</code></pre></div><p>另外除了使用字面量声明属性，还可以通过 <code>Object.defineProperty()</code> 定义属性，同时定义多个属性则可以使用 <code>Object.defineProperties()</code>，</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>在调用 <code>Object.defineProperty()</code> 时，<code>configurable</code>、<code>enumerable</code> 和 <code>writable</code> 的值如果不指定，则都默认为 <code>false</code>。</p>
<p>在严格模式下，尝试删除不可配置属性会抛出错误，尝试修改只读属性也会抛出错误。</p>
</div>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">'wang'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// {</span>
<span class="token comment">//   value: 'wang',</span>
<span class="token comment">//   writable: false,</span>
<span class="token comment">//   enumerable: false,</span>
<span class="token comment">//   configurable: false</span>
<span class="token comment">// }</span>
</code></pre></div><h2>访问器属性</h2>
<p>访问器属性不包含值，而是有一个 <code>getter()</code> 函数和一个 <code>setter()</code> 函数。在写入访问器属性时，会调用设置（<code>setter()</code>）函数，在读取时，会调用获取（<code>getter()</code>）函数。它一共包括四种特性：</p>
<ul>
<li><code>[[Configurable]]</code>：属性是否可配置：是否可以 <code>delete</code>，是否可以修改特性，以及是否可以改成数据属性。默认为 <code>true</code>。</li>
<li><code>[[Enumerable]]</code>：属性是否可以枚举。默认为 <code>true</code>。</li>
<li><code>[[Get]]</code>：获取函数，读取属性时调用。默认为 <code>undefined</code>。</li>
<li><code>[[Set]]</code>：设置函数，写入属性时调用。默认为 <code>undefined</code>。</li>
</ul>
<p>访问器属性 <strong>只能</strong> 通过 <code>Object.defineProperty()</code> 或 <code>Object.defineProperties()</code> 定义：</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>在调用 <code>Object.defineProperty()</code> 时，<code>configurable</code> 和 <code>enumerable</code> 的值如果不指定，则都默认为 <code>false</code>。</p>
</div>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个对象，包含伪私有成员 year_ 和公共成员 edition</span>
<span class="token keyword">let</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">year_</span><span class="token operator">:</span> <span class="token number">2017</span><span class="token punctuation">,</span>
  <span class="token literal-property property">edition</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>year_
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">&gt;</span> <span class="token number">2017</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>year_ <span class="token operator">=</span> newValue
      <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+=</span> newValue <span class="token operator">-</span> <span class="token number">2017</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 设置时，会调用 setter 函数</span>
book<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2018</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>edition<span class="token punctuation">)</span> <span class="token comment">// 2</span>

<span class="token comment">// 读取时，会调用 getter 函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>year_<span class="token punctuation">)</span> <span class="token comment">// 2018</span>

<span class="token comment">// configurable 和 enumerable 的值如果不指定，则都默认为 false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// {</span>
<span class="token comment">//   get: [Function: get],</span>
<span class="token comment">//   set: [Function: set],</span>
<span class="token comment">//   enumerable: false,</span>
<span class="token comment">//   configurable: false</span>
<span class="token comment">// }</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>Vue 中的计算属性就是访问器属性中的 <code>getter()</code> 和 <code>setter</code>。</p>
</div>
]]></content>
    <category term="JavaScript"/>
    <published>2022-08-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">集合引用类型</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/008-collection-reference-type.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/008-collection-reference-type.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2><code>Object</code></h2>
<p>创建方式：</p>
<ul>
<li>构造函数；</li>
<li>对象字面量。</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Nicholas'</span>
person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span>

<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Nicholas'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">29</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2><code>Object</code></h2>
<p>创建方式：</p>
<ul>
<li>构造函数；</li>
<li>对象字面量。</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Nicholas'</span>
person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span>

<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Nicholas'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">29</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在对象字面量表示法中，属性名可以是字符串或数值，比如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Nicholas'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span>
  <span class="token number">5</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>数值属性会自动转换为字符串。</p>
</div>
<h2><code>Array</code></h2>
<p>ECMAScript 数组的两个特点：</p>
<ul>
<li>每个槽位可以存储任意类型的数据。</li>
<li>数组长度是动态大小的，会随着数据添加而自动增长。</li>
</ul>
<h3>创建方式</h3>
<p>创建方式共有四种：</p>
<ul>
<li>构造函数；</li>
<li>字面量；</li>
<li><code>Array.from()</code>；</li>
<li><code>Array.of()</code>。</li>
</ul>
<p><code>from()</code> 用于将  转换为数组实例，而 <code>of()</code> 用于将一组参数转换为数组实例。</p>

<h3>数组空位</h3>
<p>使用数组字面量初始化数组时，可以使用一串逗号来创建空位。</p>
<p>ES6 新增的方法和迭代器与早期 ECMAScript 版本中存在的方法行为不同。ES6 新增方法普遍将这些空位当成存在的元素，只不过值为 <code>undefined</code>：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> option <span class="token keyword">of</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// false</span>
<span class="token comment">// true</span>
<span class="token comment">// true</span>
<span class="token comment">// true</span>
<span class="token comment">// false</span>
</code></pre></div><p>ES6 之前的方法则会忽略这个空位，但具体的行为也会因方法而异：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token comment">// map() 会跳过空位置</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [6, undefined, undefined, undefined, 6]</span>
<span class="token comment">// join() 视空位置为空字符串</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "1</span></code></pre></div>]]></content>
    <category term="JavaScript"/>
    <published>2024-04-19T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">类数组对象</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/009-array-like-object.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/009-array-like-object.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>概念</h2>
<p>在 Javascript 里，有一个特殊的对象，它拥有 <code>length</code> 属性和若干索引属性，被称为类数组对象。常见的类数组对象有 <code>arguments</code> 和 DOM 方法返回的结果。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arrLike <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>
  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">'age'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span>

<span class="token comment">// arguments 对象</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arguments
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>

<span class="token comment">// DOM 方法返回的结果</span>
document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span> <span class="token comment">// HTMLCollection(3) [img, img, img]</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>概念</h2>
<p>在 Javascript 里，有一个特殊的对象，它拥有 <code>length</code> 属性和若干索引属性，被称为类数组对象。常见的类数组对象有 <code>arguments</code> 和 DOM 方法返回的结果。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arrLike <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>
  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">'age'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span>

<span class="token comment">// arguments 对象</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arguments
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>

<span class="token comment">// DOM 方法返回的结果</span>
document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span> <span class="token comment">// HTMLCollection(3) [img, img, img]</span>
</code></pre></div><p>类数组对象和数组类似之处在于：访问、赋值、获取长度的操作与数组一致，因此叫做类数组对象。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// name</span>
arrLike<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'wang'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 2</span>
</code></pre></div><h2>使用数组方法</h2>
<p>类数组对象不能 <strong>直接调用</strong> 数组的方法，如果想使用数组方法，需要使用 <code>call()</code> 或 <code>apply</code> 间接调用。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>arrLike<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'hobby'</span><span class="token punctuation">)</span> <span class="token comment">// Uncaught TypeError: arrLike.push is not a function</span>

<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">,</span> <span class="token string">'hobby'</span><span class="token punctuation">)</span> <span class="token comment">// { '0': 'name', '1': 'age', '2':  'hobby', length: 3 }</span>
</code></pre></div><p>实际开发中，为了使操作方便，通常先将类数组对象转换为数组对象，通常使用 <code>Array.from()</code> 进行转换。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// call 调用 slice</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span>

<span class="token comment">// call 调用 splice</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">// apply 调用 concat</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arrLike<span class="token punctuation">)</span>

<span class="token comment">// Array.from</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span>

<span class="token comment">// 展开运算符</span>
<span class="token punctuation">[</span><span class="token operator">...</span>arrLike<span class="token punctuation">]</span>
</code></pre></div>]]></content>
    <category term="JavaScript"/>
    <published>2022-08-24T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">对象转换方法</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/006-toString-toLocalString-valueOf.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/006-toString-toLocalString-valueOf.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>Object 原型上有三个方法 <code>toString()</code>、<code>toLocalString</code>、<code>valueOf()</code> 可以将对象转换为原始值，然而对于不同的对象类型调用这几种方法会有不同的行为。</p>
<h2><code>toString()</code></h2>
<p><code>toString()</code> 方法用于将一个对象转换为字符串表示形式。对于基本数据类型（如数字、布尔值、字符串等），<code>toString()</code> 方法会返回对应的字符串表示。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 "123"</span>

<span class="token keyword">const</span> bool <span class="token operator">=</span> <span class="token boolean">true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bool<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 "true"</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'Hello'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 "Hello"</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>Object 原型上有三个方法 <code>toString()</code>、<code>toLocalString</code>、<code>valueOf()</code> 可以将对象转换为原始值，然而对于不同的对象类型调用这几种方法会有不同的行为。</p>
<h2><code>toString()</code></h2>
<p><code>toString()</code> 方法用于将一个对象转换为字符串表示形式。对于基本数据类型（如数字、布尔值、字符串等），<code>toString()</code> 方法会返回对应的字符串表示。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 "123"</span>

<span class="token keyword">const</span> bool <span class="token operator">=</span> <span class="token boolean">true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bool<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 "true"</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'Hello'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 "Hello"</span>
</code></pre></div><h2><code>toLocaleString()</code></h2>
<p><code>toLocaleString()</code> 方法与 <code>toString()</code> 类似，但它返回的是一个本地化（即与用户本地文化相关的）的字符串表示。</p>
<p>这意味着返回的字符串可能根据用户的地区设置而有所不同，比如使用不同的日期格式、数字格式等。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出本地化的日期时间字符串</span>
</code></pre></div><h2><code>valueOf()</code></h2>
<p><code>valueOf()</code> 方法返回指定对象的原始值。对于大多数对象来说，<code>valueOf()</code> 方法返回的值与对象本身是相同的，但可以通过重写这个方法来改变返回的值。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">123</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 123</span>
</code></pre></div><h2>自动调用顺序</h2>
<p>在 JavaScript 内部，当需要将对象转换为原始值时（比如在算术运算、逻辑运算、字符串拼接等情况下），会自动调用对象的 <code>valueOf()</code> 和 <code>toString()</code> 方法来获取原始值。它们的调用顺序如下：</p>
<ol>
<li>如果对象具有 <code>valueOf()</code> 方法且返回的是原始值（非对象），则直接使用该值。</li>
<li>如果对象没有 <code>valueOf()</code> 方法，或者 <code>valueOf()</code> 返回的是对象，那么会调用对象的 <code>toString()</code> 方法。</li>
<li>如果对象没有 <code>toString()</code> 方法，或者 <code>toString()</code> 返回的是对象，那么会抛出 TypeError 错误。</li>
</ol>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p><code>valueOf()</code> 和 <code>toString()</code> 方法在不同的上下文中可能会有不同的表现，具体取决于 JavaScript 引擎的实现和调用方式。</p>
</div>
<h2>总结</h2>
<p>这三种方法用于获得对象的字符串或原始值，在一些情况下会被 JavaScript 引擎自动调用，区别如下：</p>
<ul>
<li><code>toString()</code> 用于将对象转换为字符串表示形式。</li>
<li><code>toLocaleString()</code> 返回一个本地化的字符串表示。</li>
<li><code>valueOf()</code> 返回对象的原始值。</li>
</ul>
]]></content>
    <category term="JavaScript"/>
    <published>2024-04-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">基本引用类型</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/007-basic-reference-type.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/007-basic-reference-type.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>引用值（或者对象）是某个特定 <strong>引用类型</strong> 的实例。</p>
<p>新对象通过使用 <code>new</code> 操作符后跟一个构造函数（constructor）来创建。构造函数就是用来创建新对象的函数，比如下面这行代码：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>引用值（或者对象）是某个特定 <strong>引用类型</strong> 的实例。</p>
<p>新对象通过使用 <code>new</code> 操作符后跟一个构造函数（constructor）来创建。构造函数就是用来创建新对象的函数，比如下面这行代码：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>这行代码创建了引用类型 <code>Date</code> 的一个新实例，并将它保存在变量 <code>now</code> 中。<code>Date()</code> 在这里就是构造函数，它负责创建一个只有默认属性和方法的简单对象。</p>
<p>ECMAScript 提供了很多像 <code>Date</code> 这样的原生引用类型，帮助开发者实现常见的任务。</p>
<h2><code>Date</code></h2>
<p><code>Date</code> 类型将日期保存为自协调世界时（UTC，Universal Time Coordinated）时间 1970 年 1 月 1 日午夜（零时）至今所经过的毫秒数。</p>
<p>要创建日期对象，就使用 <code>new</code> 操作符来调用 <code>Date</code> 构造函数：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>在不给 <code>Date</code> 构造函数传参数的情况下，创建的对象将保存当前日期和时间。要基于其他日期和时间创建日期对象，必须传入其毫秒表示（UNIX 纪元 1970 年 1 月 1 日午夜之后的毫秒数）。</p>
<p>为了得到这个时间，可以使用两个辅助函数：</p>
<ul>
<li><code>Date.parse()</code></li>
<li><code>Date.UTC()</code></li>
</ul>
<h3><code>Date.parse()</code> 和 <code>Date.UTC()</code></h3>
<h4><code>Date.parse()</code></h4>
<p><code>Date.parse()</code> 方法接收一个表示日期的字符串参数，尝试将这个字符串转换为表示该日期的毫秒数（本地时间）。</p>
<p>支持下列日期格式：</p>
<ul>
<li>「月/日/年」，如 <code>"5/23/2019"</code>；</li>
<li>「月名 日, 年」，如 <code>"May 23, 2019"</code>；</li>
<li>「周几 月名 日 年 时:分:秒 时区」，如 <code>"Tue May 23 2019 00:00:00 GMT-0700"</code>；</li>
<li>ISO 8601 扩展格式「YYYY-MM-DDTHH:mm:ss.sssZ」，如 <code>"2019-05-23T00:00:00"</code>（只适用于兼容 ES5 的实现）。</li>
</ul>
<p>如果传给 <code>Date.parse()</code> 的字符串并不表示日期，则该方法会返回 <code>NaN</code>。</p>
<p>如果直接把表示日期的字符串传给 <code>Date</code> 构造函数，那么 <code>Date</code> 会在后台调用 <code>Date.parse()</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> someDate1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'May 23, 2019'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> someDate2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'May 23, 2019'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>这两行代码得到的日期对象相同。</p>
<h4><code>Date.UTC()</code></h4>
<p><code>Date.UTC()</code> 方法也返回日期的毫秒表示（UTC 时间），参数是「年、零起点月数（1 月是 0，2 月是 1，以此类推）、日（1 ~ 31）、时（0 ~ 23）、分、秒和毫秒」。</p>
<p>这些参数中，只有前两个（年和月）是必需的。如果不提供日，那么默认为 1 日。其他参数的默认值都是 0。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// GMT 时间 2000 年 1 月 1 日零点</span>
<span class="token keyword">let</span> y2k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2000-01-01T00:00:00.000Z</span>
<span class="token comment">// GMT 时间 2005 年 5 月 5 日下午 5 点 55 分 55 秒</span>
<span class="token keyword">let</span> allFives <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2005</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2005-05-05T17:55:55.000Z</span>
</code></pre></div><p>与 <code>Date.parse()</code> 一样，<code>Date.UTC()</code> 也会被 <code>Date</code> 构造函数隐式调用，但有一个区别：这种情况下创建的是本地日期，不是 <code>GMT</code> 日期。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 本地时间（北京）为：UTC + 8，因此会相差 8 * 60 * 60 * 1000 = 28800000</span>
<span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 28800000</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">JS 中的时间</p>
<p>不同时间概念，详见 <a href="https://juejin.cn/post/7063118893115670536" target="_blank" rel="noopener noreferrer">GMT、UTC、时区、JavaScript Date 总结</a>。</p>
</div>
<h4>对比</h4>
<p><code>Date.UTC()</code> 日期指的是在没有时区偏差的情况下(将日期转换为 GMT 时间)的日期值。</p>
<p><code>Date.parse()</code> 方法是基于本地时区建立的，而 <code>Date.UTC()</code> 方法是基于无时区偏差建立的。</p>
<p>所以如果我们对两个方法传入相同的时间，我们会发现 <code>Date.UTC()</code> 方法得到的毫秒数相对于 <code>Date.parse()</code> 方法得到的毫秒数会多八个小时的毫秒数(这里的本地时区指的是北京时间)。</p>
<h3>继承的方法</h3>
<p><code>Date</code> 类型重写了 <code>toLocaleString()</code>、<code>toString()</code> 和 <code>valueOf()</code> 方法。</p>
<p><code>Date</code> 类型的 <code>toLocaleString()</code> 方法返回与浏览器运行的本地环境一致的日期和时间。</p>
<p><code>toString()</code> 方法通常返回带时区信息的日期和时间，而时间也是以 24 小时制（0~23）表示的。</p>
<p><code>valueOf()</code> 方法不返回原始对象，而是返回日期的毫秒数。因此，操作符（如小于号和大于号）可以直接使用它返回的值。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 2019 年 1 月 1 日</span>
<span class="token keyword">let</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 2019 年 2 月 1 日</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1 <span class="token operator">&lt;</span> date2<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1 <span class="token operator">&gt;</span> date2<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>当需要将对象转换为原始值时（比如在算术运算、逻辑运算、字符串拼接等情况下），会  对象的 <code>valueOf()</code> 和 <code>toString()</code> 方法来获取原始值。</p>
</div>
<h3>日期格式化方法</h3>
<p><code>Date</code> 类型有几个专门用于格式化日期的方法，它们都会返回字符串：</p>
<ul>
<li><code>toDateString()</code> 显示日期中的周几、月、日、年（格式特定于实现）；</li>
<li><code>toTimeString()</code> 显示日期中的时、分、秒和时区（格式特定于实现）；</li>
<li><code>toLocaleDateString()</code> 显示日期中的周几、月、日、年（格式特定于实现和地区）；</li>
<li><code>toLocaleTimeString()</code> 显示日期中的时、分、秒（格式特定于实现和地区）；</li>
<li><code>toUTCString()</code> 显示完整的 UTC 日期（格式特定于实现）。</li>
</ul>
<p>这些方法的输出与 <code>toLocaleString()</code> 和 <code>toString()</code> 一样，会因浏览器而异。因此不能用于在<br>
用户界面上一致地显示日期。</p>
<h2><code>RegExp</code></h2>
<p>正则表达式（Regular Expression）是一种强大的文本模式匹配工具，用于在字符串中搜索、匹配和替换特定的文本。ECMAScript 通过 <code>RegExp</code> 类型支持正则表达式。</p>
<p>正则表达式由模式和标记组成：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> expression <span class="token operator">=</span> <span class="token operator">/</span>pattern<span class="token operator">/</span>flags<span class="token punctuation">;</span>
</code></pre></div><p>pattern（模式）可以是任何简单或复杂的正则表达式，包括字符类、限定符、分组、向前查找和反向引用。每个正则表达式可以带零个或多个 flags（标记），用于控制正则表达式的行为。</p>
<p>下面给出了表示匹配模式的标记。</p>
<ul>
<li><code>g</code>：全局模式，表示查找字符串的全部内容，而不是找到第一个匹配的内容就结束。</li>
<li><code>i</code>：不区分大小写，表示在查找匹配时忽略 <code>pattern</code> 和字符串的大小写。</li>
<li><code>m</code>：多行模式，表示查找到一行文本末尾时会继续查找。</li>
<li><code>y</code>：粘附模式，表示只查找从 <code>lastIndex</code> 开始及之后的字符串。</li>
<li><code>u</code>：Unicode 模式，启用 Unicode 匹配。</li>
<li><code>s</code>：dotAll 模式，表示元字符 <code>.</code> 匹配任何字符（包括 <code>\n</code> 或 <code>\r</code>）。</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 匹配字符串中的所有"at"</span>
<span class="token keyword">let</span> pattern1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">at</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token comment">// 匹配第一个"bat"或"cat"，忽略大小写</span>
<span class="token keyword">let</span> pattern2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[bc]at</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>
<span class="token comment">// 匹配所有以"at"结尾的三字符组合，忽略大小写</span>
<span class="token keyword">let</span> pattern3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.at</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span>
</code></pre></div><h3>实例属性</h3>
<p>通过实例属性可以全面了解正则表达式的信息，但是在实际开发中使用的并不多，因为从模式中可以直接看出。</p>
<ul>
<li><code>lastIndex</code>：表示在源字符串中下一次搜索的开始位置。</li>
</ul>
<h3>实例方法</h3>
<h4><code>exec()</code></h4>
<p><code>exec()</code> 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 <code>null</code>。</p>
<p>返回的数组虽然是 Array 的实例，但包含两个额外的属性：<code>index</code> 和 <code>input</code>。<code>index</code> 是字符串中匹配模式的起始位置，<code>input</code> 是要查找的字符串。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">'table football, foosball'</span>
<span class="token keyword">let</span> array1

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>array1 <span class="token operator">=</span> regex1<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Found </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>array1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. Next starts at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>regex1<span class="token punctuation">.</span>lastIndex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token comment">// Expected output: "Found foo. Next starts at 9."</span>
  <span class="token comment">// Expected output: "Found foo. Next starts at 19."</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">'mom and dad and baby'</span>
<span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">mom( and dad( and baby)?)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span>
<span class="token keyword">let</span> matches <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">.</span>index<span class="token punctuation">)</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">.</span>input<span class="token punctuation">)</span> <span class="token comment">// "mom and dad and baby"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// "mom and dad and baby"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// " and dad and baby"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// " and baby"</span>
</code></pre></div><h4><code>test()</code></h4>
<p><code>test()</code> 方法接收一个字符串参数。如果输入的文本与模式匹配，则参数返回 <code>true</code>，否则返回 <code>false</code>。这个方法适用于只想测试模式是否匹配，而不需要实际匹配内容的情况。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">'000-00-0000'</span>
<span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d{3}-\d{2}-\d{4}</span><span class="token regex-delimiter">/</span></span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The pattern was matched.'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>继承的方法</h3>
<p><code>RegExp</code> 也继承了 <code>Object</code> 上的 <code>valueOf()</code>, <code>toString()</code>, <code>toLocalString()</code> 三个方法。</p>
<p>无论正则表达式是怎么创建的，<code>toLocaleString()</code> 和 <code>toString()</code> 都返回正则表达式的字面量表示。比如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'\\[bc\\]at'</span><span class="token punctuation">,</span> <span class="token string">'gi'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// /\[bc\]at/gi</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// /\[bc\]at/gi</span>
</code></pre></div><p>这里的模式是通过 <code>RegExp</code> 构造函数创建的，但 <code>toLocaleString()</code> 和 <code>toString()</code> 返回的都是其字面量的形式。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>正则表达式的 <code>valueOf()</code> 方法返回正则表达式本身。</p>
</div>
<h2>原始值包装类型</h2>
<p>为了方便操作原始值，ECMAScript 提供了 3 种特殊的引用类型：<code>Boolean</code>、<code>Number</code> 和 <code>String</code>。</p>
<p>每当用到某个原始值的方法或属性时，后台都会创建一个相应原始包装类型的对象，从而暴露出操作原始值的各种方法。来看下面的例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">'some text'</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre></div><p>当第二行访问 <code>s1</code> 时，是以读模式访问的，也就是要从内存中读取变量保存的值。</p>
<p>在以读模式访问字符串值的任何时候，后台都会执行以下 3 步：</p>
<ol>
<li>创建一个 <code>String</code> 类型的实例；</li>
<li>调用实例上的特定方法；</li>
<li>销毁实例。</li>
</ol>
<p>相当于下面行为：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'some text'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
s1 <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre></div><p>引用类型与原始值包装类型的主要区别在于对象的生命周期。在通过 <code>new</code> 实例化引用类型后，得到的实例会在离开作用域时被销毁，而自动创建的原始值包装对象则只存在于访问它的那行代码执行期间。</p>
<p>这意味着不能在运行时给原始值添加属性和方法。比如下面的例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">'some text'</span>
s1<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre></div><p>这里的第二行代码尝试给字符串 <code>s1</code> 添加了一个 <code>color</code> 属性。可是，第三行代码访问 <code>color</code> 属性时，它却不见了。</p>
<p>原因就是第二行代码运行时会临时创建一个 <code>String</code> 对象，而当第三行代码执行时，这个对象已经被销毁了。实际上，第三行代码在这里创建了自己的 <code>String</code> 对象，但这个对象没有 <code>color</code> 属性。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>上述代码在严格模式下会报错：<code>TypeError: Cannot create property 'color' on string 'some text'</code>。</p>
</div>
<p>另外，<code>Object</code> 构造函数作为一个工厂方法，能够根据传入值的类型返回相应原始值包装类型的实例。比如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token string">'some text'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>注意，使用 new 调用原始值包装类型的构造函数，与调用同名的转型函数并不一样。例如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">'25'</span>
<span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// 转型函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> number<span class="token punctuation">)</span> <span class="token comment">// "number"</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// 构造函数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">)</span> <span class="token comment">// "object"</span>
</code></pre></div></div>
<h3><code>Boolean</code></h3>
<p><code>Boolean</code> 的实例会重写 <code>valueOf()</code> 方法，返回一个原始值 <code>true</code> 或 <code>false</code>。<code>toString()</code> 方法被调用时也会被覆盖，返回字符串 <code>"true"</code> 或 <code>"false"</code>。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>永远不要显示使用 <code>Boolean</code> 对象。</p>
</div>
<h3><code>Number</code></h3>
<p>与 <code>Boolean</code> 类型一样，<code>Number</code> 类型重写了 <code>valueOf()</code>、<code>toLocaleString()</code> 和 <code>toString()</code> 方法。<code>valueOf()</code> 方法返回 <code>Number</code> 对象表示的原始数值，另外两个方法返回数值字符串。</p>
<p><code>toString()</code> 方法可选地接收一个表示基数的参数，并返回相应基数形式的数值字符串，如下所示：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "10"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "1010"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "12"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "10"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "a"</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>不建议直接实例化 <code>Number</code> 对象。</p>
</div>
<h4><code>toFixed()</code></h4>
<p>返回包含指定小数点位数的数值字符串，如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "10.00"</span>
</code></pre></div><h4><code>toExponential()</code></h4>
<p>返回以科学记数法（也称为指数记数法）表示的数值字符串。<code>toExponential()</code> 也接收一个参数，表示结果中小数的位数。来看下面的例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toExponential</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "1.0e+1"</span>
</code></pre></div><h4><code>toPrecision()</code></h4>
<p>会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。来看几个例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">99</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "1e+2"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "99"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "99.0"</span>
</code></pre></div><h4><code>isInteger()</code></h4>
<p>ES6 新增了 <code>Number.isInteger()</code> 方法，用于辨别一个数值是否保存为整数。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1.01</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre></div><h3><code>String</code></h3>
<p>3 个继承的方法 <code>valueOf()</code>、<code>toLocaleString()</code> 和 <code>toString()</code> 都返回对象的原始字符串值。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><code>String</code> 类型方法较多，可以查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener noreferrer">MDN String</a>，下面介绍一些常用的。</p>
</div>
<h4><code>concat()</code></h4>
<p>用于将一个或多个字符串拼接成一个新字符串。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> stringValue <span class="token operator">=</span> <span class="token string">'hello '</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> stringValue<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// "hello world"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">)</span> <span class="token comment">// "hello"</span>
</code></pre></div><p>虽然 <code>concat()</code> 方法可以拼接字符串，但更常用的方式是使用加号操作符 <code>+</code>。而且多数情况下，对于拼接多个字符串来说，使用「模版字符串」更方便。</p>
<h4><code>slice()</code>, <code>substring()</code></h4>
<p>这两个方法可以从字符串中提取子字符串。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>还有一个方法 <code>substr()</code>，但是已不再推荐使用该特性。</p>
</div>
<ul>
<li><code>slice(start[, end])</code>：返回 <code>[start, end)</code> 之间的元素，若 <code>end</code> 未指定，则默认到末尾所有元素；</li>
<li><code>substring(start[, end])</code>：返回 <code>[start, end)</code> 之间的元素，若 <code>end</code> 未指定，则默认到末尾所有元素；</li>
</ul>
<p>二者在参数都为正数时，效果一致，但是它们对负数的处理不一样，下面看看例子。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 参数为正数</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'Hello world'</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "ello world"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "ello"</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "ello world"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "ello"</span>
</code></pre></div><p>对负值的处理如下：</p>
<ul>
<li><code>slice(start[, end])</code>：所有负值与字符串长度相加；</li>
<li><code>substring(start[, end])</code>：所有负值置 0，若 <code>start</code> 大于 <code>end</code>，则会将二者调换。</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 参数为负数</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'Hello world'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// str.slice(8) "rld"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// str.slice(3, 7) "lo w"</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// str.substring(0) "hello world"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// str.substring(3, 0) -&gt; str.substring(0, 3) "hel"</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>为了减少心智负担，给所有参数置为正数即可。</p>
</div>
<h4><code>indexOf()</code>, <code>lastIndexOf()</code></h4>
<p>这两个方法从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回 <code>-1</code>）。</p>
<p>两者的区别在于，<code>indexOf()</code> 方法从字符串开头开始查找子字符串，而 <code>lastIndexOf()</code> 方法从字符串末尾开始查找子字符串。来看下面的例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> stringValue <span class="token operator">=</span> <span class="token string">'hello world'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 7</span>
</code></pre></div><h4><code>startsWith()</code>, <code>endsWith()</code>, <code>includes()</code></h4>
<p>这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。它们的区别在于，<code>startsWith()</code> 检查开始于索引 <code>0</code> 的匹配项，<code>endsWith()</code> 检查开始于索引 <code>(string.length - substring.length)</code> 的匹配项，而 <code>includes()</code> 检查整个字符串：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">'foo bar baz'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'baz'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'qux'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre></div>]]></content>
    <category term="JavaScript"/>
    <published>2024-04-17T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">执行上下文</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/005-execution-context.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/005-execution-context.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>执行上下文</h2>
<p>执行上下文（Execution Context）是 JavaScript 代码执行时所在的环境，一共有三种不同的执行上下文：</p>
<ul>
<li>全局执行上下文（Global Execution Context, GEC）：最基本的执行上下文，在一开始就会进行初始化：创建全局上下文，将 <code>this</code> 指向这个对象；一个 JavaScript 程序只有一个 GEC；浏览器环境中的全局对象是 <code>window</code>，在 Node 环境中全局对象是 <code>global</code>；</li>
<li>函数执行上下文（Function Execution Context, FEC）：函数只有在调用时才会产生一个函数执行上下文；</li>
<li>Eval 执行上下文（Eval Execution Context, EEC）：<code>eval</code> 函数执行时产生的执行上下文。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>执行上下文</h2>
<p>执行上下文（Execution Context）是 JavaScript 代码执行时所在的环境，一共有三种不同的执行上下文：</p>
<ul>
<li>全局执行上下文（Global Execution Context, GEC）：最基本的执行上下文，在一开始就会进行初始化：创建全局上下文，将 <code>this</code> 指向这个对象；一个 JavaScript 程序只有一个 GEC；浏览器环境中的全局对象是 <code>window</code>，在 Node 环境中全局对象是 <code>global</code>；</li>
<li>函数执行上下文（Function Execution Context, FEC）：函数只有在调用时才会产生一个函数执行上下文；</li>
<li>Eval 执行上下文（Eval Execution Context, EEC）：<code>eval</code> 函数执行时产生的执行上下文。</li>
</ul>
<p>下面是一个简单的例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* global execution context */</span>
<span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// FEC of baz</span>
  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">3</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// 3</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// FEC of bar</span>
  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">//2</span>
  <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// GEC</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// 1</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// 1</span>
<span class="token comment">/* global execution context */</span>
</code></pre></div><ol>
<li>当程序执行时，首先 JS 引擎会创建一个 GEC，不在函数内的代码都是 GEC 的一部分；</li>
<li>当函数被调用时，会创建对应的 FEC，函数内部的代码会马上执行；</li>
<li><strong>每一个执行上下文都有自己的变量环境</strong>，因此尽管 <code>foo</code> 被声明了三次，但因为它们在不同的上下文，因此它们是独立的，不会相互影响；</li>
</ol>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/example1.png" alt="example" tabindex="0" loading="lazy"><figcaption>example</figcaption></figure>
<h2>执行上下文栈</h2>
<p>执行上下文栈（Execution Context Stack）也叫调用栈。</p>
<p>当程序执行时，JS 引擎会创建 <strong>全局执行上下文</strong>，并将它压入当前调用栈。每当函数调用时，JS 引擎会创建对应的函数上下文，并将它压入栈顶，当函数执行完毕时，则会将该函数的执行上下文从调用栈弹出。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'global execution context'</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo 正在执行'</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo 结束执行'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar 正在执行'</span><span class="token punctuation">)</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar 结束执行'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'baz 正在执行'</span><span class="token punctuation">)</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'baz 结束执行'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'program successfully executed'</span><span class="token punctuation">)</span>

<span class="token comment">// global execution context</span>
<span class="token comment">// baz 正在执行</span>
<span class="token comment">// bar 正在执行</span>
<span class="token comment">// foo 正在执行</span>
<span class="token comment">// foo 结束执行</span>
<span class="token comment">// bar 结束执行</span>
<span class="token comment">// baz 结束执行</span>
<span class="token comment">// program successfully executed</span>
</code></pre></div><p>示意图如下：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/example2.png" alt="执行上下文栈" tabindex="0" loading="lazy"><figcaption>执行上下文栈</figcaption></figure>
<h2>ES3 中的执行上下文</h2>
<p>上面从宏观角度分析了 JavaScript 执行机制，接下来看看执行上下文中的详细内容。</p>
<h3>变量对象（variable object, VO）</h3>
<p>每个执行上下文都有一个存储变量的对象，称为变量对象，包含当前函数定义的变量、函数、参数。</p>
<ol>
<li>检查当前上下文的参数列表，将 VO 中的 <code>arguments</code> 属性赋值为 <code>Arguments</code> 对象；</li>
<li>检查当前上下文中的函数声明，每检查到一个函数声明，则在 VO 中以函数名建立一个属性，指向函数所在的内存地址；</li>
<li>检查所有 <code>var</code> 变量声明，为其赋值。</li>
</ol>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>这个操作就是变量提升，但是函数声明会比 <code>var</code> 声明更加靠前。</p>
</div>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"baz"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> v1<span class="token punctuation">;</span>
  <span class="token keyword">var</span> v2 <span class="token operator">=</span> <span class="token string">"v2"</span>
<span class="token punctuation">}</span>

<span class="token function">baz</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">VO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">arguments</span><span class="token operator">:</span> Arguments Object<span class="token punctuation">,</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">0x111</span> Function<span class="token punctuation">,</span>
  <span class="token literal-property property">v1</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">v2</span><span class="token operator">:</span> <span class="token string">"v2"</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>活动对象（activation object, AO）</h3>
<p>当函数进入执行阶段时，变量对象则会变成一个活动对象，能访问到其中的各种属性。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>变量对象和活动对象就是同一个东西，只是处于不同时期而已。</p>
</div>
<h3>作用域链（scope chain）</h3>
<p>作用域链由当前 AO 和父级 VO 组成。当函数创建时，会有一个名为 <code>[[scope]]</code> 的内部属性保存所有父变量对象到其中。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>Scope <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">AO</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>作用域链决定了各级上下文的代码在访问变量和函数时的顺序，在搜索变量时会从最前端开始查找，然后逐级往后，直到找到变量。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token string">'blue'</span>
<span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">===</span> <span class="token string">'blue'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    color <span class="token operator">=</span> <span class="token string">'red'</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    color <span class="token operator">=</span> <span class="token string">'blue'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>这里由于作用域链就可以访问到 <code>color</code> 变量，这里 <code>changeColor</code> 的作用域链包含两个对象，自身的活动对象和全局上下文的变量对象。</p>
<h3><code>this</code></h3>
<p>执行上下文的最后一个部分为当前函数的调用者，关于 <code>this</code> 的各种问题，见 。</p>
<h2>ES5 中的执行上下文</h2>
<p>ES5 中去除了 ES3 里变量对象和活动对象，取而代之的是词法环境（Lexical Environment）和变量环境（Variable Environment）。</p>
<p>ES5 中的词法环境和变量环境和 ES3 中的变量环境是一样的，只不过分成了两部分而已。其中词法环境绑定的是 <code>let</code>、<code>const</code> 声明的变量，而变量环境绑定的是 <code>var</code> 声明的值。</p>
<h2>面试题</h2>
<h3>面试题一</h3>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">100</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  n <span class="token operator">=</span> <span class="token number">200</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// 200</span>
</code></pre></div><p><code>foo()</code> 内的 <code>n</code> 会通过作用域链访问到全局执行上下文中的变量 <code>n</code>，因此会打印 <code>200</code>。</p>
<h3>面试题二</h3>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">200</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// 200</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">100</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>由于变量提升，首先输出 <code>undefined</code>，然后输出 <code>200</code>。</p>
<h3>面试题三</h3>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
  <span class="token keyword">return</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">200</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>虽然 <code>a = 200</code> 不会执行，但是会被变量提升。</p>
<h3>面试题四</h3>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token comment">// =&gt; 转成下面的两行代码</span>
  <span class="token comment">// var a = 10</span>
  <span class="token comment">// b = 10</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// a is not undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 10</span>
</code></pre></div><h3>面试题五</h3>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// 123</span>
  foo <span class="token operator">=</span> <span class="token number">234</span>
<span class="token punctuation">}</span>

<span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre></div><p>运行 <code>bar</code> 函数的时候将 <code>123</code> 数字作为实参传入，所以操作的还是本地作用域的 <code>foo</code>。</p>
<h2>参考链接</h2>
<ul>
<li><a href="https://dev.to/ahmedtahir/what-is-the-execution-context-execution-stack-scope-chain-in-js-26nc" target="_blank" rel="noopener noreferrer">What is the Execution Context, Execution Stack &amp; Scope Chain in JS - DEV Community</a></li>
<li><a href="https://juejin.cn/post/6844904158957404167" target="_blank" rel="noopener noreferrer">面试官：说说执行上下文吧 - 掘金 (juejin.cn)</a></li>
</ul>
]]></content>
    <category term="JavaScript"/>
    <published>2022-04-21T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">原始值和引用值</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/004-primitive-value-reference-value.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/004-primitive-value-reference-value.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>按值访问和按引用访问</h2>
<p>ECMAScript 变量可以包含两种不同类型的数据：原始值和引用值。原始值（primitive value）就是最简单的数据，引用值（reference value）则是由多个值构成的对象。</p>
<p>在把一个值赋给变量时，JavaScript 引擎必须确定这个值是原始值还是引用值。</p>
<p>保存原始值的变量是 <strong>按值</strong>（by value）访问的，因为我们操作的就是存储在变量中的实际值。引用值是保存在内存中的对象。</p>
<p>与其他语言不同，JavaScript 不允许直接访问内存位置，因此也就不能直接操作对象所在的内存空间。在操作对象时，实际上操作的是对该对象的 <strong>引用</strong>（reference）而非实际的对象本身。为此，保存引用值的变量是 <strong>按引用</strong>（by reference）访问的。</p>]]></summary>
    <content type="html"><![CDATA[<h2>按值访问和按引用访问</h2>
<p>ECMAScript 变量可以包含两种不同类型的数据：原始值和引用值。原始值（primitive value）就是最简单的数据，引用值（reference value）则是由多个值构成的对象。</p>
<p>在把一个值赋给变量时，JavaScript 引擎必须确定这个值是原始值还是引用值。</p>
<p>保存原始值的变量是 <strong>按值</strong>（by value）访问的，因为我们操作的就是存储在变量中的实际值。引用值是保存在内存中的对象。</p>
<p>与其他语言不同，JavaScript 不允许直接访问内存位置，因此也就不能直接操作对象所在的内存空间。在操作对象时，实际上操作的是对该对象的 <strong>引用</strong>（reference）而非实际的对象本身。为此，保存引用值的变量是 <strong>按引用</strong>（by reference）访问的。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/V8-stack-heap.png" alt="按值访问和按引用访问" tabindex="0" loading="lazy"><figcaption>按值访问和按引用访问</figcaption></figure>
<h2>传递参数</h2>
<p>ECMAScript 中所有函数的参数都是按值传递的。这意味着函数外的值会被复制到函数内部的参数中，就像从一个变量复制到另一个变量一样。</p>
<p>如果是原始值，那么就跟原始值变量的复制一样，如果是引用值，那么就跟引用值变量的复制一样。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>变量有按值和按引用访问，而传参则只有按值传递。</p>
</div>
<p>在按值传递参数时，值会被复制到一个局部变量（即一个命名参数，<code>arguments</code> 对象中的一个槽位）。来看几个例子。</p>
<p><strong>参数为基本类型</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  value <span class="token operator">=</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// 输出: 2</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//输出: 1</span>
</code></pre></div><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>a: 1
foo:
  - value: 1
</code></pre></div><p>在这个例子中，声明了一个变量 <code>a</code>，把它传入 <code>foo</code> 函数，函数中我们改变了 <code>value</code> 的值，但在函数外 <code>a</code> 的值没有改变。</p>
<p>因为基本类型是按值传递，改变的只是 <code>value</code> 这个拷贝副本的值，对原值没有影响。</p>
<p><strong>参数为引用类型</strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  o<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 输出: 2</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment">// 输出: 2</span>
</code></pre></div><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>obj: 0x01 -&gt; { a: 1 }
foo:          |
  - 0: 0x01 -&gt;
</code></pre></div><p>在这里，声明了一个对象 <code>obj</code>，把它传入 <code>foo</code> 函数赋值为 <code>o</code>，此时 <code>o</code> 与外部定义的 <code>obj</code> 的值为同一个内存地址，指向同一个对象。</p>
<p>函数中改变了 <code>o</code> 的 <code>a</code> 属性的值（按引用访问），然后可以看到在函数外 <code>obj.a</code> 的值也被改变了。</p>
<p>再来看一个例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  o <span class="token operator">=</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment">// 输出：2</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 输出：1</span>
</code></pre></div><div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>obj: 0x01 -&gt; { value: 1 }
foo:          |
  - o: 0x01 -&gt;
</code></pre></div><p>这里也声明了一个对象，不同的是，<code>foo</code> 函数直接修改了 <code>o</code> 的值，将内存地址变为一个普通原始值 <code>2</code>，但是这里并没有对外部的 <code>obj</code> 地址进行修改，因此 <code>console.log(obj.value)</code> 仍然打印 <code>1</code>。</p>
]]></content>
    <category term="JavaScript"/>
    <published>2024-04-16T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">浏览器渲染原理</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/browser/01-how-browser-rendering-works.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/browser/01-how-browser-rendering-works.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>浏览器渲染主要是依靠浏览器内核也就是浏览器渲染引擎，它通过一系列的解析将 HTML 文档渲染在浏览器上。</p>
<h2>主要流程</h2>
<p>渲染引擎会从网络层中获取将要渲染的文档，主要的工作流程如下：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/1-webkitflow.png" alt="webkit-flow" tabindex="0" loading="lazy"><figcaption>webkit-flow</figcaption></figure>]]></summary>
    <content type="html"><![CDATA[<p>浏览器渲染主要是依靠浏览器内核也就是浏览器渲染引擎，它通过一系列的解析将 HTML 文档渲染在浏览器上。</p>
<h2>主要流程</h2>
<p>渲染引擎会从网络层中获取将要渲染的文档，主要的工作流程如下：</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/1-webkitflow.png" alt="webkit-flow" tabindex="0" loading="lazy"><figcaption>webkit-flow</figcaption></figure>
<ol>
<li>首先浏览器会解析 HTML 文档，将 HTML 解析成 DOM 树；CSS 样式表也会在同时进行加载，生成样式规则；而 JavaScript 会通过 DOM API 和 CSSOM API 来操作 DOM Tree 和 Style Rules。</li>
<li>解析完成后，渲染引擎会通过 DOM Tree 和 Style Rules 创造 Render Tree，此时会计算各个 DOM 在浏览器上的具体坐标。</li>
<li>最后渲染引擎遍历整个 Render Tree，由 UI 后端层绘制。</li>
</ol>
<p>整个渲染过程一个渐进的过程。为了更好的用户体验，渲染引擎将尽快在屏幕上显示内容。在开始构件和渲染 Render Tree 之前，它不会等到所有 HTML 都被解析。在部分内容被渲染的同时，渲染引擎会继续向服务器请求剩下的内容。</p>
<h2>HTML 解析器</h2>
<p>HTML 解析器的作用是将 HTML 解析成 DOM 树：</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.png<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/2-dom-tree.png" alt="dom-tree" tabindex="0" loading="lazy"><figcaption>dom-tree</figcaption></figure>
<p>HTML 解析算法包括两个阶段：</p>
<ol>
<li>标记化：词法分析，将输入解析为标记。HTML 标记包括开始标记、结束标记、属性名称和属性值。标记器识别 token，将它传递给树构造器，然后接受下一个字符以识别下一个标记，直到输入的结束。</li>
<li>树构建：构建成 DOM 树。</li>
</ol>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/3-html-parse.png" alt="html-parse" tabindex="0" loading="lazy"><figcaption>html-parse</figcaption></figure>
<h2>CSS 解析器</h2>
<p>解析器都会将 CSS 文件解析成 StyleSheet 对象，且每个对象都包含 CSS 规则。CSS 规则对象则包含选择器和声明对象，以及其他与 CSS 语法对应的对象。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/4-css-parse.png" alt="css-parse" tabindex="0" loading="lazy"><figcaption>css-parse</figcaption></figure>
<h2>Render Tree</h2>
<p>在 DOM 树构建的同时，浏览器还会构建另一个树结构：呈现树。这是由可视化元素按照其显示顺序而组成的树，也是文档的可视化表示。它的作用是让您按照正确的顺序绘制内容。</p>
<p>Render Tree 和 DOM Tree 并不是一一对应的，非可视化的 DOM 元素不会插入呈现树中，例如 <code>head</code> 元素。如果元素的 <code>display</code> 属性值为 <code>none</code>，那么也不会显示在呈现树中（但是 <code>visibility</code> 属性值为 <code>hidden</code> 的元素仍会显示）。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/5-render-tree.png" alt="render-tree" tabindex="0" loading="lazy"><figcaption>render-tree</figcaption></figure>
<p>接下来浏览器需要做的就是计算样式，将每一个 Render 对象的可视化属性计算（根据一系列规则，如层叠性、选择器权重等）出来，但是在这个过程中，并不包含位置和大小信息。计算这些值的过程叫做布局或回流。</p>
<p>总之，到目前为止，渲染引擎已经经历了一系列的工作，可以将页面展示到浏览器上了。</p>
<h2>参考链接</h2>
<ol>
<li><a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/#The_order_of_processing_scripts_and_style_sheets" target="_blank" rel="noopener noreferrer">How Browsers Work: Behind the scenes of modern web browsers - HTML5 Rocks</a></li>
<li><a href="https://coolshell.cn/articles/9666.html" target="_blank" rel="noopener noreferrer">浏览器的渲染原理简介</a></li>
<li><a href="https://zh.wiki.hancel.org/wiki/JavaScript%E5%BC%95%E6%93%8E" target="_blank" rel="noopener noreferrer">JavaScript 引擎 - 维基百科</a></li>
<li><a href="https://zh.m.wikipedia.org/wiki/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%95%E6%93%8E" target="_blank" rel="noopener noreferrer">浏览器引擎 - 维基百科</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1679313" target="_blank" rel="noopener noreferrer">浏览器内核及分类 - 腾讯云社区</a></li>
</ol>
]]></content>
    <category term="browser"/>
    <published>2021-12-16T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">V8 引擎</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/browser/02-V8.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/browser/02-V8.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>在 JavaScript 引擎中，V8 无疑是最流行的，Chrome 与 Node.js 都使用了 V8 引擎。</p>
<p>V8 由很多子模块构成，有几个核心模块：</p>
<ul>
<li>Parser：解析器，负责将 JavaScript 代码解析成抽象语法树（Abstract Syntax Tree, AST）；</li>
<li>Ignition：解释器（interpreter），负责将 AST 转换为字节码（Bytecode）并执行；同时收集 TurboFan 优化编译所需的信息，比如函数参数的类型；</li>
<li>TurboFan：编译器（compiler），利用 Ignition 所收集的信息，将字节码转换为优化的机器码；</li>
<li>Orinoco：垃圾回收（garbage collector），负责将程序不再需要的内存空间回收。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>在 JavaScript 引擎中，V8 无疑是最流行的，Chrome 与 Node.js 都使用了 V8 引擎。</p>
<p>V8 由很多子模块构成，有几个核心模块：</p>
<ul>
<li>Parser：解析器，负责将 JavaScript 代码解析成抽象语法树（Abstract Syntax Tree, AST）；</li>
<li>Ignition：解释器（interpreter），负责将 AST 转换为字节码（Bytecode）并执行；同时收集 TurboFan 优化编译所需的信息，比如函数参数的类型；</li>
<li>TurboFan：编译器（compiler），利用 Ignition 所收集的信息，将字节码转换为优化的机器码；</li>
<li>Orinoco：垃圾回收（garbage collector），负责将程序不再需要的内存空间回收。</li>
</ul>
<p>下面这张图是 V8 现有的工作流程，非常重要，在后面阅读的时候可以翻上来看看。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/v8-work-flow.webp" alt="v8-work-flow" tabindex="0" loading="lazy"><figcaption>v8-work-flow</figcaption></figure>
<h2>Parser</h2>
<p>为了让 V8 能够理解 JavaScript 代码，必须先将源码通过 <strong>Parser</strong> 解析成抽象语法树——代表程序结构的一系列对象。然后抽象语法树会被 <strong>Ignition</strong> 编译成字节码。这两个阶段是 V8 引擎性能的关键。</p>
<p>下图是 Parser 的工作流程：</p>
<img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/parser.svg" style="background-color: #fff">
<p>整个流程分为两个阶段：词法分析和语法分析。</p>
<ul>
<li><strong>词法分析</strong>：scanner 从我们编写的 JavaScript 代码中生成一系列的 tokens。而 tokens 是由一个或多个具有单一语义的字符组成的块：字符串、标识符、运算符 <code>++</code> 等。</li>
<li><strong>语法分析</strong>：语法分析的输入就是词法分析的输出（即 tokens），输出是 AST 抽象语法树。当程序出现语法错误的时候，V8 会在语法分析阶段抛出异常。</li>
</ul>
<p>V8 为了提升 scanner 性能，又做了 <strong>延迟解析</strong>（lazy parsing）的优化，一些不会用到函数并不会被马上编译，他们会被 PreParser 处理，当以后调用一个 <code>preparsed</code> 函数时，它会根据需要进行完全解析和编译。</p>
<h2>Ignition</h2>
<p>当 Parser 将代码解析成 AST 输入给 Ignition，Ignition 会将 AST 转换为字节码，分三种情况：</p>
<ul>
<li>函数只声明而不调用，则 Ignition 不会做任何操作；</li>
<li>如果函数只调用一次，则 Ignition 会解释字节码并执行。下面来看看例子；</li>
<li>如果函数调用多次，则 Ignition 会收集 TurboFan 优化所需的信息（比如函数参数的类型信息等）。</li>
</ul>
<p>下面来看看例子。</p>
<ol>
<li>
<p>只是声明函数 <code>add</code>，但是没有调用，则 Ignition 不会做任何转换。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">}</span>
</code></pre></div></li>
<li>
<p>声明后第一次调用 <code>add</code> 函数，Ignition 会把它编译成字节码执行。到这个时候，JavaScript 代码就已经执行完成了。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre></div></li>
<li>
<p>但是如果发现有<strong>热点函数</strong>（即一个函数被多次调用），Ignition 就会收集 <code>add</code> 函数的各种参数类型，为 TurboFan 的优化提供支持。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 调用多次，标记成热点函数，收集各种信息</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span>
</code></pre></div></li>
</ol>
<h2>TurboFan</h2>
<p>TurboFan 是一个编译器，可以将字节码编译为 CPU 可以直接执行的机器码。如果一个函数被多次调用，就会被标记为<strong>热点函数</strong>，那么就会经过 TurboFan 转换成优化的机器码，提高代码的执行性能。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">}</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token function">OptimizeFunctionOnNextCall</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre></div><p>V8 的 <code>%OptimizeFunctionOnNextCall</code> 可以直接指定优化哪个函数，它根据上次调用的参数反馈优化 <code>add</code> 函数，很明显这次的反馈是整型数，所以 TurboFan 会根据参数是整型数进行优化直接生成机器码，下次函数调用直接调用优化好的机器码。</p>
<p>但是，机器码实际上也会被还原为字节码，这是因为如果后续执行函数的过程中，类型发生了变化（比如 <code>add</code> 函数原来执行的是 <code>number</code> 类型，后来执行变成了 <code>string</code> 类型），之前优化的机器码并不能正确的处理运算，就会逆向的转换成字节码。这个就是最上面那个图还有个 <code>Deoptimization</code> 的原因。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">}</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>
</code></pre></div><blockquote>
<p>到此，V8 引擎的工作流程就已经完成了，但是还没有细究里面的执行细节，只是大概地了解了工作流程，等以后能完全看懂官方文章了再回来更新。</p>
</blockquote>
<h2>参考链接</h2>
<ol>
<li><a href="https://zh.wikipedia.org/wiki/JavaScript%E5%BC%95%E6%93%8E" target="_blank" rel="noopener noreferrer">JavaScript 引擎 - 维基百科</a></li>
<li><a href="https://blog.fundebug.com/2019/07/16/how-does-v8-work/" target="_blank" rel="noopener noreferrer">JavaScript 深入浅出第 4 课：V8 引擎是如何工作的？</a></li>
<li><a href="https://v8.dev/blog/scanner" target="_blank" rel="noopener noreferrer">Blazingly fast parsing, part 1: optimizing the scanner</a></li>
<li><a href="https://v8.dev/blog/preparser" target="_blank" rel="noopener noreferrer">Blazingly fast parsing, part 2: lazy parsing · V8</a></li>
<li><a href="https://v8.dev/blog/ignition-interpreter" target="_blank" rel="noopener noreferrer">Firing up the Ignition interpreter · V8</a></li>
<li><a href="https://mp.weixin.qq.com/s/t__Jqzg1rbTlsCHXKMwh6A" target="_blank" rel="noopener noreferrer">JavaScript 引擎 V8 执行流程概述</a></li>
</ol>
]]></content>
    <category term="browser"/>
    <published>2022-01-13T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">内存管理</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/browser/03-memory-management.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/browser/03-memory-management.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>像 C、C++ 等编程语言都需要手动管理内存，在创建变量时需要申请（<code>malloc()</code>），不需要用了之后在释放内存空间（<code>free()</code>）。而 JavaScript、Java、Python 等都是自动管理内存，在创建变量时自动分配内存，而在不使用后自动释放，释放的过程称为 <strong>垃圾回收</strong>。</p>
<p>虽然不同语言管理内存的方式不同，但是内存声明周期是基本一致的：</p>
<ol>
<li>分配你所需要的内存</li>
<li>使用分配到的内存（读、写）</li>
<li>不需要时将其释放</li>
</ol>
]]></summary>
    <content type="html"><![CDATA[<p>像 C、C++ 等编程语言都需要手动管理内存，在创建变量时需要申请（<code>malloc()</code>），不需要用了之后在释放内存空间（<code>free()</code>）。而 JavaScript、Java、Python 等都是自动管理内存，在创建变量时自动分配内存，而在不使用后自动释放，释放的过程称为 <strong>垃圾回收</strong>。</p>
<p>虽然不同语言管理内存的方式不同，但是内存声明周期是基本一致的：</p>
<ol>
<li>分配你所需要的内存</li>
<li>使用分配到的内存（读、写）</li>
<li>不需要时将其释放</li>
</ol>
<p>第二步的使用内存就很常见了，我们写的代码就是这一步，因此这里介绍第一步和第三步的基本内容。</p>
<h2>分配内存空间</h2>
<p>现在来看看 V8 引擎是如何给不同变量分配内存的。</p>
<p>V8 主要有三种内存空间：</p>
<ul>
<li>代码空间：主要存储可执行代码；</li>
<li>栈空间：JavaScript 对于 <strong>基本数据类型</strong> 内存的分配会在执行时直接在栈空间进行分配；</li>
<li>堆空间：JavaScript 对于 <strong>复杂数据类型</strong> 内存的分配会在堆内存中开辟一块空间，并且将这块空间的指针（地址）返回给变量引用（存放在栈空间）。</li>
</ul>
<p>下面看看例子：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'heap'</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>当代码执行到第二行时，栈底是 <code>a</code>，栈顶是 <code>b</code>，此时 <code>b</code> 的值是一个复杂数据类型，那么会在堆空间中为这个数据分配一个空间，并把 <code>b</code> 的变量值赋值为这个空间的地址。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/V8-stack-heap.png" alt="V8-stack-heap" tabindex="0" loading="lazy"><figcaption>V8-stack-heap</figcaption></figure>
<p>那么，为什么要将复杂数据类型放在堆空间，而不是一起放在栈空间呢？</p>
<p>因为 V8 引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间分配的内存过大，那么会影响到上下文切换的效率，从而导致代码执行速度过慢。</p>
<p>因此，栈空间不会设置太大，主要用来存放基本数据类型（占用空间小），而像复杂数据类型，因为他们的占用空间一般较大，因此会被存放在堆空间中。</p>
<h2>常见的垃圾回收算法</h2>
<p>了解了如何分配不同变量的内存后，第二步的读写其实已经包含在代码里了，最关键的一步就是如何将不再需要的 <strong>内存回收</strong>。</p>
<p>在整个垃圾回收的过程中，最困难的地方在于如何找到「哪些被分配的内存确实已经不再需要了」，而这个步骤没有任何算法可以准确的判断，只是一个近似的过程。</p>
<p>下面先介绍几种常见的垃圾回收算法，再介绍 V8 的垃圾回收机制。</p>
<h3>引用计数算法</h3>
<p>这是最初级的垃圾收集算法。此算法把「对象是否不再需要」简化定义为「对象有没有其他对象引用到它」。当一个对象有一个引用指向它时，它的引用数就会 <code>+1</code>；当没有引用时，即引用数为 <code>0</code>，这个对象就可以被销毁了。</p>
<p>但是一个很大的弊端是会产生循环引用。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  o<span class="token punctuation">.</span>a <span class="token operator">=</span> o2 <span class="token comment">// o 引用 o2</span>
  o2<span class="token punctuation">.</span>a <span class="token operator">=</span> o <span class="token comment">// o2 引用 o</span>

  <span class="token keyword">return</span> <span class="token string">'azerty'</span>
<span class="token punctuation">}</span>

<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>在执行 <code>f()</code> 时，创建了两个对象并相互引用。函数执行结束后，会离开函数作用域，因此它们已经没有用了，按照常理来说应该被销毁。但是因为它们至少都有一次引用，所以不会被回收，造成内存泄露。</p>
<h3>标记清除算法</h3>
<p>这个算法把「对象是否不再需要」简化定义为「对象是否可以获得」，简称「可达性」。</p>
<p>这个算法假定设置一个叫做根（root）的对象（在 Javascript 里，根是全局对象）。垃圾回收器将定期从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象。</p>
<img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/mark-clear.png" style="background-color: #fff">
<p>在上图中，<code>g</code> 和 <code>h</code> 对象互相引用，如果采用 <strong>引用计数算法</strong>，那么这两个对象将不会被垃圾回收。但是使用标记清除算法，因为根对象没有对它们引用，因此会被垃圾回收。这样，循环引用的问题就不存在了。</p>
<h2>V8 垃圾回收机制</h2>
<p>在过去几年，V8 垃圾回收发生了很多变化。以前的垃圾回收器是一个连续的过程，在进行垃圾回收的过程中会暂停其他活动（全停顿，stop-the-world），而现在 V8 的垃圾回收器转变成了具有 <strong>增量回退</strong> 的 <strong>并行</strong>、<strong>并发</strong> 垃圾回收器。</p>
<p>任何垃圾回收器都会执行下面几个基本任务：</p>
<ol>
<li>
<p><strong>标记</strong> 活动对象和非活动对象</p>
</li>
<li>
<p><strong>回收或者重排</strong> 非活动对象占据的内存</p>
</li>
<li>
<p><strong>合并或者整理</strong> 内存（可选）</p>
</li>
</ol>
<p>这些任务可以按顺序执行，也可以任意交错执行。一种直接的方法是暂停 JavaScript 执行，并在主线程上按顺序执行这些任务。这可能会导致主线程出现卡顿和延迟问题，并降低程序吞吐量。</p>
<h3>V8 内存限制</h3>
<p>在介绍 V8 垃圾回收机制之前，我们先来探讨一下为什么需要垃圾回收。</p>
<ul>
<li>当创建一个对象时，就会分配大量内存</li>
<li>在 V8 中限制 64 位的机器大约 1.4GB，32 位机器大约为 0.7GB</li>
<li>操作系统会自动进行栈内存的分配和释放，而堆内存，则由 V8 引擎进行释放</li>
</ul>
<h3>分代堆布局</h3>
<p>V8 中的堆被分成不同的区域，称为代：分为新生代（进一步分为 <code>nursery</code> 和 <code>intermediate</code>），和一个老生代。对象首先被分配到 <code>nursery</code>。如果它们在下一个 GC 中幸存下来，这时候我们把它们移动到 <code>intermediate</code> 子代，如果再经过下一次垃圾回收这个对象仍然存活，这时候我们就会把这个对象移动到老生代（这个策略称为 <strong>对象晋升策略</strong>）。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/generations.svg" alt="generations" tabindex="0" loading="lazy"><figcaption>generations</figcaption></figure>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在垃圾回收中有一个重要的术语：「代际假说」，指大多数对象在新生代就会被回收。从垃圾回收的角度来看，大部分对象一经分配之后就几乎马上变成不可达状态。</p>
</div>
<p>根据 V8 堆中分为不同的区域，可以容易地想到 V8 有两个不同的垃圾回收器：清理新生区的副垃圾回收器和清理老生区的主垃圾回收器。</p>
<p>下面就一一介绍 V8 中的两个垃圾回收器。</p>
<h3>副垃圾回收器——清道夫（Scavenge）</h3>
<p>副垃圾回收器（Scavenger）从新生代中回收垃圾。</p>
<p>在清理时，初始的空闲区域称之为 <code>To-Space</code>，复制对象过来的区域称之为 <code>From-Space</code>；在最坏的情况下，如果每一个对象在清理的时候存活了下来，那我们就要从 <code>From-Space</code> 复制每一个对象到 <code>To-Space</code> 中。</p>
<p>清除步骤（Evacuation）会将所有的活动对象移动到连续的一块内存中，并且标记它们（图中的小圆圈，代表已经经历过一次 GC）；然后会将两块内存空间互换，即把 <code>To-Space</code> 变成 <code>From-Space</code>，<code>From-Space</code> 变成 <code>To-Space</code>。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/Scavenge-1.svg" alt="Scavenge-1" tabindex="0" loading="lazy"><figcaption>Scavenge-1</figcaption></figure>
<p>如果仅仅是凭借这一策略，我们就会很快的耗尽新生代的内存空间；为了新生代的内存空间不被耗尽，在下一次垃圾回收的时候，我们会把活动对象移动（evacuate）到老生代，而不是 <code>To-Space</code>。</p>
<p>在下图中，两块内存空间已经互换，而且 <code>From-Space</code> 又有一个新的对象，假定这个对象在第一次 GC 时存活了下来，那么它将被复制到 <code>To-Space</code> 中。而 <code>From-Space</code> 中已经经历过一次 GC 的对象（通过这个小圆圈的标记得知），假如它们又存活下来，则会被复制到老生区（<strong>对象晋升策略</strong>）。</p>
<p>Scavenge 的最后一步是把移动后的对象的指针地址更新，每一个被复制对象都会留下一个转发地址（forwarding-address），用于更新指针以指向新的地址。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/Scavenge-2.svg" alt="Scavenge-2" tabindex="0" loading="lazy"><figcaption>Scavenge-2</figcaption></figure>
<p>在副垃圾回收器回收过程中，实际上执行了三个步骤：标记、清除和指针更新。</p>
<h3>主垃圾回收器 —— 全量标记和整理（Full Mark-Compact）</h3>
<p>主垃圾回收器从整个堆（heap）中收集垃圾。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/three-phases.svg" alt="three-phases" tabindex="0" loading="lazy"><figcaption>three-phases</figcaption></figure>
<p>标记阶段是利用对象的可达性确定对象是否活跃。从初始的根对象开始，垃圾回收器会跟踪每一个指向其他对象的指针，将其标记为可访问的，同时跟踪对象中每一个属性的指针。整个过程递归进行，直到标记到运行时每一个可访问的对象。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/marking.png" alt="marking" width="50%" height="50%" tabindex="0" loading="lazy"><figcaption>marking</figcaption></figure>
<p>清除阶段将非活动对象进行清除。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/sweeping.png" alt="sweeping" width="50%" height="50%" tabindex="0" loading="lazy"><figcaption>sweeping</figcaption></figure>
<p>一般来说，频繁回收对象后，内存中就会存在大量不连续空间，我们把这些不连续的内存空间称为内存碎片。当内存中出现了大量的内存碎片之后，如果需要分配较大连续内存的时候，就有可能出现内存不足的情况。所以最后一步需要整理这些内存碎片，但这步其实是可选的，因为有的垃圾回收器不会产生内存碎片。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/compaction.png" alt="compaction" width="50%" height="50%" tabindex="0" loading="lazy"><figcaption>compaction</figcaption></figure>
<h2>Orinoco</h2>
<p>Orinoco 是 V8 垃圾回收器项目的代号，它利用最新的和最好的垃圾回收技术来降低主线程挂起的时间， 比如：并行（parallel）垃圾回收，增量（incremental）垃圾回收和并发（concurrent）垃圾回收。</p>
<p>2011 年，V8 从 stop-the-world 标记切换到增量标记。</p>
<p>2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。在 Chrome 64 和 Node.js v10 中已启用，它将标记时间缩短了 60%~70%。还有并行技术，它将新生代的垃圾回收时间缩短了 20%~50%。</p>
<h3>并行垃圾回收（Parallel）</h3>
<p>并行是主线程和协助线程同时执行同样的工作，但是这仍然是一种 <code>stop-the-world</code> 的垃圾回收方式，但是垃圾回收全停顿时间等于总时间除以参与的线程数量（加上一些同步开销）。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/parallel.svg" alt="parallel" tabindex="0" loading="lazy"><figcaption>parallel</figcaption></figure>
<h3>增量垃圾回收（Incremental）</h3>
<p>增量式垃圾回收是主线程间歇性的去做少量的垃圾回收的方式。同时让垃圾回收和 JavaScript 应用逻辑交替进行，这意味着堆的状态可能已经发生了变化，有可能会导致之前的增量回收工作完全无效。</p>
<p>从图中可以看出并没有减少主线程暂停的总时间（事实上，通常会略微增加）。通过允许 JavaScript 间歇执行，同时也间歇性地去做垃圾回收工作，应用程序仍然可以在用户输入或者执行动画的时候得到及时的响应。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/incremental.svg" alt="incremental" tabindex="0" loading="lazy"><figcaption>incremental</figcaption></figure>
<h3>并发垃圾回收（Concurrent）</h3>
<p>并发是主线程持续执行 JavaScript，而辅助线程完全在后台执行垃圾回收。这种方式是这三种技术中最难的一种：JavaScript 堆里面的内容随时都有可能发生变化，从而使之前做的工作完全无效，主线程和辅助线程极有可能在同一时间去更改同一个对象。这种方式的优势也非常明显，主线程不会被挂起，JavaScript 可以自由地执行。</p>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/concurrent.svg" alt="concurrent" tabindex="0" loading="lazy"><figcaption>concurrent</figcaption></figure>
<h2>总结</h2>
<p>首先介绍了内存管理的一般流程，分为三大步：分配、使用、释放。</p>
<p>然后是 V8 如何分配内存：基本数据类型存放在栈空间，复杂数据类型存放在堆空间，以及为什么要这样做。</p>
<p>接着又介绍了常见的垃圾回收算法，主要包括引用计数法和标记清除法。</p>
<p>最后介绍了 V8 的垃圾回收机制以及做出的优化。</p>
<h2>参考链接</h2>
<ul>
<li><a href="https://v8.dev/blog/trash-talk" target="_blank" rel="noopener noreferrer">Trash talk: the Orinoco garbage collector · V8</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management" target="_blank" rel="noopener noreferrer">内存管理 - JavaScript | MDN (mozilla.org)</a></li>
<li><a href="https://time.geekbang.org/column/article/129596" target="_blank" rel="noopener noreferrer">12 | 栈空间和堆空间：数据是如何存储的？</a></li>
<li><a href="https://juejin.cn/post/6844904016325902344" target="_blank" rel="noopener noreferrer">一文搞懂 V8 引擎的垃圾回收</a></li>
<li><a href="https://www.nodejs.red/#/nodejs/memory?id=v8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6" target="_blank" rel="noopener noreferrer">Memory 内存管理和 V8 垃圾回收机制 (nodejs.red)</a></li>
</ul>
]]></content>
    <category term="browser"/>
    <published>2022-01-13T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">跨域</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/browser/04-cross-domain.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/browser/04-cross-domain.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>跨域是因为浏览器的同源策略，协议、域名、端口三者不一致即会造成跨域问题。</p>
<h2>CORS</h2>
<p>简单请求和非简单请求</p>
<h3>简单请求</h3>
<p>请求方法：</p>
<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
<p>请求头：</p>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type</li>
</ul>
<p>对于简单请求，浏览器会在请求头信息增加一个 origin 字段，该字段用来说明本次请求来自哪个源：协议+端口+域名。</p>]]></summary>
    <content type="html"><![CDATA[<p>跨域是因为浏览器的同源策略，协议、域名、端口三者不一致即会造成跨域问题。</p>
<h2>CORS</h2>
<p>简单请求和非简单请求</p>
<h3>简单请求</h3>
<p>请求方法：</p>
<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
<p>请求头：</p>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type</li>
</ul>
<p>对于简单请求，浏览器会在请求头信息增加一个 origin 字段，该字段用来说明本次请求来自哪个源：协议+端口+域名。</p>
<p>服务器根据这个值来决定是否同意这次请求，如果 origin 指定的源在允许范围内，服务器就返回如下响应头：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Access-Control-Allow-Origin: http://api.bob.com 和 origin 一致
Access-Control-Allow-Credentials: true
Access-Control-Expose-Headers: FooBar
Content-Type: text/html; charset=utf-8
</code></pre></div><p>服务器至少设置 Access-Control-Allow-Origin。</p>
<h3>非简单请求</h3>
<p>需要进行 options 预检请求。</p>
<p>请求头</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Access-Control-Request-Method 必须
Access-Control-Request-Headers 逗号分隔符，指定请求会额外发送的头信息字段
</code></pre></div><p>响应头：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Access-Control-Allow-Origin: http://api.bob.com 和 origin 一致
Access-Control-Allow-Methods: GET, POST, PUT
Access-Control-Allow-Credentials: true
Access-Control-Allow-Headers: FooBar
Access-Control-Max-Age: 1728000 本次预检的有效期，秒
</code></pre></div>]]></content>
    <category term="browser"/>
    <published>2022-05-06T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">输入 URL 后发生了什么</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/browser/05-what-happens-after-entering-the-URL.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/browser/05-what-happens-after-entering-the-URL.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>先看看大致流程：</p>
<ol>
<li>生成 HTTP 请求消息：当用户在浏览器中输入网址，浏览器就会对 URL 进行解析；然后浏览器会根据网址的含义来生成请求消息；</li>
<li>向 DNS 服务器查询 Web 服务器的 IP 地址：请求消息生成后，浏览器向 DNS 服务器查询域名对应的 IP 地址，然后委托操作系统（浏览器本身并没有网络通讯的能力）向 Web 服务器发送请求。</li>
<li>委托协议栈发送消息：查询到 IP 地址之后，浏览器就可以将消息委托给操作系统的协议栈（TCP/IP）发送给服务器。</li>
<li>数字信息转换为电信号：通过协议栈将数据变成网络包后，网卡负责将数字信号转换为电信号。</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<p>先看看大致流程：</p>
<ol>
<li>生成 HTTP 请求消息：当用户在浏览器中输入网址，浏览器就会对 URL 进行解析；然后浏览器会根据网址的含义来生成请求消息；</li>
<li>向 DNS 服务器查询 Web 服务器的 IP 地址：请求消息生成后，浏览器向 DNS 服务器查询域名对应的 IP 地址，然后委托操作系统（浏览器本身并没有网络通讯的能力）向 Web 服务器发送请求。</li>
<li>委托协议栈发送消息：查询到 IP 地址之后，浏览器就可以将消息委托给操作系统的协议栈（TCP/IP）发送给服务器。</li>
<li>数字信息转换为电信号：通过协议栈将数据变成网络包后，网卡负责将数字信号转换为电信号。</li>
</ol>
<h2>生成 HTTP 请求消息</h2>
<p>浏览器要做的第一步工作就是对 URL 进行解析，从而生成发送给 Web 服务器的请求消息。</p>
<img src="/assets/image/computer-science/networking/010/parse-url.png" alt="Web浏览器解析URL" style="zoom:60%;">
<h3>省略文件名的情况</h3>
<ol>
<li>
<p><a href="http://www.lab.glasscom.com/dir/" target="_blank" rel="noopener noreferrer">http://www.lab.glasscom.com/dir/</a></p>
<p>以 <code>/</code> 结尾代表访问默认文件，大多数情况下是 <code>index.html</code> 或者 <code>default.htm</code> 之类的文件。</p>
</li>
<li>
<p><a href="http://www.lab.glasscom.com" target="_blank" rel="noopener noreferrer">http://www.lab.glasscom.com</a></p>
<p>省略结尾的 <code>/</code> 符，代表访问服务器根目录下的默认文件，也就是 <code>index.html</code> 或者 <code>default.htm</code>。</p>
</li>
<li>
<p><a href="http://www.lab.glasscom.com/whatisthis" target="_blank" rel="noopener noreferrer">http://www.lab.glasscom.com/whatisthis</a></p>
<p>如果 Web 服务器上存在名 whatisthis 的文件，则作为文件名来处理；如果存在名为 whatisthis 的目录，则作为目录名来处。</p>
</li>
</ol>
<h3>生成请求消息</h3>
<p>对 URL 进行解析之后，浏览器确定了 Web 服务器和文件名，接下来就是根据这些信息来生成 HTTP 请求消息了。</p>
<img src="/assets/image/computer-science/networking/010/message.png" alt="消息格式" style="zoom:60%;">
<h2>向 DNS 服务器查询域名 IP 地址</h2>
<p>浏览器解析完 URL 并生成请求消息后，需要委托操作系统向服务器发送请求消息。</p>
<p>但是在这之前，还需要知道服务器域名对应的 IP 地址。因此需要使用 DNS 服务器查询 IP 地址。</p>
<p>DNS 服务器保存了域名和 IP 的对应关系。</p>
<p>域名中用 <code>.</code> 来分隔，比如 <code>www.lab.glasscom.com.</code>，越往右层级越高，最后的一个点代表根域名，一般可以省略。</p>
<p>根域的服务器信息保存在互联网中的所有 DNS 服务器中，这样任意一台服务器都可以找到并访问根服务器，从而找到其它服务器。</p>
<figure><img src="/assets/image/computer-science/networking/010/DNS.png" alt="DNS" tabindex="0" loading="lazy"><figcaption>DNS</figcaption></figure>
<h2>协议栈</h2>
<p>通过 DNS 获取到服务器的 IP 地址后，浏览器就可以通过 socket 库把 HTTP 报文的传输工作委托给操作系统中的<strong>协议栈</strong>。</p>
<figure><img src="/assets/image/computer-science/networking/010/TCP-IP.png" alt="客户端" tabindex="0" loading="lazy"><figcaption>客户端</figcaption></figure>
<p>其中应用程序当然为应用层，协议栈中的 TCP/UDP 为传输层，他们会接收应用程序的委托执行收发数据的操作。</p>
<blockquote>
<p>像浏览器、邮件等一般的应用程序都是使用 TCP 收发数据的，而像 DNS 查询等收发较短的控制数据的时候则使用 UDP。</p>
</blockquote>
<p>在传送数据时，数据会切分成一个个网络包，而 IP 协议为网络层，负责控制网络包的发给通信对象。</p>
<p>IP 中还包括 ICMP 协议和 ARP 协议。ICMP 用于告知网络包传输过程中产生的错误及各种控制消息，ARP 用于根据 IP 地址查询相应的 MAC 地址。</p>
<h2>网卡</h2>
]]></content>
    <category term="browser"/>
    <published>2021-12-11T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">判断数据类型</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/003-judge-type.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/003-judge-type.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p><code>ECMAScript</code> 有 8 种基本的数据类型（ 7 种原始类型和 1 种引用类型）。</p>
<ul>
<li>原始类型：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code>、<code>BigInt</code>；</li>
<li>引用类型：<code>Object</code>。</li>
</ul>
<p>下面介绍几种判断变量数据类型的几种方法。</p>
<h2><code>typeof</code></h2>]]></summary>
    <content type="html"><![CDATA[<p><code>ECMAScript</code> 有 8 种基本的数据类型（ 7 种原始类型和 1 种引用类型）。</p>
<ul>
<li>原始类型：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code>、<code>BigInt</code>；</li>
<li>引用类型：<code>Object</code>。</li>
</ul>
<p>下面介绍几种判断变量数据类型的几种方法。</p>
<h2><code>typeof</code></h2>
<p>用来返回操作数类型的字符串。语法：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> operand
</code></pre></div><p>但是由于 JavaScript 设计的缺陷，<code>typeof</code> 基本上不能得到想要的结果。它只有一个实际应用场景：<strong>检测一个对象是否已经定义或者是否已经赋值</strong>。</p>
<p>特点：</p>
<ul>
<li>对于基本类型，除 <code>null</code> 外，均可以返回正确结果；</li>
<li>对于引用类型，除 <code>function</code> 外，一律返回 <code>"object"</code>；</li>
<li>对于 <code>null</code>，返回 <code>"object"</code> 类型；</li>
<li>对于 <code>function</code>，返回 <code>"function"</code>；</li>
<li>对于 <code>array</code>, 返回 <code>"object"</code>。</li>
</ul>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token comment">// "object"，得不到想要的值</span>
<span class="token keyword">typeof</span> fn <span class="token comment">// "function"</span>
</code></pre></div><p>总之，数组、对象、<code>null</code> 都会返回 <code>object</code>，其他都能判断正确。</p>
<div class="hint-container tip">
<p class="hint-container-title">为什么 `typeof null` 返回 `object`</p>
<p>由于 JavaScript 第一个版本中，所有值都存在 32 位单元中，每个单元包含一个小的类型标签以及存储的真实值，<code>object</code> 的类型标签是 <code>000</code>，而 <code>null</code> 的类型标签也是 <code>000</code>，因此使用 <code>typeof</code> 判断 <code>null</code> 会被判定为 <code>object</code>。</p>
<ul>
<li><code>000</code>：对象；</li>
<li><code>001</code>: 整数；</li>
<li><code>010</code>：浮点数；</li>
<li><code>100</code>：字符串；</li>
<li><code>110</code>：布尔。</li>
</ul>
</div>
<h2><code>instanceof</code></h2>
<p>用来检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上，返回布尔值。语法：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>object <span class="token keyword">instanceof</span> <span class="token class-name">constructor</span>
</code></pre></div><p>特点：</p>
<ul>
<li>对于 <strong>字面量声明</strong> 的 <code>Number</code>、<code>BigInt</code>、<code>String</code>、<code>Boolean</code>、<code>Symbol</code> 都会返回 <code>false</code>；</li>
<li><strong>只能正确判断引用数据类型</strong>；</li>
<li>只要在当前实例的原型链上，检测结果均为 <code>true</code>；</li>
</ul>
<p>原理：遍历实例对象的原型链 <code>__proto__</code>，直到找到构造函数的 <code>prototype</code> 属性。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>不同环境对 <code>__proto__</code> 的实现不同，而且 Web 标准已经删除该特性，这里只是为了表示方便，开发中需要使用 <code>Object.getPrototypeOf()</code> 获取原型对象。</p>
</div>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myInstanceOf</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在 ES5 中，如果 Object.getPrototypeOf 参数不是一个对象类型</span>
  <span class="token comment">// 将抛出一个TypeError异常。在 ES2015 中，参数会被强制转换为一个 Object。</span>
  <span class="token comment">// 因此需提前判断是否为引用类型</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> left <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>

  <span class="token comment">// right 必须是函数，函数才有 prototype</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> constructor <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'The "constructor" parameter must be a function.'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 获取实例对象的原型</span>
  <span class="token keyword">let</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
    proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>简单实现</h2>
<p>如果只需要准确判断六种基本数据类型，同时又能够准确区分数据类型是 <code>null</code>、<code>array</code>、还是 <code>object</code> 就足够的话，那么我们可以这样实现：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">superTypeof</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">typeof</span> val

  <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res <span class="token operator">=</span> <span class="token string">'null'</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res <span class="token operator">=</span> <span class="token string">'array'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre></div><h2><code>Object.prototype.toString.call(obj)</code></h2>
<p>当 <code>Array.isArray()</code> 不可用时，有如下的补丁，因此更推荐使用 <code>Object.prototype.toString.call(obj)</code> 检测数据类型。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Array<span class="token punctuation">.</span><span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[Object Array]'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果需要判断所有类型，那么可以调用对象原型中的 <code>toString()</code> 方法，<code>Object.prototype.toString.call(obj)</code>：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">_getClass</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'null'</span>
  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content>
    <category term="JavaScript"/>
    <published>2022-05-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">数据类型</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/002-types.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/002-types.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>ECMAScript 有 7 种简单数据类型（也称为原始类型）：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code> 和 <code>BigInt</code>。</p>
<p><code>Symbol</code>（符号）是 ES6 新增的，<code>BigInt</code> 是 ES10 新增。</p>
<p>还有一种复杂数据类型叫 <code>Object</code>（对象）。<code>Object</code> 是一种 <strong>无序</strong> 键值对的集合。</p>]]></summary>
    <content type="html"><![CDATA[<p>ECMAScript 有 7 种简单数据类型（也称为原始类型）：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code> 和 <code>BigInt</code>。</p>
<p><code>Symbol</code>（符号）是 ES6 新增的，<code>BigInt</code> 是 ES10 新增。</p>
<p>还有一种复杂数据类型叫 <code>Object</code>（对象）。<code>Object</code> 是一种 <strong>无序</strong> 键值对的集合。</p>
<p>不同的数据存放在不同的空间中：</p>
<ul>
<li>栈空间：JavaScript 对于 <strong>基本数据类型</strong> 内存的分配会在执行时直接在栈空间进行分配；</li>
<li>堆空间：JavaScript 对于 <strong>复杂数据类型</strong> 内存的分配会在堆内存中开辟一块空间，并且将这块空间的指针（地址）返回给变量引用（存放在栈空间）。</li>
</ul>
<p>这么做的原因是  需要用栈来维护程序执行期间上下文的状态，如果栈空间分配的内存过大，那么会影响到上下文切换的效率，从而导致代码执行速度过慢。</p>
<p>因此，栈空间不会设置太大，主要用来存放基本数据类型（占用空间小），而像复杂数据类型，因为他们的占用空间一般较大，因此会被存放在堆空间中。</p>
<h2><code>Undefined</code></h2>
<p>该类型只有一个值，即 <code>undefined</code>，当时用 <code>var</code>、<code>let</code> 没有初始化时，就相当于给变量赋值为了 <code>undefined</code>。</p>
<h2><code>Null</code></h2>
<p>该类型同样只有一个值 <code>null</code>，表示一个空对象指针，因此使用 <code>typeof</code> 操作符判断会返回 <code>object</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token keyword">null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span> <span class="token comment">// 'object'</span>
</code></pre></div><p>在定义将来要保存对象值的变量时，建议使用 <code>null</code> 来初始化，不要使用其他值（如 <code>undefined</code>）。</p>
<p>这样，只要检查这个变量的值是不是 <code>null</code> 就可以知道这个变量是否在后来被重新赋予了一个对象的引用，比如：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>car <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// car 是一个对象的引用</span>
<span class="token punctuation">}</span>
</code></pre></div><h2><code>Boolean</code></h2>
<p>布尔类型有两个字面值：<code>true</code> 和 <code>false</code>。</p>
<p>虽然布尔值只有两个，但所有其他 ECMAScript 类型的值都有相应布尔值的等价形式。要将一个其他类型的值转换为布尔值，可以调用特定的 <code>Boolean()</code> 转型函数：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">'Hello world!'</span>
<span class="token keyword">let</span> messageAsBoolean <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre></div><p>转换规则如下：</p>
<p>| 数据类型  | 转换为 <code>true</code> 的值     | 转换为 <code>false</code> 的值 |<br>
|</p>
]]></content>
    <category term="JavaScript"/>
    <published>2024-04-14T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">var、let、const 区别</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/001-var-let-const.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/javascript/001-var-let-const.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>首先，三者都是 JavaScript 声明变量的方式。区别在于：</p>
<table>
<thead>
<tr>
<th></th>
<th>var</th>
<th>let</th>
<th>const</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>作用域</strong></td>
<td>全局作用域和函数作用域</td>
<td>块级作用域</td>
<td>块级作用域</td>
</tr>
<tr>
<td><strong>变量提升</strong></td>
<td>自动提升到作用域顶部</td>
<td>提升，暂时性死区</td>
<td>提升，暂时性死区</td>
</tr>
<tr>
<td><strong>冗余声明</strong></td>
<td>允许冗余声明</td>
<td>不允许</td>
<td>不允许</td>
</tr>
<tr>
<td><strong>赋值</strong></td>
<td>可以重新赋值，且不需初始化</td>
<td>可以重新赋值，且不需初始化</td>
<td>不可以重新赋值，必须初始化</td>
</tr>
<tr>
<td><strong>全局声明</strong></td>
<td>成为 <code>window</code> 对象的属性</td>
<td>不会</td>
<td>不会</td>
</tr>
</tbody>
</table>]]></summary>
    <content type="html"><![CDATA[<p>首先，三者都是 JavaScript 声明变量的方式。区别在于：</p>
<p>|              | var                        | let                        | const                      |<br>
|</p>
]]></content>
    <category term="JavaScript"/>
    <published>2022-05-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">placeholder 支持换行展示</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/practice/010-antd-textarea-placeholder-pre-line.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/practice/010-antd-textarea-placeholder-pre-line.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p><code>placeholder</code> 内容有时需要支持换行，查了网上一些例子，结果都无法实现。</p>
<h2>错误 demo</h2>
<h3>直接使用 <code>\n</code></h3>
<p>会被当成字符渲染。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input.TextArea</span></span>
  <span class="token attr-name">rows</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>多个关键词请使用逗号分隔\nShift+Enter换行，Enter搜索<span class="token punctuation">"</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p><code>placeholder</code> 内容有时需要支持换行，查了网上一些例子，结果都无法实现。</p>
<h2>错误 demo</h2>
<h3>直接使用 <code>\n</code></h3>
<p>会被当成字符渲染。</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input.TextArea</span></span>
  <span class="token attr-name">rows</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>多个关键词请使用逗号分隔\nShift+Enter换行，Enter搜索<span class="token punctuation">"</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240408181616.png" alt="直接使用 " tabindex="0" loading="lazy"><figcaption>直接使用 <code>\n</code></figcaption></figure>
<h3>使用 ASCII 码</h3>
<p>若使用 <code>ASCII</code> 码会被处理成空格。</p>
<ul>
<li><code>&amp;#10;</code>——换行符 <code>\n</code></li>
<li><code>&amp;#13;</code>——回车 <code>\r</code></li>
</ul>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input.TextArea</span></span>
  <span class="token attr-name">rows</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>多个关键词请使用逗号分隔<span class="token entity" title="">&amp;#13;</span>Shift+Enter换行，Enter搜索<span class="token punctuation">"</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240408182209.png" alt="使用 ASCII 码" tabindex="0" loading="lazy"><figcaption>使用 ASCII 码</figcaption></figure>
<h2>正确做法 —— 使用 JSX</h2>
<p>此时应该使用 <code>\n</code> 实现换行。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在 JSX 中，要在字符串中插入 ASCII 字符，你需要直接使用对应的字符或者使用其 Unicode 表示方式，因为 HTML entities 在 JSX 中不会被解析。</p>
</div>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input.TextArea</span></span>
  <span class="token attr-name">rows</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">placeholder</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">多个关键词请使用逗号分隔\nShift+Enter换行，Enter搜索</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre></div><figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240408182716.png" alt="JSX" tabindex="0" loading="lazy"><figcaption>JSX</figcaption></figure>
]]></content>
    <category term="practice"/>
    <published>2024-04-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">务实的偏执</title>
    <id>https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/04-pragmatic-paranoid.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/reading/pragmatic-programmer/04-pragmatic-paranoid.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>契约式设计</h2>
<p>文档化及对主张进行检验是契约式设计（缩写为 DBC）的核心。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>前置条件</p>
<p>为调用这个例程，必须为真的是什么？例程的需求。一个例程永远不应该在前置条件被违反的时候被调用。传递良好的数据是调用者的责任。</p>
<p>后置条件</p>
<p>例程保证要做的是什么？例程完成时世界的状态。例程有后置条件这个事实，意味着能得出这样的结论——不允许无限循环。</p>
<p>类的不变式</p>
<p>从调用者的角度来看，类会确保该条件始终为真。在例程的内部处理期间，可以不遵守不变式，但是当例程退出并将控制权返回给调用者时，不变式必须为真。（注意，一个类不能给参与不变式的任何数据成员不受限制的写访问权限。）</p>
</div>]]></summary>
    <content type="html"><![CDATA[<h2>契约式设计</h2>
<p>文档化及对主张进行检验是契约式设计（缩写为 DBC）的核心。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>前置条件</p>
<p>为调用这个例程，必须为真的是什么？例程的需求。一个例程永远不应该在前置条件被违反的时候被调用。传递良好的数据是调用者的责任。</p>
<p>后置条件</p>
<p>例程保证要做的是什么？例程完成时世界的状态。例程有后置条件这个事实，意味着能得出这样的结论——不允许无限循环。</p>
<p>类的不变式</p>
<p>从调用者的角度来看，类会确保该条件始终为真。在例程的内部处理期间，可以不遵守不变式，但是当例程退出并将控制权返回给调用者时，不变式必须为真。（注意，一个类不能给参与不变式的任何数据成员不受限制的写访问权限。）</p>
</div>
<h2>通过契约进行设计</h2>
<p>如果你订的契约是可以接受任何东西，并且承诺要回报整个世界，那么你就有很多代码要写！</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>是不是这就是需要解耦？</p>
</div>
]]></content>
    <category term="READING"/>
    <published>2024-04-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">SEO</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/html/013-seo.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/html/013-seo.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<h2>什么是 SEO</h2>
<p>SEO（Search Engine Optimization，搜索引擎优化）。这是一套指导原则，旨在使网站在搜索结果中的排名高于其他网站。特别是针对有机（未付费）搜索结果。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>谷歌是迄今为止全球最主要的搜索引擎。作为行业领导者，谷歌为其他搜索引擎定下了基调。</p>
</div>
<h2>过去</h2>
<p>在 2000 年代，搜索引擎优化意味着通过一系列肮脏的手段来提高网站在谷歌上的排名。</p>]]></summary>
    <content type="html"><![CDATA[<h2>什么是 SEO</h2>
<p>SEO（Search Engine Optimization，搜索引擎优化）。这是一套指导原则，旨在使网站在搜索结果中的排名高于其他网站。特别是针对有机（未付费）搜索结果。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>谷歌是迄今为止全球最主要的搜索引擎。作为行业领导者，谷歌为其他搜索引擎定下了基调。</p>
</div>
<h2>过去</h2>
<p>在 2000 年代，搜索引擎优化意味着通过一系列肮脏的手段来提高网站在谷歌上的排名。</p>
<p>例如，人们在网页底部放置大量关键词列表。有时，他们还会将关键词重复 1000 次，并将其放在白色区域或隐形 <code>div</code> 内。谷歌被欺骗了，从而提高了他们的排名。</p>
<p>这种时代已经一去不复返了。谷歌聘请了世界上最优秀的人才，确保用户只能搜索到最有用的网页。</p>
<p>上述漏洞以及更多漏洞在 <a href="https://support.google.com/webmasters/topic/6001971" target="_blank" rel="noopener noreferrer">谷歌质量指南</a> 中都有详细说明。</p>
<p>如果您的产品出于某种原因包含任何违反这些指南的内容，即使它们是不小心出现的，我也强烈建议将其删除，因为谷歌现在会对违反指南的网站进行惩罚。</p>
<h2>搜索引擎优化</h2>
<p>谷歌的排名算法非常复杂。谷歌的专家多年来一直在研究这些算法。如今，谷歌每天都会进行更新，更大的更新每年发布一到两次。</p>
<p>有关 Google 如何对网页进行排名的信息一直在发布，有时还会有额外的信息泄露。一些网站试图跟踪这些更新，了解更新对搜索引擎优化的影响。</p>
<p>对于开发人员来说，许多工具都可以抓取网站，并生成一份可以改进的网站技术方面的清单。例如，如果你没有使用正确的标题或状态代码。以下是其中几种工具：</p>
<ul>
<li><a href="https://www.checkbot.io/" target="_blank" rel="noopener noreferrer">checkbot</a></li>
<li><a href="https://seositecheckup.com/" target="_blank" rel="noopener noreferrer">SEO Site Checkup</a></li>
<li><a href="https://www.woorank.com/" target="_blank" rel="noopener noreferrer">woorank</a></li>
<li><a href="https://suite.seotesteronline.com/" target="_blank" rel="noopener noreferrer">SEO Tester Online</a></li>
<li><a href="https://freetools.seobility.net/" target="_blank" rel="noopener noreferrer">seobility</a></li>
<li><a href="https://www.screamingfrog.co.uk/seo-spider/" target="_blank" rel="noopener noreferrer">screamingfrog</a></li>
<li><a href="https://gtmetrix.com/" target="_blank" rel="noopener noreferrer">GTmetrix</a></li>
</ul>
<h2>最佳实践</h2>
<p>作为开发人员，应该考虑：快速，可访问性，使用正确的语义 <code>html</code> 标签，包括正确的结构化数据，移动友好，使用 <code>https</code>， <code>url</code> 清晰，等等。</p>
<p><a href="https://developers.google.com/search/docs/fundamentals/seo-starter-guide?visit_id=638468790764088645-267844796&amp;rd=1&amp;hl=zh-cn" target="_blank" rel="noopener noreferrer">谷歌 SEO 指南</a> 有详细介绍，下面是一些较为重要的最佳实践。</p>
<ul>
<li><code>&lt;title&gt;</code> 和 <code>&lt;meta name="description"&gt;</code> 是控制网页在 Google 结果页面上显示方式的标签。</li>
<li>HTML 标签（如标题标签 <code>h1</code>、<code>h2</code>）和 HTML 属性（如 <code>&lt;img&gt;</code> 标签上的 <code>alt</code> 属性）可帮助创建网页结构，以便爬虫更好地解读内容。</li>
<li>结构化数据将网页中的信息，如排名、位置、营业时间和价格等，显示在谷歌搜索页面上。搜索页面上出现的信息越多，网页被点击的几率就越高。</li>
<li>使网站对移动设备友好。</li>
<li>使用 HTTPS 协议。</li>
<li>让残疾人也能访问您的网站。这样不仅能让更多人访问你的网站，谷歌也会给你更高的排名。</li>
<li>使用合理且有意义的网站分层。<code>example.com/RunningShoes/Womens</code>而不是 <code>example.com/123123/123123</code></li>
<li>注意你的 <code>&lt;a href&gt;</code> 链接
<ul>
<li>每个链接都必须包含有意义的文本。</li>
<li>使用 <code>&lt;a&gt;</code> 标签上的额外属性告诉谷歌你的外部网站链接的性质。例如，<code>rel="nofollow"</code> 用于让谷歌知道你与链接的网站没有关联。</li>
<li>确保您希望谷歌抓取的每个页面都通过 <code>&lt;a href&gt;</code> 从主页链接（可能通过多个链接）。</li>
</ul>
</li>
<li>确保不同版本之间的内容不重复，以免相互竞争：
<ul>
<li>如果您对网站进行了结构调整，请使用 301 重定向，这样两个版本就不会被分别收录，也不会相互竞争。</li>
<li>坚持使用一个版本的网站链接：</li>
<li>使用 <code>&lt;meta rel="canonical"&gt;</code> 标签来表示不同的页面和 URL 包含相同的内容。</li>
</ul>
</li>
<li>本地化——使用 <code>hreflang meta</code> 标签告诉谷歌一个网页在不同语言中有不同的版本。</li>
<li>提高网站速度，在 <a href="https://pagespeed.web.dev/?utm_source=psi&amp;utm_medium=redirect" target="_blank" rel="noopener noreferrer">Google PageSpeed Insights</a> 上获得高分。</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>网站响应速度会影响搜索引擎排名，这一部分涉及到性能优化。</p>
</div>
]]></content>
    <category term="HTML"/>
    <published>2024-03-24T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">表单数据校验</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/basic/html/012-form-validation.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/basic/html/012-form-validation.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>表单校验帮助我们确保用户以正确格式填写表单数据，确保提交的数据能使我们的应用程序正常工作。</p>
<h2>什么是表单数据校验</h2>
<p>表单校验——验证你输入表单的数据是否正确。</p>
<ul>
<li>该字段是必填的</li>
<li>请输入你的电话号码，它的格式是：xxx-xxxx</li>
<li>请输入一个合法的邮箱地址</li>
<li>你的密码长度应该是 8 至 30 位的，并且至少应该包含一个大写字母、一个符号以及一个数字</li>
</ul>
<h2>不同类型的表单数据校验</h2>
<p>在 Web 中，你可能会遇见各种不同的表单校验：</p>
<ul>
<li>「客户端校验」：这种类型的校验可以进一步细分成下面这些方式：
<ul>
<li>JavaScript 校验，这是可以完全自定义的实现方式；</li>
<li>HTML5 内置校验，这不需要 JavaScript，而且性能更好，但是不能像 JavaScript 那样可自定义。</li>
</ul>
</li>
<li>「服务器端校验」：通常服务器端校验都是发生在将数据写入数据库之前，如果数据没通过校验，则会直接从服务器端返回错误消息。</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>表单校验帮助我们确保用户以正确格式填写表单数据，确保提交的数据能使我们的应用程序正常工作。</p>
<h2>什么是表单数据校验</h2>
<p>表单校验——验证你输入表单的数据是否正确。</p>
<ul>
<li>该字段是必填的</li>
<li>请输入你的电话号码，它的格式是：xxx-xxxx</li>
<li>请输入一个合法的邮箱地址</li>
<li>你的密码长度应该是 8 至 30 位的，并且至少应该包含一个大写字母、一个符号以及一个数字</li>
</ul>
<h2>不同类型的表单数据校验</h2>
<p>在 Web 中，你可能会遇见各种不同的表单校验：</p>
<ul>
<li>「客户端校验」：这种类型的校验可以进一步细分成下面这些方式：
<ul>
<li>JavaScript 校验，这是可以完全自定义的实现方式；</li>
<li>HTML5 内置校验，这不需要 JavaScript，而且性能更好，但是不能像 JavaScript 那样可自定义。</li>
</ul>
</li>
<li>「服务器端校验」：通常服务器端校验都是发生在将数据写入数据库之前，如果数据没通过校验，则会直接从服务器端返回错误消息。</li>
</ul>
<p>在真实的项目开发过程中，开发者一般都倾向于使用客户端校验与服务器端校验的组合校验方式以更好的保证数据的正确性与安全性。</p>
<h2>HTML5 内置校验</h2>
<p>HTML5 可以通过表单元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Constraint_validation" target="_blank" rel="noopener noreferrer">校验属性</a> 实现对用户的输入进行数据校验。</p>
<p>这些属性可以让你定义一些规则，用于限定用户的输入，比如某个输入框是否必须输入，或者某个输入框的字符串的最小最大长度限制，或者某个输入框必须输入一个数字、邮箱地址等；还有数据必须匹配的模式。</p>
<p>如果表单中输入的数据都符合这些限定规则，那么表示这个表单校验通过，否则则认为校验未通过。</p>
<p>当一个元素校验通过时：</p>
<ul>
<li>该元素将可以通过 CSS 伪类 <code>:valid</code> 进行特殊的样式化；</li>
<li>如果用户尝试提交表单，如果没有其他的控制来阻止该操作（比如 JavaScript 即可阻止提交），那么该表单的数据会被提交。</li>
</ul>
<p>如果一个元素未校验通过：</p>
<ul>
<li>该元素将可以通过 CSS 伪类 <code>:invalid</code> 进行特殊的样式化；</li>
<li>如果用户尝试提交表单，浏览器会展示出错误消息，并停止表单的提交。</li>
</ul>
<h3>required 属性</h3>
<p>最简单的 HTML5 校验功能是 <code>required</code> 属性 — 如果要使输入成为必需的，则可以使用此属性标记元素。</p>
<p>当设置此属性时，如果输入为空，该表单将不会提交（并将显示错误消息），输入也将被视为无效。</p>
<p>在校验失败时输入框会有一个亮红色的虚线边框，在校验通过时会有一个黄色边框。</p>

<h3>正则表达式</h3>
<p>另一个常用的校验功能是 <code>pattern</code> 属性，以正则表达式作为 <code>value</code> 值。</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>choose<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Would you prefer a banana or a cherry?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>choose<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i_like<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>banana|cherry<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<h3>demo</h3>
<p>这里展示一个较为完整的例子：</p>

<h3>自定义错误信息</h3>
<p>每次我们提交无效的表单数据时，浏览器总会显示错误信息。但是显示的信息取决于你所使用的浏览器。</p>
<p>这些自动生成的错误有两个缺点：</p>
<ul>
<li>没有标准可以让 CSS 来改变他们的界面外观。</li>
<li>这依赖于他们使用的浏览器环境，意味着你可能在这种语言的页面里得到另一种语言的错误提示。</li>
</ul>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240320183034.png" alt="错误信息" tabindex="0" loading="lazy"><figcaption>错误信息</figcaption></figure>
<p>要自定义这些消息的外观和文本，你必须使用 JavaScript; 不能使用 HTML 和 CSS 来改变。</p>
<p>HTML5 提供 <a href="https://html.spec.whatwg.org/multipage/forms.html#the-constraint-validation-api" target="_blank" rel="noopener noreferrer">constraint validation API</a> 来检测和自定义表单元素的状态。</p>
<p>除此之外，它可以改变错误信息的文本。让我们快速的看一个例子：</p>

<h2>JavaScript 校验</h2>
<h3>约束校验的 API</h3>
<p>越来越多的浏览器支持限制校验 API，并且这逐渐变得可靠。这些 API 由成组的方法和属性构成，可在特定的表单元素接口上调用：</p>
<ul>
<li>HTMLButtonElement</li>
<li>HTMLFieldSetElement</li>
<li>HTMLInputElement</li>
<li>HTMLOutputElement</li>
<li>HTMLSelectElement</li>
<li>HTMLTextAreaElement</li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>具体属性见 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/Forms/Form_validation#%E4%BD%BF%E7%94%A8_javascript_%E6%A0%A1%E9%AA%8C%E8%A1%A8%E5%8D%95" target="_blank" rel="noopener noreferrer">约束校验的 API</a></p>
</div>
<h3>demo</h3>
<p>这个简单的表单使用 <code>novalidate</code> 属性关闭浏览器的自动校验；这允许我们使用脚本控制表单校验。</p>
<p>但是，这并不禁止对约束校验 API 的支持或是以下 CSS 伪类：<code>:valid</code>、<code>:invalid</code>、<code>:in-range</code> 、<code>:out-of-range</code> 的应用。</p>
<p>这意味着，即使浏览器在发送数据之前没有自动检查表单的有效性，你仍然可以自己做，并相应地设置表单的样式。</p>

<div class="hint-container info">
<p class="hint-container-title">一些校验库</p>
<ul>
<li><a href="https://github.com/rickharrison/validate.js" target="_blank" rel="noopener noreferrer">Validate.js</a></li>
<li><a href="https://github.com/react-component/field-form" target="_blank" rel="noopener noreferrer">rc-field-form</a></li>
</ul>
</div>
]]></content>
    <category term="HTML"/>
    <published>2024-03-19T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Style Props</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/02-style-props.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/02-style-props.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p>Style Props 是一种通过简单传递 <code>prop</code> 来改变组件样式的方法。它通过提供有用的速记方法来改变组件的样式，从而节省时间。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>完整 <code>prop</code> 别名见：<a href="https://chakra-ui.com/docs/styled-system/style-props" target="_blank" rel="noopener noreferrer">Chakra UI - Style Props</a>。</p>
<p>类似 Tailwind 和 驼峰 CSS。</p>
</div>]]></summary>
    <content type="html"><![CDATA[<p>Style Props 是一种通过简单传递 <code>prop</code> 来改变组件样式的方法。它通过提供有用的速记方法来改变组件的样式，从而节省时间。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>完整 <code>prop</code> 别名见：<a href="https://chakra-ui.com/docs/styled-system/style-props" target="_blank" rel="noopener noreferrer">Chakra UI - Style Props</a>。</p>
<p>类似 Tailwind 和 驼峰 CSS。</p>
</div>
<h2>margin and padding</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// m={2} refers to the value of `theme.space[2]`</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">m</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Tomato</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// You can also use custom values</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">maxW</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>960px<span class="token punctuation">"</span></span> <span class="token attr-name">mx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// sets margin `8px` on all viewports and `12px` from the first breakpoint and up</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">m</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2>color and background-color</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// picks up a nested color value using dot notation</span>
<span class="token comment">// =&gt; `theme.colors.gray[50]`</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>gray.50<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// raw CSS color value</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>#f00<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// background colors</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>tomato<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// verbose prop</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">backgroundColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>tomato<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2>Gradient</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box<span class="token punctuation">,</span> Text <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// adding linear gradient and color transitions</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">h</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">bgGradient</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>linear(to-t, green.200, pink.500)<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// adding radial gradient and color transitions</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">h</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">bgGradient</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radial(gray.300, yellow.400, pink.200)<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// adding the text gradient</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span>
  <span class="token attr-name">bgGradient</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>linear(to-l, #7928CA, #FF0080)<span class="token punctuation">"</span></span>
  <span class="token attr-name">bgClip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>
  <span class="token attr-name">fontSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6xl<span class="token punctuation">"</span></span>
  <span class="token attr-name">fontWeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>extrabold<span class="token punctuation">"</span></span>
<span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Welcome to Chakra UI
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>Typography</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Text <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// font-size of `theme.fontSizes.md`</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">fontSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// font-size `32px`</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">fontSize</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">32</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// font-size `'2em'`</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">fontSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>2em<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// text-align `left` on all viewports and `center` from the first breakpoint and up</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">textAlign</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span> <span class="token string">'left'</span><span class="token punctuation">,</span> <span class="token string">'center'</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2>Layout, width and height</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// verbose</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">32</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// shorthand</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">h</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32px<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// use theme sizing</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxSize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sm<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// width `256px`</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">w</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">256</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// width `'40px'`</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>40px<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2>Display</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@chakra-ui/react'</span>

<span class="token comment">// hide the element on all viewports</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">display</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>none<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// hide the element by default, and show from 'md' up</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">display</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span> <span class="token literal-property property">md</span><span class="token operator">:</span> <span class="token string">"block"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// shorthand</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">hideBelow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>md<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// hide the element from 'md' up</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">display</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">"block"</span><span class="token punctuation">,</span> <span class="token literal-property property">md</span><span class="token operator">:</span> <span class="token string">"none"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// shorthand</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">hideFrom</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>md<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2>Flexbox</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box<span class="token punctuation">,</span> Flex <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// verbose</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">display</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex<span class="token punctuation">"</span></span> <span class="token attr-name">alignItems</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">justifyContent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>space-between<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Box with Flex props
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// shorthand using the `Flex` component</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Flex</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">justify</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Flex Container
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Flex</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>Grid Layout</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box<span class="token punctuation">,</span> Grid <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// verbose</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">display</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid<span class="token punctuation">"</span></span> <span class="token attr-name">gridGap</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span> <span class="token attr-name">gridAutoFlow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row dense<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Grid
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// shorthand using the `Grid` component</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Grid</span></span> <span class="token attr-name">gap</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span> <span class="token attr-name">autoFlow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row dense<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Grid
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Grid</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>Background</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// verbose</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span>
  <span class="token attr-name">backgroundImage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url('/images/kyuubi.png')<span class="token punctuation">"</span></span>
  <span class="token attr-name">backgroundPosition</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>
  <span class="token attr-name">backgroundRepeat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-repeat<span class="token punctuation">"</span></span>
<span class="token punctuation">/&gt;</span></span>

<span class="token comment">// shorthand</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span>
  <span class="token attr-name">bgImage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url('/images/gaara.png')<span class="token punctuation">"</span></span>
  <span class="token attr-name">bgPosition</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>
  <span class="token attr-name">bgRepeat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-repeat<span class="token punctuation">"</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2>Border</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span> <span class="token attr-name">borderColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gray.200<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Card
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>Border Radius</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// This button will have no right borderRadius</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">borderRightRadius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Button 1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// This button will have no left borderRadius*/</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">borderLeftRadius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Button 2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// top left and top right radius will be `theme.radii.md` =&gt; 4px</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">borderTopRadius</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Button 2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>Position</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Box <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// verbose</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>absolute<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Cover</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// shorthand</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">pos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>absolute<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Cover</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">pos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>absolute<span class="token punctuation">"</span></span> <span class="token attr-name">top</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">left</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Absolute with top and left
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">pos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fixed<span class="token punctuation">"</span></span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">zIndex</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Fixed with zIndex
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>Shadow</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240307183600.png" alt="Shadow" tabindex="0" loading="lazy"><figcaption>Shadow</figcaption></figure>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleGrid</span></span>
  <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gray.50<span class="token punctuation">"</span></span>
  <span class="token attr-name">columns</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">sm</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">md</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">spacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span>
  <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span>
  <span class="token attr-name">textAlign</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>
  <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lg<span class="token punctuation">"</span></span>
  <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gray.400<span class="token punctuation">"</span></span>
<span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xs<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    xs
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sm<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    sm
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>base<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    Base
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    md
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lg<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    lg
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xl<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    xl
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2xl<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    2xl
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dark-lg<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    Dark lg
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outline<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    Outline
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">boxShadow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span> <span class="token attr-name">p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">rounded</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>md<span class="token punctuation">"</span></span> <span class="token attr-name">bg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    Inner
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SimpleGrid</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>Filter</h2>
<figure><img src="https://raw.githubusercontent.com/dribble-njr/typora-njr/master/img/20240307183703.png" alt="Filter" tabindex="0" loading="lazy"><figcaption>Filter</figcaption></figure>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">Filters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> basicBoxStyles <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">'flex'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">alignItems</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">justifyContent</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">textAlign</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">boxSize</span><span class="token operator">:</span> <span class="token string">'250px'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">textShadow</span><span class="token operator">:</span> <span class="token string">'0 0 20px black'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">'20px'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">px</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token literal-property property">background</span><span class="token operator">:</span>
      <span class="token string">'url(https://picsum.photos/id/1080/200/300) center/cover no-repeat'</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Flex</span></span> <span class="token attr-name">flexWrap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span> <span class="token attr-name">gap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24px<span class="token punctuation">"</span></span> <span class="token attr-name">justifyContent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>space-evenly<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* adding filter property to the element */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">sx</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>basicBoxStyles<span class="token punctuation">}</span></span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grayscale(80%)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        Box with Filter
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* adding blur property to the element */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">sx</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>basicBoxStyles<span class="token punctuation">}</span></span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span> <span class="token attr-name">blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2px<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        Box with Blur
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* adding brightness property to the element */</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span> <span class="token attr-name">sx</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>basicBoxStyles<span class="token punctuation">}</span></span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span> <span class="token attr-name">brightness</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        Box with Brightness
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Flex</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>伪类</h2>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@chakra-ui/react"</span>

<span class="token comment">// :hover style</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span>
  <span class="token attr-name">colorScheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teal<span class="token punctuation">"</span></span>
  <span class="token attr-name">_hover</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
    <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"teal.500"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Hover me
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// apply :hover over parent element</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span>
  <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span>
<span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span>
    <span class="token attr-name">_hover</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">'semibold'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
    <span class="token attr-name">_groupHover</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'tomato'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
  <span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// add ::before pseudo element</span>
<span class="token comment">// Note: the content value needs an extra set of quotes!</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Box</span></span>
  <span class="token attr-name">_before</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'"🙂"'</span><span class="token punctuation">,</span> <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token string">'inline-block'</span><span class="token punctuation">,</span> <span class="token literal-property property">mr</span><span class="token operator">:</span> <span class="token string">'5px'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="token punctuation">&gt;</span></span><span class="token plain-text">
  A pseudo element
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Box</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2><code>as</code></h2>
<p><code>as</code> prop 是所有组件中的一项功能，它允许您传递要呈现的 HTML 标记或组件。</p>
<p>例如，您正在使用一个 Button 组件，但需要将其转换为一个链接。您可以像这样组成一个和 Button：</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">variant</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outline<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://chakra-ui.com<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  Hello
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></content>
    <category term="chakra"/>
    <published>2024-03-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">快速开始</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/01-getting-started.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/01-getting-started.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://chakra-ui.com/" target="_blank" rel="noopener noreferrer">Chakra UI</a> 是一个简单、模块化和可访问的组件库，可提供构建 React 应用程序所需的组件。</p>
<div class="hint-container tip">
<p class="hint-container-title">总结</p>
<p>非常灵活自由，但有一定上手门槛。</p>
</div>
<h2>设计原则</h2>
<p>Chakra UI 建立在保持组件一致性的原则之上。了解这些概念将有助于您更好地为 Chakra UI 做出贡献。</p>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://chakra-ui.com/" target="_blank" rel="noopener noreferrer">Chakra UI</a> 是一个简单、模块化和可访问的组件库，可提供构建 React 应用程序所需的组件。</p>
<div class="hint-container tip">
<p class="hint-container-title">总结</p>
<p>非常灵活自由，但有一定上手门槛。</p>
</div>
<h2>设计原则</h2>
<p>Chakra UI 建立在保持组件一致性的原则之上。了解这些概念将有助于您更好地为 Chakra UI 做出贡献。</p>
<p>我们的目标是设计简单、可组合的组件，以解决现实生活中的用户界面设计问题。为此，我们制定了一系列原则，帮助我们始终沿着这条道路前进。</p>
<ul>
<li>Style Props：所有组件的样式都可以通过 <code>style props</code> 覆盖或扩展，以减少 <code>css prop</code> 或 <code>styled()</code> 的使用。从 Box 中组合新组件。</li>
<li>简单：努力保持组件应用程序接口（API）相当简单，并展示组件在现实世界中的使用场景。</li>
<li>组合：将组件分解成具有最小道具的较小部分，以降低复杂性，并将它们组合在一起。这将确保样式和功能的灵活性和可扩展性。</li>
<li>可访问性：创建组件时，应将可访问性放在首位。这包括键盘导航、焦点管理、色彩对比、语音播报以及正确的 <code>aria-*</code> 属性。</li>
<li>暗色模式：使组件兼容暗色模式。使用 <code>useColorMode</code> 钩子处理样式。了解有关 <a href="https://chakra-ui.com/docs/styled-system/color-mode" target="_blank" rel="noopener noreferrer">暗色模式</a> 的更多信息。</li>
<li><code>Naming Props</code>：命名是最难的事情。一般来说，要确保 <code>prop name</code> 能说明其作用。<code>Boolean prop</code> 应使用助动词命名，如 <code>does</code>、<code>has</code>、<code>is</code> 和 <code>should</code>。例如，按钮使用 <code>isDisabled</code>、<code>isLoading</code> 等。</li>
</ul>
<h2>对比</h2>
<h3>Tailwind CSS</h3>
<h4>总览</h4>
<p><a href="https://tailwindcss.com/" target="_blank" rel="noopener noreferrer">Tailwind CSS</a>：CSS 框架，提供原子 CSS 类，帮助你为组件设计样式、可访问性、组件组成、键盘导航、样式重写等。</p>
<p>Chakra UI：一个由精心创建的 React 组件组成的库，具有 Tailwind 的所有样式优势，并能处理所有细节。</p>
<h4>学习曲线</h4>
<p>Tailwind CSS：如果你有过 Bootstrap 或 Bulma CSS 背景，你可能会发现学习 Tailwind 非常容易。但是，如果你是 <code>styled-components</code> 或 <code>emotion</code> 背景，学习曲线可能会相当陡峭。</p>
<p>Chakra UI：Chakra UI 采用非常直观、类似 CSS 和基于 <code>prop</code> 的组件样式模型，因此很容易上手。组件名称和 <code>prop</code> 名称也非常容易理解。</p>
<h4>响应式</h4>
<p>Tailwind CSS：在 Tailwind 中创建响应式样式需要结合伪类。随着项目的增长，这可能会变得相当冗长。</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>w-16 md:w-32 lg:w-48<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>Chakra UI：以非常简单直观的方式创建响应式样式。可以使用数组或对象符号：</p>
<div class="language-jsx" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Img</span></span> <span class="token attr-name">w</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Img</span></span> <span class="token attr-name">w</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> base：<span class="token number">16</span><span class="token punctuation">,</span> md：<span class="token number">32</span><span class="token punctuation">,</span> lg：<span class="token number">48</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span></code></pre></div><h4>样式覆盖</h4>
<p>在大多数应用中，为满足设计要求而覆盖特定上下文的样式是一项常见的挑战。</p>
<p>Tailwind CSS：鉴于 Tailwind 是一个 CSS 实用框架，你可能需要找出覆盖特定 classNames 或编写自定义 CSS 的最佳方法。</p>
<p>Chakra UI：Chakra UI 的样式是基于 <code>prop</code> 的，因此覆盖就像传递 <code>prop</code> 一样简单。</p>
<h4>可访问性</h4>
<p>如前所述，Tailwind CSS 只是一个 CSS 框架，类似于 Bootstrap 或 Bulma CSS。这样，用户就可以处理语义 html 结构、满足 WAI-ARIA 要求、键盘导航等。</p>
<p>Chakra 不仅提供了 Tailwind 的便利性，还具有其他所有优点。</p>
<h4>暗色模式</h4>
<p>Tailwind CSS：所有组件均与暗色模式兼容。</p>
<p>Chakra UI：所有组件均兼容明暗模式。还可以在整个应用程序中创建自己的明暗模式体验。</p>
<h3>Theme UI</h3>
<p>Chakra UI 深受 Theme UI 的启发，并遵循系统 UI 规范。</p>
<p>与 Theme UI 相比，Chakra UI 提供了更多组件、改进的样式 API、可访问性和直观的组件 API。</p>
<p>可以将 Chakra 视为更强大的 Theme UI 版本，它充分利用了 <code>styled-system</code> 的全部功能，提供更好的组件样式和主题。</p>
<h3>Material UI</h3>
<p>Material UI React 库为用户提供了大量 UI 布局工具，但其最著名的地方在于它提供了大量预设样式的 UI 组件，开发人员可以在这些组件上应用自定义样式来覆盖开箱即用的基础样式。</p>
<p>Chakra UI 是一个更强大、更注重布局的库，它也为开发人员提供了与 Material UI 类似的 UI 组件，但更注重创建灵活、可组合和可扩展的代码。</p>
<p>在比较这两个框架时，需要考虑的一个核心概念是 "易于修改"。</p>
<p>相比之下，Material UI 为与导出组件和布局相关的单个 HTML 标签添加了更多的类，这迫使开发人员在定制界面时不得不与基本样式作斗争。</p>
<p>Chakra 为开发人员提供了更大的自由度来操作导出组件和布局的 CSS 类，而且通常只需较少的代码即可完成。</p>
<p>例如，Material UI 需要单独的代码来控制基于视口变化的响应式样式，而 Chakra 提供了内置的响应式样式支持，无需创建 CSS 类或媒体查询。</p>
<p>如果自定义样式并不是项目的主要关注点，Material UI 则是有益的，因为您可以避免创建该库所提供的自定义组件。</p>
<p>如果可扩展的自定义设计对您的项目很重要（很多时候确实如此），Chakra 对开发人员的便利性比 Material UI 更为突出，尤其是在项目随时间扩展的情况下。</p>
<h3>Ant Design</h3>
<p>Ant Design React 库是 ant.design 设计语言的实现。这意味着组件遵循现有的设计规则和值，只允许在有限的范围内自定义某些变量。</p>
<p>Chakra 不受任何设计系统的束缚，可以更自由地定制组件，实现自己的设计。</p>
<h4>样式组件</h4>
<p>Ant Design 组件是为开箱即用而构建的，因此它们的特定样式 <code>prop</code> 和自定义功能非常有限。</p>
<p>另一方面，Chakra 组件的主要风格化方式是将样式作为 <code>prop</code>。</p>
<p>以按钮组件为例。Chakra Button 的 <code>colorScheme</code>（色彩主题）道具在默认情况下有许多不同的值，您可以对其进行自定义和/或扩展，以应用自己的设计。</p>
<p>相比之下，您需要记住，Antd Design 按钮只有在拥有 <code>primary prop</code> 和 <code>danger prop</code> 的情况下才能着色，而不能因为 Ant Design 的现有设计值而着色。</p>
<p>同样的模式也可以在布局、表单和排版等其他组件中看到。</p>
<h4>设置和自定义</h4>
<p>Ant Design 有一长串可修改的默认变量，包括颜色、页边距、边距、动画、阴影、边框、屏幕尺寸、尺寸等，有些是通用变量，有些则是用户界面组件的特定变量。为了尊重底层设计规范，除修改这些现有变量外，不建议进行其他自定义操作。</p>
<p>Chakra 的特点是所有全局和组件样式默认值都可以轻松定制/扩展。可以为每个组件定义新的尺寸或变体。此外，您还可以使用 Chakra Factory 从现有组件甚至非 Chakra 组件中组合出新的组件。</p>
]]></content>
    <category term="chakra"/>
    <published>2024-03-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">chakra</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/chakra/"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <published>2024-03-07T09:35:01.000Z</published>
  </entry>
  <entry>
    <title type="text">页面和布局</title>
    <id>https://dribble-njr.github.io/blog/blog/frontend/framework/next/pages-router/01-pages-layouts.html</id>
    <link href="https://dribble-njr.github.io/blog/blog/frontend/framework/next/pages-router/01-pages-layouts.html"/>
    <updated>2024-11-06T15:43:46.000Z</updated>
    <summary type="html"><![CDATA[<p><code>pages router</code> 是基于文件系统的路由器，以页面概念为基础。</p>
<p>当一个文件被添加到 <code>pages</code> 目录时，它就会自动成为一个路由。</p>
<p>在 Next.js 中，页面是从页面目录中的 <code>.js</code>、<code>.jsx</code>、<code>.ts</code> 或 <code>.tsx</code> 文件导出的 React 组件。每个页面都根据其文件名与路由相关联。</p>
<p>例如如果创建的 <code>pages/about.js</code> 导出了一个 React 组件（如下所示），则可通过 <code>/about</code> 访问该组件。</p>]]></summary>
    <content type="html"><![CDATA[<p><code>pages router</code> 是基于文件系统的路由器，以页面概念为基础。</p>
<p>当一个文件被添加到 <code>pages</code> 目录时，它就会自动成为一个路由。</p>
<p>在 Next.js 中，页面是从页面目录中的 <code>.js</code>、<code>.jsx</code>、<code>.ts</code> 或 <code>.tsx</code> 文件导出的 React 组件。每个页面都根据其文件名与路由相关联。</p>
<p>例如如果创建的 <code>pages/about.js</code> 导出了一个 React 组件（如下所示），则可通过 <code>/about</code> 访问该组件。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">About</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>About<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>根路由</h2>
<p>路由器会自动将名为 <code>index</code> 的文件路由到目录根目录。</p>
<ul>
<li><code>pages/index.js</code> → <code>/</code></li>
<li><code>pages/blog/index.js</code> → <code>/blog</code></li>
</ul>
<h2>嵌套路由</h2>
<p>路由器支持嵌套文件。如果创建了嵌套文件夹结构，文件仍会自动以相同方式路由。</p>
<ul>
<li><code>pages/blog/first-post.js</code> → <code>/blog/first-post</code></li>
<li><code>pages/dashboard/settings/username.js</code> → <code>/dashboard/settings/username</code></li>
</ul>
<h2>带有动态路由的页面</h2>
<p>Next.js 支持带有动态路由的页面。例如，如果你创建了一个名为 <code>pages/posts/[id].js</code> 的文件，那么就可以通过 <code>posts/1</code>、<code>posts/2</code> 等路径访问该文件。</p>
<h2>布局模式</h2>
<p>React 模型允许我们将页面解构为一系列组件。其中许多组件通常会在页面之间重复使用。例如，您可能会在每个页面上使用相同的导航栏和页脚。</p>
<p><strong><code>components/layout.js</code></strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Navbar <span class="token keyword">from</span> <span class="token string">'./navbar'</span>
<span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">'./footer'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Layout</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Navbar <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>main<span class="token operator">&gt;</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Footer <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>例子</h2>
<h3>使用自定义应用程序的单一共享布局</h3>
<p>如果您的整个应用程序只有一个布局，您可以创建一个自定义应用程序，并用该布局包装您的应用程序。</p>
<p>由于 <code>&lt;Layout /&gt;</code> 组件在更改页面时会被重复使用，因此其组件状态（如输入值）会被保留。</p>
<p><strong><code>pages/_app.js</code></strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">'../components/layout'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Layout<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>按页面布局</h3>
<p>如果需要多种布局，可以在页面中添加 <code>getLayout</code> 属性，这样就可以返回布局的 React 组件，可以实现按页面定义布局。</p>
<p>由于我们返回的是一个函数，因此如果需要，我们可以使用复杂的嵌套布局。</p>
<p><strong><code>pages/index.js</code></strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">'../components/layout'</span>
<span class="token keyword">import</span> NestedLayout <span class="token keyword">from</span> <span class="token string">'../components/nested-layout'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token doc-comment comment">/** Your content */</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

Page<span class="token punctuation">.</span><span class="token function-variable function">getLayout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">getLayout</span><span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Layout<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>NestedLayout<span class="token operator">&gt;</span><span class="token punctuation">{</span>page<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>NestedLayout<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p><strong><code>pages/_app.js</code></strong></p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Use the layout defined at the page level, if available</span>
  <span class="token keyword">const</span> getLayout <span class="token operator">=</span> Component<span class="token punctuation">.</span>getLayout <span class="token operator">??</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> page<span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token function">getLayout</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在页面之间导航时，我们希望持久保存页面状态（输入值、滚动位置等），以获得单页面应用程序 (SPA) 体验。</p>
<p>这种布局模式可以实现状态持久化，因为 React 组件树会在页面转换之间保持不变。通过组件树，React 可以了解哪些元素发生了变化，从而保持状态。</p>
<h3>使用 TypeScript</h3>
<p>使用 TypeScript 时，首先必须为页面创建一个包含 <code>getLayout</code> 函数的新类型。然后，您必须为您的 <code>AppProps</code> 创建一个新类型，重载 <code>Component</code> 属性以使用之前创建的类型。</p>
<p><strong><code>pages/index.tsx</code></strong></p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ReactElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">'../components/layout'</span>
<span class="token keyword">import</span> NestedLayout <span class="token keyword">from</span> <span class="token string">'../components/nested-layout'</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> NextPageWithLayout <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./_app'</span>

<span class="token keyword">const</span> Page<span class="token operator">:</span> <span class="token function-variable function">NextPageWithLayout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>hello world<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

Page<span class="token punctuation">.</span><span class="token function-variable function">getLayout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">getLayout</span><span class="token punctuation">(</span>page<span class="token operator">:</span> ReactElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Layout<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>NestedLayout<span class="token operator">&gt;</span><span class="token punctuation">{</span>page<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>NestedLayout<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Layout<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Page
</code></pre></div><p><strong><code>pages/_app.tsx</code></strong></p>
<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ReactElement<span class="token punctuation">,</span> ReactNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> NextPage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'next'</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> AppProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'next/app'</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">NextPageWithLayout<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">IP</span> <span class="token operator">=</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> NextPage<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">IP</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  getLayout<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>page<span class="token operator">:</span> ReactElement<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ReactNode
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">AppPropsWithLayout</span> <span class="token operator">=</span> AppProps <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  Component<span class="token operator">:</span> NextPageWithLayout
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span><span class="token operator">:</span> AppPropsWithLayout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Use the layout defined at the page level, if available</span>
  <span class="token keyword">const</span> getLayout <span class="token operator">=</span> Component<span class="token punctuation">.</span>getLayout <span class="token operator">??</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> page<span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token function">getLayout</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>获取数据</h3>
<p>在布局中，您可以使用 <code>useEffect</code> 或类似 <a href="https://swr.vercel.app/zh-CN" target="_blank" rel="noopener noreferrer">SWR</a> 的库在客户端获取数据。由于该文件不是页面，因此目前无法使用 <code>getStaticProps</code> 或 <code>getServerSideProps</code>。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> useSWR <span class="token keyword">from</span> <span class="token string">'swr'</span>
<span class="token keyword">import</span> Navbar <span class="token keyword">from</span> <span class="token string">'./navbar'</span>
<span class="token keyword">import</span> Footer <span class="token keyword">from</span> <span class="token string">'./footer'</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Layout</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSWR</span><span class="token punctuation">(</span><span class="token string">'/api/navigation'</span><span class="token punctuation">,</span> fetcher<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Failed to load<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Navbar links<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>links<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>main<span class="token operator">&gt;</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Footer <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content>
    <category term="next"/>
    <published>2024-03-05T00:00:00.000Z</published>
  </entry>
</feed>